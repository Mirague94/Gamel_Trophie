

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Jan 06 15:37:53 2020

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40  0000                     
    41                           ; Version 1.42
    42                           ; Generated 13/04/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4550 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	smallconst
    77  000800                     __psmallconst:
    78                           	opt stack 0
    79  000800  00                 	db	0
    80  000801                     _s_digits:
    81                           	opt stack 0
    82  000801  30                 	db	48
    83  000802  31                 	db	49
    84  000803  32                 	db	50
    85  000804  33                 	db	51
    86  000805  34                 	db	52
    87  000806  35                 	db	53
    88  000807  36                 	db	54
    89  000808  37                 	db	55
    90  000809  38                 	db	56
    91  00080A  39                 	db	57
    92  00080B  61                 	db	97
    93  00080C  62                 	db	98
    94  00080D  63                 	db	99
    95  00080E  64                 	db	100
    96  00080F  65                 	db	101
    97  000810  66                 	db	102
    98  000811  00                 	db	0
    99  000812                     __end_of_s_digits:
   100                           	opt stack 0
   101  0000                     _T3CONbits	set	4017
   102  0000                     _PIE2bits	set	4000
   103  0000                     _PIR2bits	set	4001
   104  0000                     _TMR3L	set	4018
   105  0000                     _TMR3H	set	4019
   106  0000                     _T3CON	set	4017
   107  0000                     _TMR2	set	4044
   108  0000                     _PIE1bits	set	3997
   109  0000                     _PIR1bits	set	3998
   110  0000                     _TMR1L	set	4046
   111  0000                     _TMR1H	set	4047
   112  0000                     _T1CONbits	set	4045
   113  0000                     _T1CON	set	4045
   114  0000                     _T0CONbits	set	4053
   115  0000                     _INTCONbits	set	4082
   116  0000                     _TMR0L	set	4054
   117  0000                     _TMR0H	set	4055
   118  0000                     _T0CON	set	4053
   119  0000                     _CCP2CONbits	set	4026
   120  0000                     _CCPR2L	set	4027
   121  0000                     _CCP1CONbits	set	4029
   122  0000                     _CCPR1L	set	4030
   123  0000                     _T2CONbits	set	4042
   124  0000                     _PR2	set	4043
   125  0000                     _CCP2CON	set	4026
   126  0000                     _TRISCbits	set	3988
   127  0000                     _CCP1CON	set	4029
   128  0000                     _T2CON	set	4042
   129  0000                     _PORTDbits	set	3971
   130  0000                     _PORTD	set	3971
   131  0000                     _TRISD	set	3989
   132  0000                     _ADRESL	set	4035
   133  0000                     _ADRESH	set	4036
   134  0000                     _ADCON0	set	4034
   135  0000                     _ADCON0bits	set	4034
   136  0000                     _ADCON2	set	4032
   137  0000                     _TRISE	set	3990
   138  0000                     _TRISA	set	3986
   139  0000                     _ADCON1	set	4033
   140  0000                     _PORTEbits	set	3972
   141  0000                     _TRISEbits	set	3990
   142  000812                     STR_1:
   143  000812  25                 	db	37
   144  000813  33                 	db	51	;'3'
   145  000814  64                 	db	100	;'d'
   146  000815  20                 	db	32
   147  000816  25                 	db	37
   148  000817  33                 	db	51	;'3'
   149  000818  64                 	db	100	;'d'
   150  000819  20                 	db	32
   151  00081A  25                 	db	37
   152  00081B  33                 	db	51	;'3'
   153  00081C  64                 	db	100	;'d'
   154  00081D  20                 	db	32
   155  00081E  25                 	db	37
   156  00081F  33                 	db	51	;'3'
   157  000820  64                 	db	100	;'d'
   158  000821  00                 	db	0
   159  000822                     STR_2:
   160  000822  25                 	db	37
   161  000823  34                 	db	52	;'4'
   162  000824  64                 	db	100	;'d'
   163  000825  00                 	db	0
   164  000826  25                 	db	37
   165  000827  53                 	db	83	;'S'
   166  000828  00                 	db	0
   167  000829  25                 	db	37
   168  00082A  64                 	db	100	;'d'
   169  00082B  00                 	db	0
   170  0000                     
   171                           ; #config settings
   172  00082C  00                 	db	0	; dummy byte at the end
   173  0000                     
   174                           	psect	cinit
   175  00238E                     __pcinit:
   176                           	opt stack 0
   177  00238E                     start_initialization:
   178                           	opt stack 0
   179  00238E                     __initialization:
   180                           	opt stack 0
   181  00238E                     end_of_initialization:
   182                           	opt stack 0
   183  00238E                     __end_of__initialization:
   184                           	opt stack 0
   185  00238E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   186  002390  6EF8               	movwf	tblptru,c
   187  002392  0100               	movlb	0
   188  002394  EFD1  F00A         	goto	_main	;jump to C main() function
   189                           tblptru	equ	0xFF8
   190                           
   191                           	psect	cstackBANK0
   192  000060                     __pcstackBANK0:
   193                           	opt stack 0
   194  000060                     lcd_printf@buf:
   195                           	opt stack 0
   196                           
   197                           ; 33 bytes @ 0x0
   198  000060                     	ds	33
   199  000081                     lcd_printf@ramstring:
   200                           	opt stack 0
   201                           
   202                           ; 2 bytes @ 0x21
   203  000081                     	ds	2
   204  000083                     lcd_printf@sign_char:
   205                           	opt stack 0
   206                           
   207                           ; 1 bytes @ 0x23
   208  000083                     	ds	1
   209  000084                     lcd_printf@romstring:
   210                           	opt stack 0
   211                           
   212                           ; 2 bytes @ 0x24
   213  000084                     	ds	2
   214  000086                     lcd_printf@q:
   215                           	opt stack 0
   216                           
   217                           ; 2 bytes @ 0x26
   218  000086                     	ds	2
   219  000088                     lcd_printf@sign:
   220                           	opt stack 0
   221                           
   222                           ; 1 bytes @ 0x28
   223  000088                     	ds	1
   224  000089                     lcd_printf@k:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x29
   228  000089                     	ds	2
   229  00008B                     lcd_printf@have_sign:
   230                           	opt stack 0
   231                           
   232                           ; 1 bytes @ 0x2B
   233  00008B                     	ds	1
   234  00008C                     lcd_printf@prefix_cnt:
   235                           	opt stack 0
   236                           
   237                           ; 1 bytes @ 0x2C
   238  00008C                     	ds	1
   239  00008D                     lcd_printf@i:
   240                           	opt stack 0
   241                           
   242                           ; 1 bytes @ 0x2D
   243  00008D                     	ds	1
   244  00008E                     lcd_printf@w:
   245                           	opt stack 0
   246                           
   247                           ; 1 bytes @ 0x2E
   248  00008E                     	ds	1
   249  00008F                     lcd_printf@digit_cnt:
   250                           	opt stack 0
   251                           
   252                           ; 1 bytes @ 0x2F
   253  00008F                     	ds	1
   254  000090                     lcd_printf@larg:
   255                           	opt stack 0
   256                           
   257                           ; 4 bytes @ 0x30
   258  000090                     	ds	4
   259  000094                     lcd_printf@size:
   260                           	opt stack 0
   261                           
   262                           ; 1 bytes @ 0x34
   263  000094                     	ds	1
   264  000095                     lcd_printf@have_precision:
   265                           	opt stack 0
   266                           
   267                           ; 1 bytes @ 0x35
   268  000095                     	ds	1
   269  000096                     lcd_printf@x:
   270                           	opt stack 0
   271                           
   272                           ; 3 bytes @ 0x36
   273  000096                     	ds	3
   274  000099                     lcd_printf@space_cnt:
   275                           	opt stack 0
   276                           
   277                           ; 1 bytes @ 0x39
   278  000099                     	ds	1
   279  00009A                     lcd_printf@cval:
   280                           	opt stack 0
   281                           
   282                           ; 1 bytes @ 0x3A
   283  00009A                     	ds	1
   284  00009B                     lcd_printf@n:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x3B
   288  00009B                     	ds	2
   289  00009D                     lcd_printf@ap:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x3D
   293  00009D                     	ds	2
   294  00009F                     lcd_printf@flags:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x3F
   298  00009F                     	ds	1
   299  0000A0                     lcd_printf@precision:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x40
   303  0000A0                     	ds	1
   304  0000A1                     lcd_printf@width:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0x41
   308  0000A1                     	ds	1
   309  0000A2                     lcd_printf@c:
   310                           	opt stack 0
   311                           
   312                           ; 1 bytes @ 0x42
   313  0000A2                     	ds	1
   314  0000A3                     main@n1:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0x43
   318  0000A3                     	ds	2
   319  0000A5                     main@n4:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0x45
   323  0000A5                     	ds	2
   324  0000A7                     main@debutDeCourse:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x47
   328  0000A7                     	ds	2
   329  0000A9                     main@finDeCourse:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x49
   333  0000A9                     	ds	2
   334  0000AB                     main@etat:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x4B
   338  0000AB                     	ds	2
   339  0000AD                     main@moteurG:
   340                           	opt stack 0
   341                           
   342                           ; 3 bytes @ 0x4D
   343  0000AD                     	ds	3
   344  0000B0                     main@moteurD:
   345                           	opt stack 0
   346                           
   347                           ; 3 bytes @ 0x50
   348  0000B0                     	ds	3
   349  0000B3                     main@vitesseMax:
   350                           	opt stack 0
   351                           
   352                           ; 3 bytes @ 0x53
   353  0000B3                     	ds	3
   354  0000B6                     main@n2:
   355                           	opt stack 0
   356                           
   357                           ; 2 bytes @ 0x56
   358  0000B6                     	ds	2
   359  0000B8                     main@n3:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x58
   363  0000B8                     	ds	2
   364  0000BA                     _main$1636:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0x5A
   368  0000BA                     	ds	2
   369                           tblptru	equ	0xFF8
   370                           
   371                           	psect	cstackCOMRAM
   372  000001                     __pcstackCOMRAM:
   373                           	opt stack 0
   374  000001                     ?_adc_read:
   375                           	opt stack 0
   376  000001                     ?___ftpack:
   377                           	opt stack 0
   378  000001                     ?___fttol:
   379                           	opt stack 0
   380  000001                     ?___lldiv:
   381                           	opt stack 0
   382  000001                     ?___llmod:
   383                           	opt stack 0
   384  000001                     adc_init@numero_dernier_canal:
   385                           	opt stack 0
   386  000001                     lcd_write_cmd_data@c:
   387                           	opt stack 0
   388  000001                     pwm_init@nb_canaux:
   389                           	opt stack 0
   390  000001                     ___ftpack@arg:
   391                           	opt stack 0
   392  000001                     ___ftge@ff1:
   393                           	opt stack 0
   394  000001                     ___fttol@f1:
   395                           	opt stack 0
   396  000001                     ___lldiv@dividend:
   397                           	opt stack 0
   398  000001                     ___llmod@dividend:
   399                           	opt stack 0
   400                           
   401                           ; 4 bytes @ 0x0
   402  000001                     	ds	1
   403  000002                     lcd_write_data_busy@c:
   404                           	opt stack 0
   405  000002                     lcd_write_cmd_busy@c:
   406                           	opt stack 0
   407  000002                     pwm_init@period:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x1
   411  000002                     	ds	1
   412  000003                     ??_lcd_init:
   413  000003                     ??_adc_read:
   414  000003                     lcd_position@colonne:
   415                           	opt stack 0
   416  000003                     lcd_repete_n@c:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0x2
   420  000003                     	ds	1
   421  000004                     lcd_position@ligne:
   422                           	opt stack 0
   423  000004                     lcd_repete_n@n:
   424                           	opt stack 0
   425  000004                     ___ftpack@exp:
   426                           	opt stack 0
   427  000004                     ___ftge@ff2:
   428                           	opt stack 0
   429                           
   430                           ; 3 bytes @ 0x3
   431  000004                     	ds	1
   432  000005                     ??___fttol:
   433  000005                     adc_read@numero_canal:
   434                           	opt stack 0
   435  000005                     lcd_position@address:
   436                           	opt stack 0
   437  000005                     ___ftpack@sign:
   438                           	opt stack 0
   439  000005                     ___lldiv@divisor:
   440                           	opt stack 0
   441  000005                     ___llmod@divisor:
   442                           	opt stack 0
   443                           
   444                           ; 4 bytes @ 0x4
   445  000005                     	ds	1
   446  000006                     ??___ftpack:
   447  000006                     lcd_putc@lettre:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x5
   451  000006                     	ds	1
   452  000007                     ??___ftge:
   453                           
   454                           ; 1 bytes @ 0x6
   455  000007                     	ds	2
   456  000009                     ?___awtoft:
   457                           	opt stack 0
   458  000009                     ?___lwtoft:
   459                           	opt stack 0
   460  000009                     ___llmod@counter:
   461                           	opt stack 0
   462  000009                     ___awtoft@c:
   463                           	opt stack 0
   464  000009                     ___lwtoft@c:
   465                           	opt stack 0
   466  000009                     ___lldiv@quotient:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0x8
   470  000009                     	ds	1
   471  00000A                     ___fttol@sign1:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x9
   475  00000A                     	ds	1
   476  00000B                     ___fttol@lval:
   477                           	opt stack 0
   478                           
   479                           ; 4 bytes @ 0xA
   480  00000B                     	ds	1
   481  00000C                     ___awtoft@sign:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0xB
   485  00000C                     	ds	1
   486  00000D                     ?___ftneg:
   487                           	opt stack 0
   488  00000D                     ___lldiv@counter:
   489                           	opt stack 0
   490  00000D                     ___ftneg@f1:
   491                           	opt stack 0
   492                           
   493                           ; 3 bytes @ 0xC
   494  00000D                     	ds	2
   495  00000F                     ___fttol@exp1:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0xE
   499  00000F                     	ds	1
   500  000010                     ?___ftadd:
   501                           	opt stack 0
   502  000010                     pwm_setdc1@cycles_etat_haut:
   503                           	opt stack 0
   504  000010                     pwm_setdc2@cycles_etat_haut:
   505                           	opt stack 0
   506  000010                     ___ftadd@f1:
   507                           	opt stack 0
   508                           
   509                           ; 3 bytes @ 0xF
   510  000010                     	ds	2
   511  000012                     ??_pwm_setdc1:
   512  000012                     ??_pwm_setdc2:
   513                           
   514                           ; 1 bytes @ 0x11
   515  000012                     	ds	1
   516  000013                     ___ftadd@f2:
   517                           	opt stack 0
   518                           
   519                           ; 3 bytes @ 0x12
   520  000013                     	ds	3
   521  000016                     ??___ftadd:
   522                           
   523                           ; 1 bytes @ 0x15
   524  000016                     	ds	3
   525  000019                     ___ftadd@sign:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0x18
   529  000019                     	ds	1
   530  00001A                     ___ftadd@exp2:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x19
   534  00001A                     	ds	1
   535  00001B                     ___ftadd@exp1:
   536                           	opt stack 0
   537                           
   538                           ; 1 bytes @ 0x1A
   539  00001B                     	ds	1
   540  00001C                     ?___ftdiv:
   541                           	opt stack 0
   542  00001C                     ___ftdiv@f1:
   543                           	opt stack 0
   544                           
   545                           ; 3 bytes @ 0x1B
   546  00001C                     	ds	3
   547  00001F                     ___ftdiv@f2:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0x1E
   551  00001F                     	ds	3
   552  000022                     ??___ftdiv:
   553                           
   554                           ; 1 bytes @ 0x21
   555  000022                     	ds	3
   556  000025                     ___ftdiv@cntr:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x24
   560  000025                     	ds	1
   561  000026                     ___ftdiv@f3:
   562                           	opt stack 0
   563                           
   564                           ; 3 bytes @ 0x25
   565  000026                     	ds	3
   566  000029                     ___ftdiv@exp:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x28
   570  000029                     	ds	1
   571  00002A                     ___ftdiv@sign:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x29
   575  00002A                     	ds	1
   576  00002B                     ?___ftmul:
   577                           	opt stack 0
   578  00002B                     ___ftmul@f1:
   579                           	opt stack 0
   580                           
   581                           ; 3 bytes @ 0x2A
   582  00002B                     	ds	3
   583  00002E                     ___ftmul@f2:
   584                           	opt stack 0
   585                           
   586                           ; 3 bytes @ 0x2D
   587  00002E                     	ds	3
   588  000031                     ??___ftmul:
   589                           
   590                           ; 1 bytes @ 0x30
   591  000031                     	ds	3
   592  000034                     ___ftmul@exp:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x33
   596  000034                     	ds	1
   597  000035                     ___ftmul@f3_as_product:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x34
   601  000035                     	ds	3
   602  000038                     ___ftmul@cntr:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x37
   606  000038                     	ds	1
   607  000039                     ___ftmul@sign:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x38
   611  000039                     	ds	1
   612  00003A                     ?_lcd_printf:
   613                           	opt stack 0
   614  00003A                     lcd_printf@f:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x39
   618  00003A                     	ds	10
   619  000044                     ??_lcd_printf:
   620                           
   621                           ; 1 bytes @ 0x43
   622  000044                     	ds	7
   623  00004B                     ??_main:
   624                           
   625                           ; 1 bytes @ 0x4A
   626  00004B                     	ds	2
   627                           tblptru	equ	0xFF8
   628                           
   629 ;;
   630 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   631 ;;
   632 ;; *************** function _main *****************
   633 ;; Defined at:
   634 ;;		line 14 in file "main.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;		None
   637 ;; Auto vars:     Size  Location     Type
   638 ;;  vitesseMax      3   83[BANK0 ] PTR void [1]
   639 ;;  moteurD         3   80[BANK0 ] PTR void [1]
   640 ;;  moteurG         3   77[BANK0 ] PTR void [1]
   641 ;;  n3              2   88[BANK0 ] int 
   642 ;;  n2              2   86[BANK0 ] int 
   643 ;;  etat            2   75[BANK0 ] int 
   644 ;;  finDeCourse     2   73[BANK0 ] int 
   645 ;;  debutDeCours    2   71[BANK0 ] int 
   646 ;;  n4              2   69[BANK0 ] int 
   647 ;;  n1              2   67[BANK0 ] int 
   648 ;; Return value:  Size  Location     Type
   649 ;;                  1    wreg      void 
   650 ;; Registers used:
   651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   652 ;; Tracked objects:
   653 ;;		On entry : 0/0
   654 ;;		On exit  : 0/0
   655 ;;		Unchanged: 0/0
   656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   657 ;;      Params:         0       0       0       0       0       0       0       0       0
   658 ;;      Locals:         0      25       0       0       0       0       0       0       0
   659 ;;      Temps:          2       0       0       0       0       0       0       0       0
   660 ;;      Totals:         2      25       0       0       0       0       0       0       0
   661 ;;Total ram usage:       27 bytes
   662 ;; Hardware stack levels required when called:    6
   663 ;; This function calls:
   664 ;;		_CloseTimer0
   665 ;;		___awtoft
   666 ;;		___ftadd
   667 ;;		___ftdiv
   668 ;;		___ftmul
   669 ;;		___ftneg
   670 ;;		___fttol
   671 ;;		_adc_init
   672 ;;		_adc_read
   673 ;;		_lcd_init
   674 ;;		_lcd_position
   675 ;;		_lcd_printf
   676 ;;		_pwm_init
   677 ;;		_pwm_setdc1
   678 ;;		_pwm_setdc2
   679 ;; This function is called by:
   680 ;;		Startup code after reset
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           	psect	text0
   685  0015A2                     __ptext0:
   686                           	opt stack 0
   687  0015A2                     _main:
   688                           	opt stack 25
   689                           
   690                           ;main.c: 16: int n1,n2,n3,n4;
   691                           ;main.c: 17: adc_init(5);
   692                           
   693                           ;incstack = 0
   694  0015A2  0E05               	movlw	5
   695  0015A4  EC40  F00F         	call	_adc_init
   696                           
   697                           ;main.c: 18: lcd_init();
   698  0015A8  EC93  F00F         	call	_lcd_init	;wreg free
   699                           
   700                           ;main.c: 19: int finDeCourse=1, debutDeCourse;
   701  0015AC  0E00               	movlw	0
   702  0015AE  0100               	movlb	0	; () banked
   703  0015B0  6FAA               	movwf	(main@finDeCourse+1)& (0+255),b
   704  0015B2  0E01               	movlw	1
   705  0015B4  6FA9               	movwf	main@finDeCourse& (0+255),b
   706                           
   707                           ; BSR set to: 0
   708                           ;main.c: 20: double moteurG, moteurD;
   709                           ;main.c: 21: double vitesseMax;
   710                           ;main.c: 22: int etat=1;
   711  0015B6  0E00               	movlw	0
   712  0015B8  0100               	movlb	0	; () banked
   713  0015BA  6FAC               	movwf	(main@etat+1)& (0+255),b
   714  0015BC  0E01               	movlw	1
   715  0015BE  6FAB               	movwf	main@etat& (0+255),b
   716                           
   717                           ; BSR set to: 0
   718                           ;main.c: 24: TRISEbits.TRISE1 = 1;
   719  0015C0  8296               	bsf	3990,1,c	;volatile
   720                           
   721                           ; BSR set to: 0
   722                           ;main.c: 25: TRISEbits.TRISE2 = 1;
   723  0015C2  8496               	bsf	3990,2,c	;volatile
   724  0015C4                     l27:
   725                           
   726                           ;main.c: 29: {
   727                           ;main.c: 30: n1=adc_read(1);
   728  0015C4  0E01               	movlw	1
   729  0015C6  EC56  F011         	call	_adc_read
   730  0015CA  C001  F0A3         	movff	?_adc_read,main@n1
   731  0015CE  C002  F0A4         	movff	?_adc_read+1,main@n1+1
   732                           
   733                           ;main.c: 31: n2=adc_read(3);
   734  0015D2  0E03               	movlw	3
   735  0015D4  EC56  F011         	call	_adc_read
   736  0015D8  C001  F0B6         	movff	?_adc_read,main@n2
   737  0015DC  C002  F0B7         	movff	?_adc_read+1,main@n2+1
   738                           
   739                           ;main.c: 32: n3=adc_read(4);
   740  0015E0  0E04               	movlw	4
   741  0015E2  EC56  F011         	call	_adc_read
   742  0015E6  C001  F0B8         	movff	?_adc_read,main@n3
   743  0015EA  C002  F0B9         	movff	?_adc_read+1,main@n3+1
   744                           
   745                           ;main.c: 33: n4=adc_read(5);
   746  0015EE  0E05               	movlw	5
   747  0015F0  EC56  F011         	call	_adc_read
   748  0015F4  C001  F0A5         	movff	?_adc_read,main@n4
   749  0015F8  C002  F0A6         	movff	?_adc_read+1,main@n4+1
   750                           
   751                           ;main.c: 35: debutDeCourse = PORTEbits.RE1;
   752  0015FC  A284               	btfss	3972,1,c	;volatile
   753  0015FE  D003               	goto	u3760
   754  001600  6A4B               	clrf	??_main& (0+255),c
   755  001602  2A4B               	incf	??_main& (0+255),f,c
   756  001604  D001               	goto	u3768
   757  001606                     u3760:
   758  001606  6A4B               	clrf	??_main& (0+255),c
   759  001608                     u3768:
   760  001608  504B               	movf	??_main,w,c
   761  00160A  0100               	movlb	0	; () banked
   762  00160C  6FA7               	movwf	main@debutDeCourse& (0+255),b
   763  00160E  6BA8               	clrf	(main@debutDeCourse+1)& (0+255),b
   764                           
   765                           ; BSR set to: 0
   766                           ;main.c: 36: finDeCourse = PORTEbits.RE2;
   767  001610  A484               	btfss	3972,2,c	;volatile
   768  001612  D003               	goto	u3770
   769  001614  6A4B               	clrf	??_main& (0+255),c
   770  001616  2A4B               	incf	??_main& (0+255),f,c
   771  001618  D001               	goto	u3778
   772  00161A                     u3770:
   773  00161A  6A4B               	clrf	??_main& (0+255),c
   774  00161C                     u3778:
   775  00161C  504B               	movf	??_main,w,c
   776  00161E  0100               	movlb	0	; () banked
   777  001620  6FA9               	movwf	main@finDeCourse& (0+255),b
   778  001622  6BAA               	clrf	(main@finDeCourse+1)& (0+255),b
   779                           
   780                           ;main.c: 38: vitesseMax = adc_read(0)/1023.0*600.0;
   781  001624  0EC0               	movlw	192
   782  001626  6E1F               	movwf	___ftdiv@f2,c
   783  001628  0E7F               	movlw	127
   784  00162A  6E20               	movwf	___ftdiv@f2+1,c
   785  00162C  0E44               	movlw	68
   786  00162E  6E21               	movwf	___ftdiv@f2+2,c
   787  001630  0E00               	movlw	0
   788  001632  EC56  F011         	call	_adc_read
   789  001636  C001  F009         	movff	?_adc_read,___awtoft@c
   790  00163A  C002  F00A         	movff	?_adc_read+1,___awtoft@c+1
   791  00163E  ECFA  F010         	call	___awtoft	;wreg free
   792  001642  C009  F01C         	movff	?___awtoft,___ftdiv@f1
   793  001646  C00A  F01D         	movff	?___awtoft+1,___ftdiv@f1+1
   794  00164A  C00B  F01E         	movff	?___awtoft+2,___ftdiv@f1+2
   795  00164E  EC76  F00E         	call	___ftdiv	;wreg free
   796  001652  C01C  F02B         	movff	?___ftdiv,___ftmul@f1
   797  001656  C01D  F02C         	movff	?___ftdiv+1,___ftmul@f1+1
   798  00165A  C01E  F02D         	movff	?___ftdiv+2,___ftmul@f1+2
   799  00165E  0E00               	movlw	0
   800  001660  6E2E               	movwf	___ftmul@f2,c
   801  001662  0E16               	movlw	22
   802  001664  6E2F               	movwf	___ftmul@f2+1,c
   803  001666  0E44               	movlw	68
   804  001668  6E30               	movwf	___ftmul@f2+2,c
   805  00166A  ECFC  F00D         	call	___ftmul	;wreg free
   806  00166E  C02B  F0B3         	movff	?___ftmul,main@vitesseMax
   807  001672  C02C  F0B4         	movff	?___ftmul+1,main@vitesseMax+1
   808  001676  C02D  F0B5         	movff	?___ftmul+2,main@vitesseMax+2
   809                           
   810                           ;main.c: 40: switch (etat)
   811  00167A  D0D0               	goto	l3528
   812  00167C                     l3500:
   813                           
   814                           ;main.c: 43: if (debutDeCourse == 1)
   815  00167C  0100               	movlb	0	; () banked
   816  00167E  05A7               	decf	main@debutDeCourse& (0+255),w,b
   817  001680  0100               	movlb	0	; () banked
   818  001682  11A8               	iorwf	(main@debutDeCourse+1)& (0+255),w,b
   819  001684  A4D8               	btfss	status,2,c
   820  001686  D0DF               	goto	l3530
   821                           
   822                           ; BSR set to: 0
   823                           ;main.c: 44: {
   824                           ;main.c: 45: pwm_init (150,2);
   825  001688  0E02               	movlw	2
   826  00168A  6E01               	movwf	pwm_init@nb_canaux,c
   827  00168C  0E96               	movlw	150
   828  00168E  ECDE  F010         	call	_pwm_init
   829  001692  D0BE               	goto	l3524
   830  001694                     l3506:
   831                           
   832                           ;main.c: 50: moteurG = vitesseMax * (1023-(double)n3)/1024;
   833  001694  C0B3  F02E         	movff	main@vitesseMax,___ftmul@f2
   834  001698  C0B4  F02F         	movff	main@vitesseMax+1,___ftmul@f2+1
   835  00169C  C0B5  F030         	movff	main@vitesseMax+2,___ftmul@f2+2
   836  0016A0  0EC0               	movlw	192
   837  0016A2  6E13               	movwf	___ftadd@f2,c
   838  0016A4  0E7F               	movlw	127
   839  0016A6  6E14               	movwf	___ftadd@f2+1,c
   840  0016A8  0E44               	movlw	68
   841  0016AA  6E15               	movwf	___ftadd@f2+2,c
   842  0016AC  C0B8  F009         	movff	main@n3,___awtoft@c
   843  0016B0  C0B9  F00A         	movff	main@n3+1,___awtoft@c+1
   844  0016B4  ECFA  F010         	call	___awtoft	;wreg free
   845  0016B8  C009  F00D         	movff	?___awtoft,___ftneg@f1
   846  0016BC  C00A  F00E         	movff	?___awtoft+1,___ftneg@f1+1
   847  0016C0  C00B  F00F         	movff	?___awtoft+2,___ftneg@f1+2
   848  0016C4  EC7D  F011         	call	___ftneg	;wreg free
   849  0016C8  C00D  F010         	movff	?___ftneg,___ftadd@f1
   850  0016CC  C00E  F011         	movff	?___ftneg+1,___ftadd@f1+1
   851  0016D0  C00F  F012         	movff	?___ftneg+2,___ftadd@f1+2
   852  0016D4  ECAC  F00C         	call	___ftadd	;wreg free
   853  0016D8  C010  F02B         	movff	?___ftadd,___ftmul@f1
   854  0016DC  C011  F02C         	movff	?___ftadd+1,___ftmul@f1+1
   855  0016E0  C012  F02D         	movff	?___ftadd+2,___ftmul@f1+2
   856  0016E4  ECFC  F00D         	call	___ftmul	;wreg free
   857  0016E8  C02B  F01C         	movff	?___ftmul,___ftdiv@f1
   858  0016EC  C02C  F01D         	movff	?___ftmul+1,___ftdiv@f1+1
   859  0016F0  C02D  F01E         	movff	?___ftmul+2,___ftdiv@f1+2
   860  0016F4  0E00               	movlw	0
   861  0016F6  6E1F               	movwf	___ftdiv@f2,c
   862  0016F8  0E80               	movlw	128
   863  0016FA  6E20               	movwf	___ftdiv@f2+1,c
   864  0016FC  0E44               	movlw	68
   865  0016FE  6E21               	movwf	___ftdiv@f2+2,c
   866  001700  EC76  F00E         	call	___ftdiv	;wreg free
   867  001704  C01C  F0AD         	movff	?___ftdiv,main@moteurG
   868  001708  C01D  F0AE         	movff	?___ftdiv+1,main@moteurG+1
   869  00170C  C01E  F0AF         	movff	?___ftdiv+2,main@moteurG+2
   870                           
   871                           ;main.c: 51: moteurD = vitesseMax * (1023-(double)n2)/1024;
   872  001710  C0B3  F02E         	movff	main@vitesseMax,___ftmul@f2
   873  001714  C0B4  F02F         	movff	main@vitesseMax+1,___ftmul@f2+1
   874  001718  C0B5  F030         	movff	main@vitesseMax+2,___ftmul@f2+2
   875  00171C  0EC0               	movlw	192
   876  00171E  6E13               	movwf	___ftadd@f2,c
   877  001720  0E7F               	movlw	127
   878  001722  6E14               	movwf	___ftadd@f2+1,c
   879  001724  0E44               	movlw	68
   880  001726  6E15               	movwf	___ftadd@f2+2,c
   881  001728  C0B6  F009         	movff	main@n2,___awtoft@c
   882  00172C  C0B7  F00A         	movff	main@n2+1,___awtoft@c+1
   883  001730  ECFA  F010         	call	___awtoft	;wreg free
   884  001734  C009  F00D         	movff	?___awtoft,___ftneg@f1
   885  001738  C00A  F00E         	movff	?___awtoft+1,___ftneg@f1+1
   886  00173C  C00B  F00F         	movff	?___awtoft+2,___ftneg@f1+2
   887  001740  EC7D  F011         	call	___ftneg	;wreg free
   888  001744  C00D  F010         	movff	?___ftneg,___ftadd@f1
   889  001748  C00E  F011         	movff	?___ftneg+1,___ftadd@f1+1
   890  00174C  C00F  F012         	movff	?___ftneg+2,___ftadd@f1+2
   891  001750  ECAC  F00C         	call	___ftadd	;wreg free
   892  001754  C010  F02B         	movff	?___ftadd,___ftmul@f1
   893  001758  C011  F02C         	movff	?___ftadd+1,___ftmul@f1+1
   894  00175C  C012  F02D         	movff	?___ftadd+2,___ftmul@f1+2
   895  001760  ECFC  F00D         	call	___ftmul	;wreg free
   896  001764  C02B  F01C         	movff	?___ftmul,___ftdiv@f1
   897  001768  C02C  F01D         	movff	?___ftmul+1,___ftdiv@f1+1
   898  00176C  C02D  F01E         	movff	?___ftmul+2,___ftdiv@f1+2
   899  001770  0E00               	movlw	0
   900  001772  6E1F               	movwf	___ftdiv@f2,c
   901  001774  0E80               	movlw	128
   902  001776  6E20               	movwf	___ftdiv@f2+1,c
   903  001778  0E44               	movlw	68
   904  00177A  6E21               	movwf	___ftdiv@f2+2,c
   905  00177C  EC76  F00E         	call	___ftdiv	;wreg free
   906  001780  C01C  F0B0         	movff	?___ftdiv,main@moteurD
   907  001784  C01D  F0B1         	movff	?___ftdiv+1,main@moteurD+1
   908  001788  C01E  F0B2         	movff	?___ftdiv+2,main@moteurD+2
   909                           
   910                           ;main.c: 52: if (finDeCourse == 0) etat = 3;
   911  00178C  0100               	movlb	0	; () banked
   912  00178E  51A9               	movf	main@finDeCourse& (0+255),w,b
   913  001790  0100               	movlb	0	; () banked
   914  001792  11AA               	iorwf	(main@finDeCourse+1)& (0+255),w,b
   915  001794  A4D8               	btfss	status,2,c
   916  001796  D057               	goto	l3530
   917                           
   918                           ; BSR set to: 0
   919  001798  0E00               	movlw	0
   920  00179A  0100               	movlb	0	; () banked
   921  00179C  6FAC               	movwf	(main@etat+1)& (0+255),b
   922  00179E  0E03               	movlw	3
   923  0017A0  D03B               	goto	L2
   924  0017A2                     l3512:
   925                           
   926                           ;main.c: 55: moteurG = 0;
   927  0017A2  0E00               	movlw	0
   928  0017A4  0100               	movlb	0	; () banked
   929  0017A6  6FAD               	movwf	main@moteurG& (0+255),b
   930  0017A8  0E00               	movlw	0
   931  0017AA  0100               	movlb	0	; () banked
   932  0017AC  6FAE               	movwf	(main@moteurG+1)& (0+255),b
   933  0017AE  0E00               	movlw	0
   934  0017B0  0100               	movlb	0	; () banked
   935  0017B2  6FAF               	movwf	(main@moteurG+2)& (0+255),b
   936                           
   937                           ;main.c: 56: moteurD = 0;
   938  0017B4  0E00               	movlw	0
   939  0017B6  0100               	movlb	0	; () banked
   940  0017B8  6FB0               	movwf	main@moteurD& (0+255),b
   941  0017BA  0E00               	movlw	0
   942  0017BC  0100               	movlb	0	; () banked
   943  0017BE  6FB1               	movwf	(main@moteurD+1)& (0+255),b
   944  0017C0  0E00               	movlw	0
   945  0017C2  0100               	movlb	0	; () banked
   946  0017C4  6FB2               	movwf	(main@moteurD+2)& (0+255),b
   947                           
   948                           ;main.c: 57: break;
   949  0017C6  D03F               	goto	l3530
   950  0017C8                     l3514:
   951                           
   952                           ;main.c: 59: CloseTimer0();
   953  0017C8  ECD0  F011         	call	_CloseTimer0	;wreg free
   954                           
   955                           ;main.c: 60: pwm_setdc1(0);
   956  0017CC  0E00               	movlw	0
   957  0017CE  6E11               	movwf	pwm_setdc1@cycles_etat_haut+1,c
   958  0017D0  0E00               	movlw	0
   959  0017D2  6E10               	movwf	pwm_setdc1@cycles_etat_haut,c
   960  0017D4  EC41  F011         	call	_pwm_setdc1	;wreg free
   961                           
   962                           ;main.c: 61: pwm_setdc2(180);
   963  0017D8  0E00               	movlw	0
   964  0017DA  6E11               	movwf	pwm_setdc2@cycles_etat_haut+1,c
   965  0017DC  0EB4               	movlw	180
   966  0017DE  6E10               	movwf	pwm_setdc2@cycles_etat_haut,c
   967  0017E0  EC2C  F011         	call	_pwm_setdc2	;wreg free
   968                           
   969                           ;main.c: 62: if ((n2>400) && (n3>400)) etat = 2;
   970  0017E4  0100               	movlb	0	; () banked
   971  0017E6  BFB7               	btfsc	(main@n2+1)& (0+255),7,b
   972  0017E8  D02E               	goto	l3530
   973  0017EA  0E91               	movlw	145
   974  0017EC  0100               	movlb	0	; () banked
   975  0017EE  5DB6               	subwf	main@n2& (0+255),w,b
   976  0017F0  0E01               	movlw	1
   977  0017F2  0100               	movlb	0	; () banked
   978  0017F4  59B7               	subwfb	(main@n2+1)& (0+255),w,b
   979  0017F6  A0D8               	btfss	status,0,c
   980  0017F8  D026               	goto	l3530
   981                           
   982                           ; BSR set to: 0
   983  0017FA  0100               	movlb	0	; () banked
   984  0017FC  BFB9               	btfsc	(main@n3+1)& (0+255),7,b
   985  0017FE  D023               	goto	l3530
   986  001800  0E91               	movlw	145
   987  001802  0100               	movlb	0	; () banked
   988  001804  5DB8               	subwf	main@n3& (0+255),w,b
   989  001806  0E01               	movlw	1
   990  001808  0100               	movlb	0	; () banked
   991  00180A  59B9               	subwfb	(main@n3+1)& (0+255),w,b
   992  00180C  A0D8               	btfss	status,0,c
   993  00180E  D01B               	goto	l3530
   994  001810                     l3524:
   995                           
   996                           ; BSR set to: 0
   997  001810  0E00               	movlw	0
   998  001812  0100               	movlb	0	; () banked
   999  001814  6FAC               	movwf	(main@etat+1)& (0+255),b
  1000  001816  0E02               	movlw	2
  1001  001818                     L2:
  1002  001818  6FAB               	movwf	main@etat& (0+255),b
  1003                           
  1004                           ; BSR set to: 0
  1005                           ;main.c: 65: }
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;main.c: 63: break;
  1009  00181A  D015               	goto	l3530
  1010  00181C                     l3528:
  1011  00181C  C0AB  F04B         	movff	main@etat,??_main
  1012  001820  C0AC  F04C         	movff	main@etat+1,??_main+1
  1013                           
  1014                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1015                           ; Switch size 1, requested type "space"
  1016                           ; Number of cases is 1, Range of values is 0 to 0
  1017                           ; switch strategies available:
  1018                           ; Name         Instructions Cycles
  1019                           ; simple_byte            4     3 (average)
  1020                           ;	Chosen strategy is simple_byte
  1021  001824  504C               	movf	??_main+1,w,c
  1022  001826  0A00               	xorlw	0	; case 0
  1023  001828  A4D8               	btfss	status,2,c
  1024  00182A  D00D               	goto	l3530
  1025                           
  1026                           ; Switch size 1, requested type "space"
  1027                           ; Number of cases is 4, Range of values is 1 to 4
  1028                           ; switch strategies available:
  1029                           ; Name         Instructions Cycles
  1030                           ; simple_byte           13     7 (average)
  1031                           ;	Chosen strategy is simple_byte
  1032  00182C  504B               	movf	??_main,w,c
  1033  00182E  0A01               	xorlw	1	; case 1
  1034  001830  B4D8               	btfsc	status,2,c
  1035  001832  D724               	goto	l3500
  1036  001834  0A03               	xorlw	3	; case 2
  1037  001836  B4D8               	btfsc	status,2,c
  1038  001838  D72D               	goto	l3506
  1039  00183A  0A01               	xorlw	1	; case 3
  1040  00183C  B4D8               	btfsc	status,2,c
  1041  00183E  D7B1               	goto	l3512
  1042  001840  0A07               	xorlw	7	; case 4
  1043  001842  B4D8               	btfsc	status,2,c
  1044  001844  D7C1               	goto	l3514
  1045  001846                     l3530:
  1046                           
  1047                           ;main.c: 67: pwm_setdc1((int)moteurG);
  1048  001846  C0AD  F001         	movff	main@moteurG,___fttol@f1
  1049  00184A  C0AE  F002         	movff	main@moteurG+1,___fttol@f1+1
  1050  00184E  C0AF  F003         	movff	main@moteurG+2,___fttol@f1+2
  1051  001852  EC82  F00D         	call	___fttol	;wreg free
  1052  001856  C001  F010         	movff	?___fttol,pwm_setdc1@cycles_etat_haut
  1053  00185A  C002  F011         	movff	?___fttol+1,pwm_setdc1@cycles_etat_haut+1
  1054  00185E  EC41  F011         	call	_pwm_setdc1	;wreg free
  1055                           
  1056                           ;main.c: 68: pwm_setdc2((int)moteurD);
  1057  001862  C0B0  F001         	movff	main@moteurD,___fttol@f1
  1058  001866  C0B1  F002         	movff	main@moteurD+1,___fttol@f1+1
  1059  00186A  C0B2  F003         	movff	main@moteurD+2,___fttol@f1+2
  1060  00186E  EC82  F00D         	call	___fttol	;wreg free
  1061  001872  C001  F010         	movff	?___fttol,pwm_setdc2@cycles_etat_haut
  1062  001876  C002  F011         	movff	?___fttol+1,pwm_setdc2@cycles_etat_haut+1
  1063  00187A  EC2C  F011         	call	_pwm_setdc2	;wreg free
  1064                           
  1065                           ;main.c: 71: lcd_position(0,0);
  1066  00187E  0E00               	movlw	0
  1067  001880  6E03               	movwf	lcd_position@colonne,c
  1068  001882  0E00               	movlw	0
  1069  001884  EC8F  F011         	call	_lcd_position
  1070                           
  1071                           ;main.c: 72: lcd_printf("%3d %3d %3d %3d",n1,n2,n3,n4);
  1072  001888  0E12               	movlw	low STR_1
  1073  00188A  6E3A               	movwf	lcd_printf@f,c
  1074  00188C  0E08               	movlw	high STR_1
  1075  00188E  6E3B               	movwf	lcd_printf@f+1,c
  1076  001890  C0A3  F03C         	movff	main@n1,?_lcd_printf+2
  1077  001894  C0A4  F03D         	movff	main@n1+1,?_lcd_printf+3
  1078  001898  C0B6  F03E         	movff	main@n2,?_lcd_printf+4
  1079  00189C  C0B7  F03F         	movff	main@n2+1,?_lcd_printf+5
  1080  0018A0  C0B8  F040         	movff	main@n3,?_lcd_printf+6
  1081  0018A4  C0B9  F041         	movff	main@n3+1,?_lcd_printf+7
  1082  0018A8  C0A5  F042         	movff	main@n4,?_lcd_printf+8
  1083  0018AC  C0A6  F043         	movff	main@n4+1,?_lcd_printf+9
  1084  0018B0  EC17  F004         	call	_lcd_printf	;wreg free
  1085                           
  1086                           ;main.c: 73: lcd_position(1,0);
  1087  0018B4  0E00               	movlw	0
  1088  0018B6  6E03               	movwf	lcd_position@colonne,c
  1089  0018B8  0E01               	movlw	1
  1090  0018BA  EC8F  F011         	call	_lcd_position
  1091                           
  1092                           ;main.c: 74: lcd_printf("%4d",(int) moteurG);
  1093  0018BE  C0AD  F001         	movff	main@moteurG,___fttol@f1
  1094  0018C2  C0AE  F002         	movff	main@moteurG+1,___fttol@f1+1
  1095  0018C6  C0AF  F003         	movff	main@moteurG+2,___fttol@f1+2
  1096  0018CA  EC82  F00D         	call	___fttol	;wreg free
  1097  0018CE  C001  F0BA         	movff	?___fttol,_main$1636
  1098  0018D2  C002  F0BB         	movff	?___fttol+1,_main$1636+1
  1099                           
  1100                           ;main.c: 74: lcd_printf("%4d",(int) moteurG);
  1101  0018D6  0E22               	movlw	low STR_2
  1102  0018D8  6E3A               	movwf	lcd_printf@f,c
  1103  0018DA  0E08               	movlw	high STR_2
  1104  0018DC  6E3B               	movwf	lcd_printf@f+1,c
  1105  0018DE  C0BA  F03C         	movff	_main$1636,?_lcd_printf+2
  1106  0018E2  C0BB  F03D         	movff	_main$1636+1,?_lcd_printf+3
  1107  0018E6  EC17  F004         	call	_lcd_printf	;wreg free
  1108                           
  1109                           ;main.c: 75: lcd_position(1,5);
  1110  0018EA  0E05               	movlw	5
  1111  0018EC  6E03               	movwf	lcd_position@colonne,c
  1112  0018EE  0E01               	movlw	1
  1113  0018F0  EC8F  F011         	call	_lcd_position
  1114                           
  1115                           ;main.c: 76: lcd_printf("%4d",(int) vitesseMax);
  1116  0018F4  C0B3  F001         	movff	main@vitesseMax,___fttol@f1
  1117  0018F8  C0B4  F002         	movff	main@vitesseMax+1,___fttol@f1+1
  1118  0018FC  C0B5  F003         	movff	main@vitesseMax+2,___fttol@f1+2
  1119  001900  EC82  F00D         	call	___fttol	;wreg free
  1120  001904  C001  F0BA         	movff	?___fttol,_main$1636
  1121  001908  C002  F0BB         	movff	?___fttol+1,_main$1636+1
  1122                           
  1123                           ;main.c: 76: lcd_printf("%4d",(int) vitesseMax);
  1124  00190C  0E22               	movlw	low STR_2
  1125  00190E  6E3A               	movwf	lcd_printf@f,c
  1126  001910  0E08               	movlw	high STR_2
  1127  001912  6E3B               	movwf	lcd_printf@f+1,c
  1128  001914  C0BA  F03C         	movff	_main$1636,?_lcd_printf+2
  1129  001918  C0BB  F03D         	movff	_main$1636+1,?_lcd_printf+3
  1130  00191C  EC17  F004         	call	_lcd_printf	;wreg free
  1131                           
  1132                           ;main.c: 77: lcd_position(1,10);
  1133  001920  0E0A               	movlw	10
  1134  001922  6E03               	movwf	lcd_position@colonne,c
  1135  001924  0E01               	movlw	1
  1136  001926  EC8F  F011         	call	_lcd_position
  1137                           
  1138                           ;main.c: 78: lcd_printf("%4d",(int) moteurD);
  1139  00192A  C0B0  F001         	movff	main@moteurD,___fttol@f1
  1140  00192E  C0B1  F002         	movff	main@moteurD+1,___fttol@f1+1
  1141  001932  C0B2  F003         	movff	main@moteurD+2,___fttol@f1+2
  1142  001936  EC82  F00D         	call	___fttol	;wreg free
  1143  00193A  C001  F0BA         	movff	?___fttol,_main$1636
  1144  00193E  C002  F0BB         	movff	?___fttol+1,_main$1636+1
  1145                           
  1146                           ;main.c: 78: lcd_printf("%4d",(int) moteurD);
  1147  001942  0E22               	movlw	low STR_2
  1148  001944  6E3A               	movwf	lcd_printf@f,c
  1149  001946  0E08               	movlw	high STR_2
  1150  001948  6E3B               	movwf	lcd_printf@f+1,c
  1151  00194A  C0BA  F03C         	movff	_main$1636,?_lcd_printf+2
  1152  00194E  C0BB  F03D         	movff	_main$1636+1,?_lcd_printf+3
  1153  001952  EC17  F004         	call	_lcd_printf	;wreg free
  1154  001956  D636               	goto	l27
  1155  001958                     __end_of_main:
  1156                           	opt stack 0
  1157                           tblptru	equ	0xFF8
  1158                           status	equ	0xFD8
  1159                           
  1160 ;; *************** function _pwm_setdc2 *****************
  1161 ;; Defined at:
  1162 ;;		line 102 in file "iut_pwm.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;  cycles_etat_    2   15[COMRAM] unsigned int 
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;		None
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      void 
  1169 ;; Registers used:
  1170 ;;		wreg, status,2, status,0
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1176 ;;      Params:         2       0       0       0       0       0       0       0       0
  1177 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1178 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1179 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1180 ;;Total ram usage:        4 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_main
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189                           	psect	text1
  1190  002258                     __ptext1:
  1191                           	opt stack 0
  1192  002258                     _pwm_setdc2:
  1193                           	opt stack 30
  1194                           
  1195                           ;iut_pwm.c: 103: CCPR2L = cycles_etat_haut >> 2;
  1196                           
  1197                           ;incstack = 0
  1198  002258  C010  F012         	movff	pwm_setdc2@cycles_etat_haut,??_pwm_setdc2
  1199  00225C  C011  F013         	movff	pwm_setdc2@cycles_etat_haut+1,??_pwm_setdc2+1
  1200  002260  90D8               	bcf	status,0,c
  1201  002262  3213               	rrcf	??_pwm_setdc2+1,f,c
  1202  002264  3212               	rrcf	??_pwm_setdc2,f,c
  1203  002266  90D8               	bcf	status,0,c
  1204  002268  3213               	rrcf	??_pwm_setdc2+1,f,c
  1205  00226A  3212               	rrcf	??_pwm_setdc2,f,c
  1206  00226C  5012               	movf	??_pwm_setdc2,w,c
  1207  00226E  6EBB               	movwf	4027,c	;volatile
  1208                           
  1209                           ;iut_pwm.c: 104: CCP2CONbits.DC2B = cycles_etat_haut;
  1210  002270  C010  F012         	movff	pwm_setdc2@cycles_etat_haut,??_pwm_setdc2
  1211  002274  3A12               	swapf	??_pwm_setdc2,f,c
  1212  002276  50BA               	movf	4026,w,c	;volatile
  1213  002278  1812               	xorwf	??_pwm_setdc2,w,c
  1214  00227A  0BCF               	andlw	-49
  1215  00227C  1812               	xorwf	??_pwm_setdc2,w,c
  1216  00227E  6EBA               	movwf	4026,c	;volatile
  1217  002280  0012               	return		;funcret
  1218  002282                     __end_of_pwm_setdc2:
  1219                           	opt stack 0
  1220                           tblptru	equ	0xFF8
  1221                           status	equ	0xFD8
  1222                           
  1223 ;; *************** function _pwm_setdc1 *****************
  1224 ;; Defined at:
  1225 ;;		line 87 in file "iut_pwm.c"
  1226 ;; Parameters:    Size  Location     Type
  1227 ;;  cycles_etat_    2   15[COMRAM] unsigned int 
  1228 ;; Auto vars:     Size  Location     Type
  1229 ;;		None
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  1    wreg      void 
  1232 ;; Registers used:
  1233 ;;		wreg, status,2, status,0
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1239 ;;      Params:         2       0       0       0       0       0       0       0       0
  1240 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1241 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1242 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1243 ;;Total ram usage:        4 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; This function calls:
  1246 ;;		Nothing
  1247 ;; This function is called by:
  1248 ;;		_main
  1249 ;; This function uses a non-reentrant model
  1250 ;;
  1251                           
  1252                           	psect	text2
  1253  002282                     __ptext2:
  1254                           	opt stack 0
  1255  002282                     _pwm_setdc1:
  1256                           	opt stack 30
  1257                           
  1258                           ;iut_pwm.c: 88: CCPR1L = cycles_etat_haut >> 2;
  1259                           
  1260                           ;incstack = 0
  1261  002282  C010  F012         	movff	pwm_setdc1@cycles_etat_haut,??_pwm_setdc1
  1262  002286  C011  F013         	movff	pwm_setdc1@cycles_etat_haut+1,??_pwm_setdc1+1
  1263  00228A  90D8               	bcf	status,0,c
  1264  00228C  3213               	rrcf	??_pwm_setdc1+1,f,c
  1265  00228E  3212               	rrcf	??_pwm_setdc1,f,c
  1266  002290  90D8               	bcf	status,0,c
  1267  002292  3213               	rrcf	??_pwm_setdc1+1,f,c
  1268  002294  3212               	rrcf	??_pwm_setdc1,f,c
  1269  002296  5012               	movf	??_pwm_setdc1,w,c
  1270  002298  6EBE               	movwf	4030,c	;volatile
  1271                           
  1272                           ;iut_pwm.c: 89: CCP1CONbits.DC1B = cycles_etat_haut;
  1273  00229A  C010  F012         	movff	pwm_setdc1@cycles_etat_haut,??_pwm_setdc1
  1274  00229E  3A12               	swapf	??_pwm_setdc1,f,c
  1275  0022A0  50BD               	movf	4029,w,c	;volatile
  1276  0022A2  1812               	xorwf	??_pwm_setdc1,w,c
  1277  0022A4  0BCF               	andlw	-49
  1278  0022A6  1812               	xorwf	??_pwm_setdc1,w,c
  1279  0022A8  6EBD               	movwf	4029,c	;volatile
  1280  0022AA  0012               	return		;funcret
  1281  0022AC                     __end_of_pwm_setdc1:
  1282                           	opt stack 0
  1283                           tblptru	equ	0xFF8
  1284                           status	equ	0xFD8
  1285                           
  1286 ;; *************** function _pwm_init *****************
  1287 ;; Defined at:
  1288 ;;		line 51 in file "iut_pwm.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;  period          1    wreg     unsigned char 
  1291 ;;  nb_canaux       1    0[COMRAM] unsigned char 
  1292 ;; Auto vars:     Size  Location     Type
  1293 ;;  period          1    1[COMRAM] unsigned char 
  1294 ;; Return value:  Size  Location     Type
  1295 ;;                  1    wreg      void 
  1296 ;; Registers used:
  1297 ;;		wreg, status,2, status,0
  1298 ;; Tracked objects:
  1299 ;;		On entry : 0/0
  1300 ;;		On exit  : 0/0
  1301 ;;		Unchanged: 0/0
  1302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1303 ;;      Params:         1       0       0       0       0       0       0       0       0
  1304 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1305 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1306 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1307 ;;Total ram usage:        2 bytes
  1308 ;; Hardware stack levels used:    1
  1309 ;; This function calls:
  1310 ;;		Nothing
  1311 ;; This function is called by:
  1312 ;;		_main
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text3
  1317  0021BC                     __ptext3:
  1318                           	opt stack 0
  1319  0021BC                     _pwm_init:
  1320                           	opt stack 30
  1321                           
  1322                           ;incstack = 0
  1323                           ;pwm_init@period stored from wreg
  1324  0021BC  6E02               	movwf	pwm_init@period,c
  1325                           
  1326                           ;iut_pwm.c: 52: T2CON = 1;
  1327  0021BE  0E01               	movlw	1
  1328  0021C0  6ECA               	movwf	4042,c	;volatile
  1329                           
  1330                           ;iut_pwm.c: 53: if (nb_canaux >= 1) {
  1331  0021C2  5001               	movf	pwm_init@nb_canaux,w,c
  1332  0021C4  B4D8               	btfsc	status,2,c
  1333  0021C6  D004               	goto	l2896
  1334                           
  1335                           ;iut_pwm.c: 54: CCP1CON = 0b00001100;
  1336  0021C8  0E0C               	movlw	12
  1337  0021CA  6EBD               	movwf	4029,c	;volatile
  1338                           
  1339                           ;iut_pwm.c: 55: TRISCbits.TRISC2 = 0;
  1340  0021CC  9494               	bcf	3988,2,c	;volatile
  1341                           
  1342                           ;iut_pwm.c: 56: } else {
  1343  0021CE  D002               	goto	l2898
  1344  0021D0                     l2896:
  1345                           
  1346                           ;iut_pwm.c: 57: CCP1CON = 0;
  1347  0021D0  0E00               	movlw	0
  1348  0021D2  6EBD               	movwf	4029,c	;volatile
  1349  0021D4                     l2898:
  1350                           
  1351                           ;iut_pwm.c: 58: }
  1352                           ;iut_pwm.c: 59: if (nb_canaux >= 2) {
  1353  0021D4  0E01               	movlw	1
  1354  0021D6  6401               	cpfsgt	pwm_init@nb_canaux,c
  1355  0021D8  D004               	goto	l2904
  1356                           
  1357                           ;iut_pwm.c: 60: CCP2CON = 0b00001100;
  1358  0021DA  0E0C               	movlw	12
  1359  0021DC  6EBA               	movwf	4026,c	;volatile
  1360                           
  1361                           ;iut_pwm.c: 61: TRISCbits.TRISC1 = 0;
  1362  0021DE  9294               	bcf	3988,1,c	;volatile
  1363                           
  1364                           ;iut_pwm.c: 62: } else {
  1365  0021E0  D002               	goto	l2906
  1366  0021E2                     l2904:
  1367                           
  1368                           ;iut_pwm.c: 63: CCP2CON = 0;
  1369  0021E2  0E00               	movlw	0
  1370  0021E4  6EBA               	movwf	4026,c	;volatile
  1371  0021E6                     l2906:
  1372                           
  1373                           ;iut_pwm.c: 64: }
  1374                           ;iut_pwm.c: 65: PR2 = period;
  1375  0021E6  C002  FFCB         	movff	pwm_init@period,4043	;volatile
  1376                           
  1377                           ;iut_pwm.c: 66: if (nb_canaux > 0) {
  1378  0021EA  5001               	movf	pwm_init@nb_canaux,w,c
  1379  0021EC  B4D8               	btfsc	status,2,c
  1380  0021EE  0012               	return	
  1381                           
  1382                           ;iut_pwm.c: 67: T2CONbits.TMR2ON = 1;
  1383  0021F0  84CA               	bsf	4042,2,c	;volatile
  1384  0021F2  0012               	return	
  1385  0021F4                     __end_of_pwm_init:
  1386                           	opt stack 0
  1387                           tblptru	equ	0xFF8
  1388                           status	equ	0xFD8
  1389                           
  1390 ;; *************** function _lcd_printf *****************
  1391 ;; Defined at:
  1392 ;;		line 220 in file "iut_lcd.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;  f               2   57[COMRAM] PTR const unsigned char 
  1395 ;;		 -> STR_6(3), STR_5(3), STR_4(4), STR_3(4), 
  1396 ;;		 -> STR_2(4), STR_1(16), 
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;  x               3   54[BANK0 ] float 
  1399 ;;  k               2   41[BANK0 ] unsigned int 
  1400 ;;  w               1   46[BANK0 ] unsigned char 
  1401 ;;  i               1   45[BANK0 ] unsigned char 
  1402 ;;  have_sign       1   43[BANK0 ] unsigned char 
  1403 ;;  sign            1   40[BANK0 ] unsigned char 
  1404 ;;  buf            33    0[BANK0 ] unsigned char [33]
  1405 ;;  q               2   38[BANK0 ] PTR unsigned char 
  1406 ;;		 -> lcd_printf@buf(33), 
  1407 ;;  digit_cnt       1   47[BANK0 ] unsigned char 
  1408 ;;  prefix_cnt      1   44[BANK0 ] unsigned char 
  1409 ;;  sign_char       1   35[BANK0 ] unsigned char 
  1410 ;;  larg            4   48[BANK0 ] unsigned long 
  1411 ;;  n               2   59[BANK0 ] int 
  1412 ;;  romstring       2   36[BANK0 ] PTR far unsigned char 
  1413 ;;  ramstring       2   33[BANK0 ] PTR unsigned char 
  1414 ;;  width           1   65[BANK0 ] unsigned char 
  1415 ;;  precision       1   64[BANK0 ] unsigned char 
  1416 ;;  flags           1   63[BANK0 ] unsigned char 
  1417 ;;  cval            1   58[BANK0 ] unsigned char 
  1418 ;;  space_cnt       1   57[BANK0 ] unsigned char 
  1419 ;;  have_precisi    1   53[BANK0 ] unsigned char 
  1420 ;;  size            1   52[BANK0 ] unsigned char 
  1421 ;;  ap              2   61[BANK0 ] PTR void [1]
  1422 ;;		 -> ?_lcd_printf(1), 
  1423 ;;  c               1   66[BANK0 ] unsigned char 
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  1    wreg      void 
  1426 ;; Registers used:
  1427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1433 ;;      Params:        10       0       0       0       0       0       0       0       0
  1434 ;;      Locals:         0      67       0       0       0       0       0       0       0
  1435 ;;      Temps:          7       0       0       0       0       0       0       0       0
  1436 ;;      Totals:        17      67       0       0       0       0       0       0       0
  1437 ;;Total ram usage:       84 bytes
  1438 ;; Hardware stack levels used:    1
  1439 ;; Hardware stack levels required when called:    5
  1440 ;; This function calls:
  1441 ;;		___ftadd
  1442 ;;		___ftdiv
  1443 ;;		___ftge
  1444 ;;		___ftmul
  1445 ;;		___ftneg
  1446 ;;		___fttol
  1447 ;;		___lldiv
  1448 ;;		___llmod
  1449 ;;		___lwtoft
  1450 ;;		_lcd_putc
  1451 ;;		_lcd_repete_n
  1452 ;;		_lcd_write_data_busy
  1453 ;; This function is called by:
  1454 ;;		_main
  1455 ;;		_lcd_puti
  1456 ;;		_lcd_putrs
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460                           	psect	text4
  1461  00082E                     __ptext4:
  1462                           	opt stack 0
  1463  00082E                     _lcd_printf:
  1464                           	opt stack 25
  1465                           
  1466                           ;iut_lcd.c: 221: va_list ap;
  1467                           ;iut_lcd.c: 222: unsigned char c;
  1468                           ;iut_lcd.c: 225: *ap = __va_start();
  1469                           
  1470                           ;incstack = 0
  1471  00082E  0E3C               	movlw	low (?_lcd_printf+2)
  1472  000830  0100               	movlb	0	; () banked
  1473  000832  6F9D               	movwf	lcd_printf@ap& (0+255),b
  1474  000834  0E00               	movlw	high (?_lcd_printf+2)
  1475  000836  0100               	movlb	0	; () banked
  1476  000838  6F9E               	movwf	(lcd_printf@ap+1)& (0+255),b
  1477  00083A  EFC3  F00A         	goto	L3
  1478  00083E                     l2922:
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;iut_lcd.c: 227: if (c == '%') {
  1482  00083E  0E25               	movlw	37
  1483  000840  0100               	movlb	0	; () banked
  1484  000842  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1485  000844  A4D8               	btfss	status,2,c
  1486  000846  EFBD  F00A         	goto	l3468
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;iut_lcd.c: 228: unsigned char flags = 0;
  1490  00084A  0E00               	movlw	0
  1491  00084C  0100               	movlb	0	; () banked
  1492  00084E  6F9F               	movwf	lcd_printf@flags& (0+255),b
  1493                           
  1494                           ;iut_lcd.c: 229: unsigned char width = 0;
  1495  000850  0E00               	movlw	0
  1496  000852  0100               	movlb	0	; () banked
  1497  000854  6FA1               	movwf	lcd_printf@width& (0+255),b
  1498                           
  1499                           ;iut_lcd.c: 230: unsigned char precision = 0;
  1500  000856  0E00               	movlw	0
  1501  000858  0100               	movlb	0	; () banked
  1502  00085A  6FA0               	movwf	lcd_printf@precision& (0+255),b
  1503                           
  1504                           ;iut_lcd.c: 231: unsigned char have_precision = 0;
  1505  00085C  0E00               	movlw	0
  1506  00085E  0100               	movlb	0	; () banked
  1507  000860  6F95               	movwf	lcd_printf@have_precision& (0+255),b
  1508                           
  1509                           ;iut_lcd.c: 232: unsigned char size = 0;
  1510  000862  0E00               	movlw	0
  1511  000864  0100               	movlb	0	; () banked
  1512  000866  6F94               	movwf	lcd_printf@size& (0+255),b
  1513  000868  D020               	goto	l2942
  1514  00086A                     l2928:
  1515                           
  1516                           ; BSR set to: 0
  1517                           ;iut_lcd.c: 278: flags |= 0x1;
  1518  00086A  0100               	movlb	0	; () banked
  1519  00086C  819F               	bsf	lcd_printf@flags& (0+255),0,b
  1520                           
  1521                           ;iut_lcd.c: 279: break;
  1522  00086E  D01D               	goto	l2942
  1523  000870                     l2930:
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;iut_lcd.c: 281: flags |= 0x2;
  1527  000870  0100               	movlb	0	; () banked
  1528  000872  839F               	bsf	lcd_printf@flags& (0+255),1,b
  1529                           
  1530                           ;iut_lcd.c: 282: break;
  1531  000874  D01A               	goto	l2942
  1532  000876                     l2932:
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;iut_lcd.c: 284: flags |= 0x4;
  1536  000876  0100               	movlb	0	; () banked
  1537  000878  859F               	bsf	lcd_printf@flags& (0+255),2,b
  1538                           
  1539                           ;iut_lcd.c: 285: break;
  1540  00087A  D017               	goto	l2942
  1541  00087C                     l2934:
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;iut_lcd.c: 287: flags |= 0x8;
  1545  00087C  0100               	movlb	0	; () banked
  1546  00087E  879F               	bsf	lcd_printf@flags& (0+255),3,b
  1547                           
  1548                           ;iut_lcd.c: 288: break;
  1549  000880  D014               	goto	l2942
  1550  000882                     l2936:
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;iut_lcd.c: 290: flags |= 0x10;
  1554  000882  0100               	movlb	0	; () banked
  1555  000884  899F               	bsf	lcd_printf@flags& (0+255),4,b
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;iut_lcd.c: 292: }
  1559                           
  1560                           ;iut_lcd.c: 291: break;
  1561  000886  D011               	goto	l2942
  1562  000888                     l2940:
  1563                           
  1564                           ; BSR set to: 0
  1565  000888  0100               	movlb	0	; () banked
  1566  00088A  51A2               	movf	lcd_printf@c& (0+255),w,b
  1567                           
  1568                           ; Switch size 1, requested type "space"
  1569                           ; Number of cases is 5, Range of values is 32 to 48
  1570                           ; switch strategies available:
  1571                           ; Name         Instructions Cycles
  1572                           ; simple_byte           16     9 (average)
  1573                           ;	Chosen strategy is simple_byte
  1574  00088C  0A20               	xorlw	32	; case 32
  1575  00088E  B4D8               	btfsc	status,2,c
  1576  000890  D7F2               	goto	l2932
  1577  000892  0A03               	xorlw	3	; case 35
  1578  000894  B4D8               	btfsc	status,2,c
  1579  000896  D7F2               	goto	l2934
  1580  000898  0A08               	xorlw	8	; case 43
  1581  00089A  B4D8               	btfsc	status,2,c
  1582  00089C  D7E9               	goto	l2930
  1583  00089E  0A06               	xorlw	6	; case 45
  1584  0008A0  B4D8               	btfsc	status,2,c
  1585  0008A2  D7E3               	goto	l2928
  1586  0008A4  0A1D               	xorlw	29	; case 48
  1587  0008A6  B4D8               	btfsc	status,2,c
  1588  0008A8  D7EC               	goto	l2936
  1589  0008AA                     l2942:
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;iut_lcd.c: 293: c = *++f;
  1593  0008AA  4A3A               	infsnz	lcd_printf@f,f,c
  1594  0008AC  2A3B               	incf	lcd_printf@f+1,f,c
  1595  0008AE  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1596  0008B2  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1597  0008B6                     	if	0	;tblptru may be non-zero
  1598  0008B6                     	endif
  1599  0008B6                     	if	0	;tblptru may be non-zero
  1600  0008B6                     	endif
  1601  0008B6  0008               	tblrd		*
  1602  0008B8  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1603                           
  1604                           ; BSR set to: 0
  1605                           
  1606                           ; BSR set to: 0
  1607  0008BC  0E2D               	movlw	45
  1608  0008BE  0100               	movlb	0	; () banked
  1609  0008C0  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1610  0008C2  B4D8               	btfsc	status,2,c
  1611  0008C4  D7E1               	goto	l2940
  1612                           
  1613                           ; BSR set to: 0
  1614  0008C6  0E2B               	movlw	43
  1615  0008C8  0100               	movlb	0	; () banked
  1616  0008CA  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1617  0008CC  B4D8               	btfsc	status,2,c
  1618  0008CE  D7DC               	goto	l2940
  1619                           
  1620                           ; BSR set to: 0
  1621  0008D0  0E20               	movlw	32
  1622  0008D2  0100               	movlb	0	; () banked
  1623  0008D4  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1624  0008D6  B4D8               	btfsc	status,2,c
  1625  0008D8  D7D7               	goto	l2940
  1626                           
  1627                           ; BSR set to: 0
  1628  0008DA  0E23               	movlw	35
  1629  0008DC  0100               	movlb	0	; () banked
  1630  0008DE  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1631  0008E0  B4D8               	btfsc	status,2,c
  1632  0008E2  D7D2               	goto	l2940
  1633                           
  1634                           ; BSR set to: 0
  1635  0008E4  0E30               	movlw	48
  1636  0008E6  0100               	movlb	0	; () banked
  1637  0008E8  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1638  0008EA  B4D8               	btfsc	status,2,c
  1639  0008EC  D7CD               	goto	l2940
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;iut_lcd.c: 294: }
  1643                           ;iut_lcd.c: 296: if (c == '*') {
  1644                           
  1645                           ; BSR set to: 0
  1646  0008EE  0E2A               	movlw	42
  1647  0008F0  0100               	movlb	0	; () banked
  1648  0008F2  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1649  0008F4  A4D8               	btfss	status,2,c
  1650  0008F6  D024               	goto	l2968
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;iut_lcd.c: 297: n = (*(int *)__va_arg((*(int **)ap), (int)0));
  1654  0008F8  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  1655  0008FC  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  1656  000900  CFDE F09B          	movff	postinc2,lcd_printf@n
  1657  000904  CFDD F09C          	movff	postdec2,lcd_printf@n+1
  1658                           
  1659                           ; BSR set to: 0
  1660  000908  0E02               	movlw	2
  1661  00090A  0100               	movlb	0	; () banked
  1662  00090C  279D               	addwf	lcd_printf@ap& (0+255),f,b
  1663  00090E  0E00               	movlw	0
  1664  000910  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;iut_lcd.c: 298: if (n < 0) {
  1668  000912  0100               	movlb	0	; () banked
  1669  000914  AF9C               	btfss	(lcd_printf@n+1)& (0+255),7,b
  1670  000916  D008               	goto	l142
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;iut_lcd.c: 299: flags |= 0x1;
  1674  000918  0100               	movlb	0	; () banked
  1675  00091A  819F               	bsf	lcd_printf@flags& (0+255),0,b
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;iut_lcd.c: 300: width = -n;
  1679  00091C  0100               	movlb	0	; () banked
  1680  00091E  519B               	movf	lcd_printf@n& (0+255),w,b
  1681  000920  0800               	sublw	0
  1682  000922  0100               	movlb	0	; () banked
  1683  000924  6FA1               	movwf	lcd_printf@width& (0+255),b
  1684                           
  1685                           ;iut_lcd.c: 301: } else
  1686  000926  D002               	goto	l2966
  1687  000928                     l142:
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;iut_lcd.c: 302: width = n;
  1691  000928  C09B  F0A1         	movff	lcd_printf@n,lcd_printf@width
  1692  00092C                     l2966:
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;iut_lcd.c: 303: c = *++f;
  1696  00092C  4A3A               	infsnz	lcd_printf@f,f,c
  1697  00092E  2A3B               	incf	lcd_printf@f+1,f,c
  1698  000930  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1699  000934  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1700  000938                     	if	0	;tblptru may be non-zero
  1701  000938                     	endif
  1702  000938                     	if	0	;tblptru may be non-zero
  1703  000938                     	endif
  1704  000938  0008               	tblrd		*
  1705  00093A  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1706                           
  1707                           ;iut_lcd.c: 304: } else {
  1708  00093E  D020               	goto	l144
  1709  000940                     l2968:
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;iut_lcd.c: 305: cval = 0;
  1713  000940  0E00               	movlw	0
  1714  000942  0100               	movlb	0	; () banked
  1715  000944  6F9A               	movwf	lcd_printf@cval& (0+255),b
  1716                           
  1717                           ;iut_lcd.c: 306: while ((c >= '0') && (c <= '9')) {
  1718  000946  D012               	goto	l2974
  1719  000948                     l2970:
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;iut_lcd.c: 307: cval = cval * 10 + c - '0';
  1723  000948  0100               	movlb	0	; () banked
  1724  00094A  519A               	movf	lcd_printf@cval& (0+255),w,b
  1725  00094C  0D0A               	mullw	10
  1726  00094E  50F3               	movf	prodl,w,c
  1727  000950  0100               	movlb	0	; () banked
  1728  000952  25A2               	addwf	lcd_printf@c& (0+255),w,b
  1729  000954  0FD0               	addlw	208
  1730  000956  0100               	movlb	0	; () banked
  1731  000958  6F9A               	movwf	lcd_printf@cval& (0+255),b
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;iut_lcd.c: 308: c = *++f;
  1735  00095A  4A3A               	infsnz	lcd_printf@f,f,c
  1736  00095C  2A3B               	incf	lcd_printf@f+1,f,c
  1737  00095E  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1738  000962  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1739  000966                     	if	0	;tblptru may be non-zero
  1740  000966                     	endif
  1741  000966                     	if	0	;tblptru may be non-zero
  1742  000966                     	endif
  1743  000966  0008               	tblrd		*
  1744  000968  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1745  00096C                     l2974:
  1746                           
  1747                           ; BSR set to: 0
  1748  00096C  0E2F               	movlw	47
  1749  00096E  0100               	movlb	0	; () banked
  1750  000970  65A2               	cpfsgt	lcd_printf@c& (0+255),b
  1751  000972  D004               	goto	l149
  1752                           
  1753                           ; BSR set to: 0
  1754  000974  0E39               	movlw	57
  1755  000976  0100               	movlb	0	; () banked
  1756  000978  65A2               	cpfsgt	lcd_printf@c& (0+255),b
  1757  00097A  D7E6               	goto	l2970
  1758  00097C                     l149:
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;iut_lcd.c: 309: }
  1762                           ;iut_lcd.c: 310: width = cval;
  1763  00097C  C09A  F0A1         	movff	lcd_printf@cval,lcd_printf@width
  1764  000980                     l144:
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;iut_lcd.c: 311: }
  1768                           ;iut_lcd.c: 314: if (flags & 0x1)
  1769  000980  0100               	movlb	0	; () banked
  1770  000982  A19F               	btfss	lcd_printf@flags& (0+255),0,b
  1771  000984  D002               	goto	l2980
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;iut_lcd.c: 315: flags &= ~0x10;
  1775  000986  0100               	movlb	0	; () banked
  1776  000988  999F               	bcf	lcd_printf@flags& (0+255),4,b
  1777  00098A                     l2980:
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;iut_lcd.c: 318: if (c == '.') {
  1781  00098A  0E2E               	movlw	46
  1782  00098C  0100               	movlb	0	; () banked
  1783  00098E  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1784  000990  A4D8               	btfss	status,2,c
  1785  000992  D050               	goto	l3010
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;iut_lcd.c: 319: c = *++f;
  1789  000994  4A3A               	infsnz	lcd_printf@f,f,c
  1790  000996  2A3B               	incf	lcd_printf@f+1,f,c
  1791  000998  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1792  00099C  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1793  0009A0                     	if	0	;tblptru may be non-zero
  1794  0009A0                     	endif
  1795  0009A0                     	if	0	;tblptru may be non-zero
  1796  0009A0                     	endif
  1797  0009A0  0008               	tblrd		*
  1798  0009A2  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;iut_lcd.c: 320: if (c == '*') {
  1802  0009A6  0E2A               	movlw	42
  1803  0009A8  0100               	movlb	0	; () banked
  1804  0009AA  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1805  0009AC  A4D8               	btfss	status,2,c
  1806  0009AE  D01F               	goto	l2998
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;iut_lcd.c: 321: n = (*(int *)__va_arg((*(int **)ap), (int)0));
  1810  0009B0  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  1811  0009B4  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  1812  0009B8  CFDE F09B          	movff	postinc2,lcd_printf@n
  1813  0009BC  CFDD F09C          	movff	postdec2,lcd_printf@n+1
  1814                           
  1815                           ; BSR set to: 0
  1816  0009C0  0E02               	movlw	2
  1817  0009C2  0100               	movlb	0	; () banked
  1818  0009C4  279D               	addwf	lcd_printf@ap& (0+255),f,b
  1819  0009C6  0E00               	movlw	0
  1820  0009C8  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;iut_lcd.c: 322: if (n >= 0) {
  1824  0009CA  0100               	movlb	0	; () banked
  1825  0009CC  BF9C               	btfsc	(lcd_printf@n+1)& (0+255),7,b
  1826  0009CE  D005               	goto	l2996
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;iut_lcd.c: 323: precision = n;
  1830  0009D0  C09B  F0A0         	movff	lcd_printf@n,lcd_printf@precision
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;iut_lcd.c: 324: have_precision = 1;
  1834  0009D4  0E01               	movlw	1
  1835  0009D6  0100               	movlb	0	; () banked
  1836  0009D8  6F95               	movwf	lcd_printf@have_precision& (0+255),b
  1837  0009DA                     l2996:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;iut_lcd.c: 325: }
  1841                           ;iut_lcd.c: 326: c = *++f;
  1842  0009DA  4A3A               	infsnz	lcd_printf@f,f,c
  1843  0009DC  2A3B               	incf	lcd_printf@f+1,f,c
  1844  0009DE  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1845  0009E2  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1846  0009E6                     	if	0	;tblptru may be non-zero
  1847  0009E6                     	endif
  1848  0009E6                     	if	0	;tblptru may be non-zero
  1849  0009E6                     	endif
  1850  0009E6  0008               	tblrd		*
  1851  0009E8  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1852                           
  1853                           ;iut_lcd.c: 327: } else {
  1854  0009EC  D023               	goto	l3010
  1855  0009EE                     l2998:
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;iut_lcd.c: 328: cval = 0;
  1859  0009EE  0E00               	movlw	0
  1860  0009F0  0100               	movlb	0	; () banked
  1861  0009F2  6F9A               	movwf	lcd_printf@cval& (0+255),b
  1862                           
  1863                           ;iut_lcd.c: 329: while ((c >= '0') && (c <= '9')) {
  1864  0009F4  D012               	goto	l3004
  1865  0009F6                     l3000:
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;iut_lcd.c: 330: cval = cval * 10 + c - '0';
  1869  0009F6  0100               	movlb	0	; () banked
  1870  0009F8  519A               	movf	lcd_printf@cval& (0+255),w,b
  1871  0009FA  0D0A               	mullw	10
  1872  0009FC  50F3               	movf	prodl,w,c
  1873  0009FE  0100               	movlb	0	; () banked
  1874  000A00  25A2               	addwf	lcd_printf@c& (0+255),w,b
  1875  000A02  0FD0               	addlw	208
  1876  000A04  0100               	movlb	0	; () banked
  1877  000A06  6F9A               	movwf	lcd_printf@cval& (0+255),b
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;iut_lcd.c: 331: c = *++f;
  1881  000A08  4A3A               	infsnz	lcd_printf@f,f,c
  1882  000A0A  2A3B               	incf	lcd_printf@f+1,f,c
  1883  000A0C  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1884  000A10  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1885  000A14                     	if	0	;tblptru may be non-zero
  1886  000A14                     	endif
  1887  000A14                     	if	0	;tblptru may be non-zero
  1888  000A14                     	endif
  1889  000A14  0008               	tblrd		*
  1890  000A16  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1891  000A1A                     l3004:
  1892                           
  1893                           ; BSR set to: 0
  1894  000A1A  0E2F               	movlw	47
  1895  000A1C  0100               	movlb	0	; () banked
  1896  000A1E  65A2               	cpfsgt	lcd_printf@c& (0+255),b
  1897  000A20  D004               	goto	l159
  1898                           
  1899                           ; BSR set to: 0
  1900  000A22  0E39               	movlw	57
  1901  000A24  0100               	movlb	0	; () banked
  1902  000A26  65A2               	cpfsgt	lcd_printf@c& (0+255),b
  1903  000A28  D7E6               	goto	l3000
  1904  000A2A                     l159:
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;iut_lcd.c: 332: }
  1908                           ;iut_lcd.c: 333: precision = cval;
  1909  000A2A  C09A  F0A0         	movff	lcd_printf@cval,lcd_printf@precision
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;iut_lcd.c: 334: have_precision = 1;
  1913  000A2E  0E01               	movlw	1
  1914  000A30  0100               	movlb	0	; () banked
  1915  000A32  6F95               	movwf	lcd_printf@have_precision& (0+255),b
  1916  000A34                     l3010:
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;iut_lcd.c: 335: }
  1920                           ;iut_lcd.c: 336: }
  1921                           ;iut_lcd.c: 340: if (c == 'h') {
  1922  000A34  0E68               	movlw	104
  1923  000A36  0100               	movlb	0	; () banked
  1924  000A38  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1925  000A3A  A4D8               	btfss	status,2,c
  1926  000A3C  D011               	goto	l3020
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;iut_lcd.c: 341: c = *++f;
  1930  000A3E  4A3A               	infsnz	lcd_printf@f,f,c
  1931  000A40  2A3B               	incf	lcd_printf@f+1,f,c
  1932  000A42  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1933  000A46  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1934  000A4A                     	if	0	;tblptru may be non-zero
  1935  000A4A                     	endif
  1936  000A4A                     	if	0	;tblptru may be non-zero
  1937  000A4A                     	endif
  1938  000A4A  0008               	tblrd		*
  1939  000A4C  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;iut_lcd.c: 344: if (c == 'h') {
  1943  000A50  0E68               	movlw	104
  1944  000A52  0100               	movlb	0	; () banked
  1945  000A54  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1946  000A56  A4D8               	btfss	status,2,c
  1947  000A58  EF81  F00A         	goto	l3466
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;iut_lcd.c: 345: size = 3;
  1951  000A5C  0E03               	movlw	3
  1952  000A5E  D032               	goto	L4
  1953  000A60                     l3020:
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;iut_lcd.c: 350: else if (c == 't' || c == 'z')
  1957  000A60  0E74               	movlw	116
  1958  000A62  0100               	movlb	0	; () banked
  1959  000A64  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1960  000A66  B4D8               	btfsc	status,2,c
  1961  000A68  D016               	goto	l3034
  1962                           
  1963                           ; BSR set to: 0
  1964  000A6A  0E7A               	movlw	122
  1965  000A6C  0100               	movlb	0	; () banked
  1966  000A6E  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1967  000A70  B4D8               	btfsc	status,2,c
  1968  000A72  D011               	goto	l3034
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;iut_lcd.c: 354: else if (c == 'H' || c == 'T' || c == 'Z') {
  1972                           
  1973                           ; BSR set to: 0
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;iut_lcd.c: 351: c = *++f;
  1977                           
  1978                           ; BSR set to: 0
  1979  000A74  0E48               	movlw	72
  1980  000A76  0100               	movlb	0	; () banked
  1981  000A78  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1982  000A7A  B4D8               	btfsc	status,2,c
  1983  000A7C  D00A               	goto	l3032
  1984                           
  1985                           ; BSR set to: 0
  1986  000A7E  0E54               	movlw	84
  1987  000A80  0100               	movlb	0	; () banked
  1988  000A82  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1989  000A84  B4D8               	btfsc	status,2,c
  1990  000A86  D005               	goto	l3032
  1991                           
  1992                           ; BSR set to: 0
  1993  000A88  0E5A               	movlw	90
  1994  000A8A  0100               	movlb	0	; () banked
  1995  000A8C  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1996  000A8E  A4D8               	btfss	status,2,c
  1997  000A90  D00D               	goto	l3036
  1998  000A92                     l3032:
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;iut_lcd.c: 355: size = 2;
  2002  000A92  0E02               	movlw	2
  2003  000A94  D017               	goto	L4
  2004  000A96                     l3034:
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;iut_lcd.c: 356: c = *++f;
  2008  000A96  4A3A               	infsnz	lcd_printf@f,f,c
  2009  000A98  2A3B               	incf	lcd_printf@f+1,f,c
  2010  000A9A  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  2011  000A9E  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  2012  000AA2                     	if	0	;tblptru may be non-zero
  2013  000AA2                     	endif
  2014  000AA2                     	if	0	;tblptru may be non-zero
  2015  000AA2                     	endif
  2016  000AA2  0008               	tblrd		*
  2017  000AA4  CFF5 F0A2          	movff	tablat,lcd_printf@c
  2018                           
  2019                           ;iut_lcd.c: 357: }
  2020  000AA8  EF81  F00A         	goto	l3466
  2021  000AAC                     l3036:
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;iut_lcd.c: 360: else if (c == 'l' || c == 'j') {
  2025  000AAC  0E6C               	movlw	108
  2026  000AAE  0100               	movlb	0	; () banked
  2027  000AB0  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2028  000AB2  B4D8               	btfsc	status,2,c
  2029  000AB4  D006               	goto	l3040
  2030                           
  2031                           ; BSR set to: 0
  2032  000AB6  0E6A               	movlw	106
  2033  000AB8  0100               	movlb	0	; () banked
  2034  000ABA  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2035  000ABC  A4D8               	btfss	status,2,c
  2036  000ABE  EF81  F00A         	goto	l3466
  2037  000AC2                     l3040:
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;iut_lcd.c: 361: size = 1;
  2041  000AC2  0E01               	movlw	1
  2042  000AC4                     L4:
  2043  000AC4  0100               	movlb	0	; () banked
  2044  000AC6  6F94               	movwf	lcd_printf@size& (0+255),b
  2045  000AC8  D7E6               	goto	l3034
  2046  000ACA                     l3044:
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;iut_lcd.c: 373: --f;
  2050  000ACA  063A               	decf	lcd_printf@f,f,c
  2051  000ACC  A0D8               	btfss	status,0,c
  2052  000ACE  063B               	decf	lcd_printf@f+1,f,c
  2053  000AD0                     l3046:
  2054                           
  2055                           ; BSR set to: 0
  2056                           ;iut_lcd.c: 376: lcd_write_data_busy('%');
  2057  000AD0  0E25               	movlw	37
  2058  000AD2  EC9E  F011         	call	_lcd_write_data_busy
  2059                           
  2060                           ;iut_lcd.c: 378: break;
  2061  000AD6  EFC1  F00A         	goto	l3470
  2062  000ADA                     l3048:
  2063                           
  2064                           ;iut_lcd.c: 380: space_cnt = 0;
  2065  000ADA  0E00               	movlw	0
  2066  000ADC  0100               	movlb	0	; () banked
  2067  000ADE  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;iut_lcd.c: 381: if (width > 1) {
  2071  000AE0  0E01               	movlw	1
  2072  000AE2  0100               	movlb	0	; () banked
  2073  000AE4  65A1               	cpfsgt	lcd_printf@width& (0+255),b
  2074  000AE6  D004               	goto	l3054
  2075                           
  2076                           ; BSR set to: 0
  2077                           ;iut_lcd.c: 382: space_cnt = width - 1;
  2078  000AE8  0100               	movlb	0	; () banked
  2079  000AEA  05A1               	decf	lcd_printf@width& (0+255),w,b
  2080  000AEC  0100               	movlb	0	; () banked
  2081  000AEE  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2082  000AF0                     l3054:
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;iut_lcd.c: 384: }
  2086                           ;iut_lcd.c: 385: if (space_cnt && !(flags & 0x1)) {
  2087  000AF0  0100               	movlb	0	; () banked
  2088  000AF2  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2089  000AF4  0100               	movlb	0	; () banked
  2090  000AF6  B4D8               	btfsc	status,2,c
  2091  000AF8  D00C               	goto	l3062
  2092                           
  2093                           ; BSR set to: 0
  2094  000AFA  0100               	movlb	0	; () banked
  2095  000AFC  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  2096  000AFE  D009               	goto	l3062
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;iut_lcd.c: 386: lcd_repete_n(space_cnt, ' ');
  2100  000B00  0E20               	movlw	32
  2101  000B02  6E03               	movwf	lcd_repete_n@c,c
  2102  000B04  0100               	movlb	0	; () banked
  2103  000B06  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2104  000B08  ECB4  F011         	call	_lcd_repete_n
  2105                           
  2106                           ;iut_lcd.c: 387: space_cnt = 0;
  2107  000B0C  0E00               	movlw	0
  2108  000B0E  0100               	movlb	0	; () banked
  2109  000B10  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2110  000B12                     l3062:
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;iut_lcd.c: 388: }
  2114                           ;iut_lcd.c: 389: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2115  000B12  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2116  000B16  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2117  000B1A  50DF               	movf	indf2,w,c
  2118  000B1C  0100               	movlb	0	; () banked
  2119  000B1E  6FA2               	movwf	lcd_printf@c& (0+255),b
  2120                           
  2121                           ; BSR set to: 0
  2122  000B20  0E02               	movlw	2
  2123  000B22  0100               	movlb	0	; () banked
  2124  000B24  279D               	addwf	lcd_printf@ap& (0+255),f,b
  2125  000B26  0E00               	movlw	0
  2126  000B28  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;iut_lcd.c: 390: lcd_putc(c);
  2130  000B2A  0100               	movlb	0	; () banked
  2131  000B2C  51A2               	movf	lcd_printf@c& (0+255),w,b
  2132  000B2E  EC9B  F010         	call	_lcd_putc
  2133                           
  2134                           ;iut_lcd.c: 392: lcd_repete_n(space_cnt, ' ');
  2135  000B32  0E20               	movlw	32
  2136  000B34  6E03               	movwf	lcd_repete_n@c,c
  2137  000B36  0100               	movlb	0	; () banked
  2138  000B38  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2139  000B3A  ECB4  F011         	call	_lcd_repete_n
  2140                           
  2141                           ;iut_lcd.c: 393: break;
  2142  000B3E  EFC1  F00A         	goto	l3470
  2143  000B42                     l3070:
  2144                           
  2145                           ;iut_lcd.c: 395: if (size == 2)
  2146  000B42  0E02               	movlw	2
  2147  000B44  0100               	movlb	0	; () banked
  2148  000B46  1994               	xorwf	lcd_printf@size& (0+255),w,b
  2149  000B48  A4D8               	btfss	status,2,c
  2150  000B4A  D007               	goto	l3076
  2151  000B4C  D006               	goto	l3076
  2152  000B4E                     l3074:
  2153                           
  2154                           ; BSR set to: 0
  2155  000B4E  0E02               	movlw	2
  2156  000B50  0100               	movlb	0	; () banked
  2157  000B52  279D               	addwf	lcd_printf@ap& (0+255),f,b
  2158  000B54  0E00               	movlw	0
  2159  000B56  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  2160  000B58  D009               	goto	l3080
  2161  000B5A                     l3076:
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;iut_lcd.c: 397: else
  2165                           ;iut_lcd.c: 398: romstring = (far char*) (*(near char * *)__va_arg((*(near char * **)ap)
      +                          , (near char *)0));
  2166  000B5A  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2167  000B5E  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2168  000B62  CFDE F084          	movff	postinc2,lcd_printf@romstring
  2169  000B66  CFDD F085          	movff	postdec2,lcd_printf@romstring+1
  2170  000B6A  D7F1               	goto	l3074
  2171  000B6C                     l3080:
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;iut_lcd.c: 399: for (n = 0; romstring[n] != 0; n++);
  2175  000B6C  0E00               	movlw	0
  2176  000B6E  0100               	movlb	0	; () banked
  2177  000B70  6F9C               	movwf	(lcd_printf@n+1)& (0+255),b
  2178  000B72  0E00               	movlw	0
  2179  000B74  6F9B               	movwf	lcd_printf@n& (0+255),b
  2180  000B76  D003               	goto	l3084
  2181  000B78                     l3082:
  2182                           
  2183                           ; BSR set to: 0
  2184  000B78  0100               	movlb	0	; () banked
  2185  000B7A  4B9B               	infsnz	lcd_printf@n& (0+255),f,b
  2186  000B7C  2B9C               	incf	(lcd_printf@n+1)& (0+255),f,b
  2187  000B7E                     l3084:
  2188                           
  2189                           ; BSR set to: 0
  2190  000B7E  0100               	movlb	0	; () banked
  2191  000B80  519B               	movf	lcd_printf@n& (0+255),w,b
  2192  000B82  0100               	movlb	0	; () banked
  2193  000B84  2584               	addwf	lcd_printf@romstring& (0+255),w,b
  2194  000B86  6ED9               	movwf	fsr2l,c
  2195  000B88  0100               	movlb	0	; () banked
  2196  000B8A  519C               	movf	(lcd_printf@n+1)& (0+255),w,b
  2197  000B8C  0100               	movlb	0	; () banked
  2198  000B8E  2185               	addwfc	(lcd_printf@romstring+1)& (0+255),w,b
  2199  000B90  6EDA               	movwf	fsr2h,c
  2200  000B92  50DF               	movf	indf2,w,c
  2201  000B94  A4D8               	btfss	status,2,c
  2202  000B96  D7F0               	goto	l3082
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;iut_lcd.c: 402: if (have_precision && precision < (unsigned char) n)
  2206                           
  2207                           ; BSR set to: 0
  2208  000B98  0100               	movlb	0	; () banked
  2209  000B9A  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2210  000B9C  0100               	movlb	0	; () banked
  2211  000B9E  B4D8               	btfsc	status,2,c
  2212  000BA0  D00A               	goto	l3092
  2213                           
  2214                           ; BSR set to: 0
  2215  000BA2  0100               	movlb	0	; () banked
  2216  000BA4  519B               	movf	lcd_printf@n& (0+255),w,b
  2217  000BA6  0100               	movlb	0	; () banked
  2218  000BA8  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  2219  000BAA  B0D8               	btfsc	status,0,c
  2220  000BAC  D004               	goto	l3092
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;iut_lcd.c: 403: n = precision;
  2224  000BAE  C0A0  F09B         	movff	lcd_printf@precision,lcd_printf@n
  2225  000BB2  0100               	movlb	0	; () banked
  2226  000BB4  6B9C               	clrf	(lcd_printf@n+1)& (0+255),b
  2227  000BB6                     l3092:
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;iut_lcd.c: 404: if (width < (unsigned char) n)
  2231  000BB6  0100               	movlb	0	; () banked
  2232  000BB8  519B               	movf	lcd_printf@n& (0+255),w,b
  2233  000BBA  0100               	movlb	0	; () banked
  2234  000BBC  5DA1               	subwf	lcd_printf@width& (0+255),w,b
  2235  000BBE  A0D8               	btfss	status,0,c
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;iut_lcd.c: 405: width = n;
  2239  000BC0  C09B  F0A1         	movff	lcd_printf@n,lcd_printf@width
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;iut_lcd.c: 406: space_cnt = width - (unsigned char) n;
  2243                           
  2244                           ; BSR set to: 0
  2245  000BC4  0100               	movlb	0	; () banked
  2246  000BC6  519B               	movf	lcd_printf@n& (0+255),w,b
  2247  000BC8  0800               	sublw	0
  2248  000BCA  0100               	movlb	0	; () banked
  2249  000BCC  25A1               	addwf	lcd_printf@width& (0+255),w,b
  2250  000BCE  0100               	movlb	0	; () banked
  2251  000BD0  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;iut_lcd.c: 413: if (have_precision && precision < width)
  2255  000BD2  0100               	movlb	0	; () banked
  2256  000BD4  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2257  000BD6  0100               	movlb	0	; () banked
  2258  000BD8  B4D8               	btfsc	status,2,c
  2259  000BDA  D007               	goto	l189
  2260                           
  2261                           ; BSR set to: 0
  2262  000BDC  0100               	movlb	0	; () banked
  2263  000BDE  51A1               	movf	lcd_printf@width& (0+255),w,b
  2264  000BE0  0100               	movlb	0	; () banked
  2265  000BE2  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  2266  000BE4  A0D8               	btfss	status,0,c
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;iut_lcd.c: 414: width = precision;
  2270  000BE6  C0A0  F0A1         	movff	lcd_printf@precision,lcd_printf@width
  2271  000BEA                     l189:
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;iut_lcd.c: 417: if (!(flags & 0x1)) {
  2275  000BEA  0100               	movlb	0	; () banked
  2276  000BEC  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  2277  000BEE  D009               	goto	l3108
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;iut_lcd.c: 418: lcd_repete_n(space_cnt, ' ');
  2281  000BF0  0E20               	movlw	32
  2282  000BF2  6E03               	movwf	lcd_repete_n@c,c
  2283  000BF4  0100               	movlb	0	; () banked
  2284  000BF6  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2285  000BF8  ECB4  F011         	call	_lcd_repete_n
  2286                           
  2287                           ;iut_lcd.c: 419: space_cnt = 0;
  2288  000BFC  0E00               	movlw	0
  2289  000BFE  0100               	movlb	0	; () banked
  2290  000C00  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2291  000C02                     l3108:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;iut_lcd.c: 420: }
  2295                           ;iut_lcd.c: 421: cval = 0;
  2296  000C02  0E00               	movlw	0
  2297  000C04  0100               	movlb	0	; () banked
  2298  000C06  6F9A               	movwf	lcd_printf@cval& (0+255),b
  2299  000C08  D009               	goto	L5
  2300  000C0A                     l3112:
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;iut_lcd.c: 423: lcd_putc(c);
  2304  000C0A  0100               	movlb	0	; () banked
  2305  000C0C  51A2               	movf	lcd_printf@c& (0+255),w,b
  2306  000C0E  EC9B  F010         	call	_lcd_putc
  2307                           
  2308                           ;iut_lcd.c: 425: ++cval;
  2309  000C12  0100               	movlb	0	; () banked
  2310  000C14  2B9A               	incf	lcd_printf@cval& (0+255),f,b
  2311                           
  2312                           ; BSR set to: 0
  2313  000C16  0100               	movlb	0	; () banked
  2314  000C18  4B84               	infsnz	lcd_printf@romstring& (0+255),f,b
  2315  000C1A  2B85               	incf	(lcd_printf@romstring+1)& (0+255),f,b
  2316  000C1C                     L5:
  2317  000C1C  C084  FFD9         	movff	lcd_printf@romstring,fsr2l
  2318  000C20  C085  FFDA         	movff	lcd_printf@romstring+1,fsr2h
  2319  000C24  50DF               	movf	indf2,w,c
  2320  000C26  0100               	movlb	0	; () banked
  2321  000C28  6FA2               	movwf	lcd_printf@c& (0+255),b
  2322                           
  2323                           ; BSR set to: 0
  2324                           
  2325                           ; BSR set to: 0
  2326  000C2A  0100               	movlb	0	; () banked
  2327  000C2C  51A2               	movf	lcd_printf@c& (0+255),w,b
  2328  000C2E  0100               	movlb	0	; () banked
  2329  000C30  B4D8               	btfsc	status,2,c
  2330  000C32  D006               	goto	l3122
  2331                           
  2332                           ; BSR set to: 0
  2333  000C34  0100               	movlb	0	; () banked
  2334  000C36  51A1               	movf	lcd_printf@width& (0+255),w,b
  2335  000C38  0100               	movlb	0	; () banked
  2336  000C3A  5D9A               	subwf	lcd_printf@cval& (0+255),w,b
  2337  000C3C  A0D8               	btfss	status,0,c
  2338  000C3E  D7E5               	goto	l3112
  2339  000C40                     l3122:
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;iut_lcd.c: 426: }
  2343                           ;iut_lcd.c: 430: lcd_repete_n(space_cnt, ' ');
  2344  000C40  0E20               	movlw	32
  2345  000C42  6E03               	movwf	lcd_repete_n@c,c
  2346  000C44  0100               	movlb	0	; () banked
  2347  000C46  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2348  000C48  ECB4  F011         	call	_lcd_repete_n
  2349                           
  2350                           ;iut_lcd.c: 431: break;
  2351  000C4C  EFC1  F00A         	goto	l3470
  2352  000C50                     l3124:
  2353                           
  2354                           ;iut_lcd.c: 433: ramstring = (*(char * *)__va_arg((*(char * **)ap), (char *)0));
  2355  000C50  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2356  000C54  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2357  000C58  CFDE F081          	movff	postinc2,lcd_printf@ramstring
  2358  000C5C  CFDD F082          	movff	postdec2,lcd_printf@ramstring+1
  2359  000C60  0E02               	movlw	2
  2360  000C62  0100               	movlb	0	; () banked
  2361  000C64  279D               	addwf	lcd_printf@ap& (0+255),f,b
  2362  000C66  0E00               	movlw	0
  2363  000C68  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;iut_lcd.c: 434: for (n = 0; ramstring[n] != 0; n++);
  2367  000C6A  0E00               	movlw	0
  2368  000C6C  0100               	movlb	0	; () banked
  2369  000C6E  6F9C               	movwf	(lcd_printf@n+1)& (0+255),b
  2370  000C70  0E00               	movlw	0
  2371  000C72  6F9B               	movwf	lcd_printf@n& (0+255),b
  2372  000C74  D003               	goto	l3132
  2373  000C76                     l3130:
  2374                           
  2375                           ; BSR set to: 0
  2376  000C76  0100               	movlb	0	; () banked
  2377  000C78  4B9B               	infsnz	lcd_printf@n& (0+255),f,b
  2378  000C7A  2B9C               	incf	(lcd_printf@n+1)& (0+255),f,b
  2379  000C7C                     l3132:
  2380                           
  2381                           ; BSR set to: 0
  2382  000C7C  0100               	movlb	0	; () banked
  2383  000C7E  519B               	movf	lcd_printf@n& (0+255),w,b
  2384  000C80  0100               	movlb	0	; () banked
  2385  000C82  2581               	addwf	lcd_printf@ramstring& (0+255),w,b
  2386  000C84  6ED9               	movwf	fsr2l,c
  2387  000C86  0100               	movlb	0	; () banked
  2388  000C88  519C               	movf	(lcd_printf@n+1)& (0+255),w,b
  2389  000C8A  0100               	movlb	0	; () banked
  2390  000C8C  2182               	addwfc	(lcd_printf@ramstring+1)& (0+255),w,b
  2391  000C8E  6EDA               	movwf	fsr2h,c
  2392  000C90  50DF               	movf	indf2,w,c
  2393  000C92  A4D8               	btfss	status,2,c
  2394  000C94  D7F0               	goto	l3130
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;iut_lcd.c: 437: if (have_precision && precision < (unsigned char) n)
  2398                           
  2399                           ; BSR set to: 0
  2400  000C96  0100               	movlb	0	; () banked
  2401  000C98  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2402  000C9A  0100               	movlb	0	; () banked
  2403  000C9C  B4D8               	btfsc	status,2,c
  2404  000C9E  D00A               	goto	l3140
  2405                           
  2406                           ; BSR set to: 0
  2407  000CA0  0100               	movlb	0	; () banked
  2408  000CA2  519B               	movf	lcd_printf@n& (0+255),w,b
  2409  000CA4  0100               	movlb	0	; () banked
  2410  000CA6  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  2411  000CA8  B0D8               	btfsc	status,0,c
  2412  000CAA  D004               	goto	l3140
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;iut_lcd.c: 438: n = precision;
  2416  000CAC  C0A0  F09B         	movff	lcd_printf@precision,lcd_printf@n
  2417  000CB0  0100               	movlb	0	; () banked
  2418  000CB2  6B9C               	clrf	(lcd_printf@n+1)& (0+255),b
  2419  000CB4                     l3140:
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;iut_lcd.c: 439: if (width < (unsigned char) n)
  2423  000CB4  0100               	movlb	0	; () banked
  2424  000CB6  519B               	movf	lcd_printf@n& (0+255),w,b
  2425  000CB8  0100               	movlb	0	; () banked
  2426  000CBA  5DA1               	subwf	lcd_printf@width& (0+255),w,b
  2427  000CBC  A0D8               	btfss	status,0,c
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;iut_lcd.c: 440: width = n;
  2431  000CBE  C09B  F0A1         	movff	lcd_printf@n,lcd_printf@width
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;iut_lcd.c: 441: space_cnt = width - (unsigned char) n;
  2435                           
  2436                           ; BSR set to: 0
  2437  000CC2  0100               	movlb	0	; () banked
  2438  000CC4  519B               	movf	lcd_printf@n& (0+255),w,b
  2439  000CC6  0800               	sublw	0
  2440  000CC8  0100               	movlb	0	; () banked
  2441  000CCA  25A1               	addwf	lcd_printf@width& (0+255),w,b
  2442  000CCC  0100               	movlb	0	; () banked
  2443  000CCE  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;iut_lcd.c: 448: if (have_precision && precision < width)
  2447  000CD0  0100               	movlb	0	; () banked
  2448  000CD2  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2449  000CD4  0100               	movlb	0	; () banked
  2450  000CD6  B4D8               	btfsc	status,2,c
  2451  000CD8  D007               	goto	l202
  2452                           
  2453                           ; BSR set to: 0
  2454  000CDA  0100               	movlb	0	; () banked
  2455  000CDC  51A1               	movf	lcd_printf@width& (0+255),w,b
  2456  000CDE  0100               	movlb	0	; () banked
  2457  000CE0  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  2458  000CE2  A0D8               	btfss	status,0,c
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;iut_lcd.c: 449: width = precision;
  2462  000CE4  C0A0  F0A1         	movff	lcd_printf@precision,lcd_printf@width
  2463  000CE8                     l202:
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;iut_lcd.c: 452: if (!(flags & 0x1)) {
  2467  000CE8  0100               	movlb	0	; () banked
  2468  000CEA  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  2469  000CEC  D009               	goto	l3156
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;iut_lcd.c: 453: lcd_repete_n(space_cnt, ' ');
  2473  000CEE  0E20               	movlw	32
  2474  000CF0  6E03               	movwf	lcd_repete_n@c,c
  2475  000CF2  0100               	movlb	0	; () banked
  2476  000CF4  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2477  000CF6  ECB4  F011         	call	_lcd_repete_n
  2478                           
  2479                           ;iut_lcd.c: 454: space_cnt = 0;
  2480  000CFA  0E00               	movlw	0
  2481  000CFC  0100               	movlb	0	; () banked
  2482  000CFE  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2483  000D00                     l3156:
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;iut_lcd.c: 455: }
  2487                           ;iut_lcd.c: 456: cval = 0;
  2488  000D00  0E00               	movlw	0
  2489  000D02  0100               	movlb	0	; () banked
  2490  000D04  6F9A               	movwf	lcd_printf@cval& (0+255),b
  2491  000D06  D009               	goto	L6
  2492  000D08                     l3160:
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;iut_lcd.c: 458: lcd_putc(c);
  2496  000D08  0100               	movlb	0	; () banked
  2497  000D0A  51A2               	movf	lcd_printf@c& (0+255),w,b
  2498  000D0C  EC9B  F010         	call	_lcd_putc
  2499                           
  2500                           ;iut_lcd.c: 460: ++cval;
  2501  000D10  0100               	movlb	0	; () banked
  2502  000D12  2B9A               	incf	lcd_printf@cval& (0+255),f,b
  2503                           
  2504                           ; BSR set to: 0
  2505  000D14  0100               	movlb	0	; () banked
  2506  000D16  4B81               	infsnz	lcd_printf@ramstring& (0+255),f,b
  2507  000D18  2B82               	incf	(lcd_printf@ramstring+1)& (0+255),f,b
  2508  000D1A                     L6:
  2509  000D1A  C081  FFD9         	movff	lcd_printf@ramstring,fsr2l
  2510  000D1E  C082  FFDA         	movff	lcd_printf@ramstring+1,fsr2h
  2511  000D22  50DF               	movf	indf2,w,c
  2512  000D24  0100               	movlb	0	; () banked
  2513  000D26  6FA2               	movwf	lcd_printf@c& (0+255),b
  2514                           
  2515                           ; BSR set to: 0
  2516                           
  2517                           ; BSR set to: 0
  2518  000D28  0100               	movlb	0	; () banked
  2519  000D2A  51A2               	movf	lcd_printf@c& (0+255),w,b
  2520  000D2C  0100               	movlb	0	; () banked
  2521  000D2E  B4D8               	btfsc	status,2,c
  2522  000D30  D006               	goto	l3170
  2523                           
  2524                           ; BSR set to: 0
  2525  000D32  0100               	movlb	0	; () banked
  2526  000D34  51A1               	movf	lcd_printf@width& (0+255),w,b
  2527  000D36  0100               	movlb	0	; () banked
  2528  000D38  5D9A               	subwf	lcd_printf@cval& (0+255),w,b
  2529  000D3A  A0D8               	btfss	status,0,c
  2530  000D3C  D7E5               	goto	l3160
  2531  000D3E                     l3170:
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;iut_lcd.c: 461: }
  2535                           ;iut_lcd.c: 465: lcd_repete_n(space_cnt, ' ');
  2536  000D3E  0E20               	movlw	32
  2537  000D40  6E03               	movwf	lcd_repete_n@c,c
  2538  000D42  0100               	movlb	0	; () banked
  2539  000D44  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2540  000D46  ECB4  F011         	call	_lcd_repete_n
  2541                           
  2542                           ;iut_lcd.c: 466: break;
  2543  000D4A  EFC1  F00A         	goto	l3470
  2544  000D4E                     l3172:
  2545                           
  2546                           ;iut_lcd.c: 468: case 'i':
  2547                           ;iut_lcd.c: 469: flags |= 0x80;
  2548  000D4E  0100               	movlb	0	; () banked
  2549  000D50  8F9F               	bsf	lcd_printf@flags& (0+255),7,b
  2550  000D52                     l3174:
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;iut_lcd.c: 472: case 'u':
  2554                           ;iut_lcd.c: 473: case 'x':
  2555                           ;iut_lcd.c: 474: case 'X':
  2556                           ;iut_lcd.c: 475: case 'b':
  2557                           ;iut_lcd.c: 476: case 'B':
  2558                           ;iut_lcd.c: 483: if (size == 1) {
  2559  000D52  0100               	movlb	0	; () banked
  2560  000D54  0594               	decf	lcd_printf@size& (0+255),w,b
  2561  000D56  A4D8               	btfss	status,2,c
  2562  000D58  D00E               	goto	l3182
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;iut_lcd.c: 484: larg = (*(long int *)__va_arg((*(long int **)ap), (long int)0));
  2566  000D5A  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2567  000D5E  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2568  000D62  CFDE F090          	movff	postinc2,lcd_printf@larg
  2569  000D66  CFDE F091          	movff	postinc2,lcd_printf@larg+1
  2570  000D6A  CFDE F092          	movff	postinc2,lcd_printf@larg+2
  2571  000D6E  CFDE F093          	movff	postinc2,lcd_printf@larg+3
  2572                           
  2573                           ; BSR set to: 0
  2574  000D72  0E04               	movlw	4
  2575  000D74  D016               	goto	L7
  2576  000D76                     l3182:
  2577                           
  2578                           ; BSR set to: 0
  2579  000D76  0E03               	movlw	3
  2580  000D78  0100               	movlb	0	; () banked
  2581  000D7A  1994               	xorwf	lcd_printf@size& (0+255),w,b
  2582  000D7C  A4D8               	btfss	status,2,c
  2583  000D7E  D021               	goto	l3194
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;iut_lcd.c: 487: if (flags & 0x80)
  2587  000D80  0100               	movlb	0	; () banked
  2588  000D82  AF9F               	btfss	lcd_printf@flags& (0+255),7,b
  2589  000D84  D013               	goto	l3190
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;iut_lcd.c: 488: larg = (signed char) (*(int *)__va_arg((*(int **)ap), (int)0));
  2593  000D86  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2594  000D8A  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2595  000D8E  50DF               	movf	indf2,w,c
  2596  000D90  0100               	movlb	0	; () banked
  2597  000D92  6F90               	movwf	lcd_printf@larg& (0+255),b
  2598  000D94  0E00               	movlw	0
  2599  000D96  BF90               	btfsc	lcd_printf@larg& (0+255),7,b
  2600  000D98  0EFF               	movlw	-1
  2601  000D9A  6F91               	movwf	(lcd_printf@larg+1)& (0+255),b
  2602  000D9C  6F92               	movwf	(lcd_printf@larg+2)& (0+255),b
  2603  000D9E  6F93               	movwf	(lcd_printf@larg+3)& (0+255),b
  2604  000DA0  D06A               	goto	l3212
  2605  000DA2                     L7:
  2606  000DA2  0100               	movlb	0	; () banked
  2607  000DA4  279D               	addwf	lcd_printf@ap& (0+255),f,b
  2608  000DA6  0E00               	movlw	0
  2609  000DA8  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  2610  000DAA  D067               	goto	l3214
  2611  000DAC                     l3190:
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;iut_lcd.c: 489: else
  2615                           ;iut_lcd.c: 490: larg = (unsigned char) (*(unsigned int *)__va_arg((*(unsigned int **)ap
      +                          ), (unsigned int)0));
  2616  000DAC  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2617  000DB0  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2618  000DB4  50DF               	movf	indf2,w,c
  2619  000DB6  6E44               	movwf	??_lcd_printf& (0+255),c
  2620  000DB8  5044               	movf	??_lcd_printf,w,c
  2621  000DBA  0100               	movlb	0	; () banked
  2622  000DBC  6F90               	movwf	lcd_printf@larg& (0+255),b
  2623  000DBE  6B91               	clrf	(lcd_printf@larg+1)& (0+255),b
  2624  000DC0  D058               	goto	L24
  2625  000DC2                     l3194:
  2626                           
  2627                           ; BSR set to: 0
  2628                           ;iut_lcd.c: 495: case 'P':
  2629                           ;iut_lcd.c: 496: if (size == 2) {
  2630  000DC2  0E02               	movlw	2
  2631  000DC4  0100               	movlb	0	; () banked
  2632  000DC6  1994               	xorwf	lcd_printf@size& (0+255),w,b
  2633  000DC8  A4D8               	btfss	status,2,c
  2634  000DCA  D036               	goto	l225
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;iut_lcd.c: 497: if (flags & 0x80)
  2638  000DCC  0100               	movlb	0	; () banked
  2639  000DCE  AF9F               	btfss	lcd_printf@flags& (0+255),7,b
  2640  000DD0  D01C               	goto	l3202
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;iut_lcd.c: 498: larg = (*(short long int *)__va_arg((*(short long int **)ap), (short lo
      +                          ng int)0));
  2644  000DD2  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2645  000DD6  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2646  000DDA  CFDE F044          	movff	postinc2,??_lcd_printf
  2647  000DDE  CFDE F045          	movff	postinc2,??_lcd_printf+1
  2648  000DE2  CFDE F046          	movff	postinc2,??_lcd_printf+2
  2649  000DE6  C044  F047         	movff	??_lcd_printf,??_lcd_printf+3
  2650  000DEA  C045  F048         	movff	??_lcd_printf+1,??_lcd_printf+4
  2651  000DEE  C046  F049         	movff	??_lcd_printf+2,??_lcd_printf+5
  2652  000DF2  6A4A               	clrf	(??_lcd_printf+6)& (0+255),c
  2653  000DF4  BE49               	btfsc	(??_lcd_printf+5)& (0+255),7,c
  2654  000DF6  684A               	setf	(??_lcd_printf+6)& (0+255),c
  2655  000DF8  C047  F090         	movff	??_lcd_printf+3,lcd_printf@larg
  2656  000DFC  C048  F091         	movff	??_lcd_printf+4,lcd_printf@larg+1
  2657  000E00  C049  F092         	movff	??_lcd_printf+5,lcd_printf@larg+2
  2658  000E04  C04A  F093         	movff	??_lcd_printf+6,lcd_printf@larg+3
  2659  000E08  D015               	goto	l3204
  2660  000E0A                     l3202:
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;iut_lcd.c: 499: else
  2664                           ;iut_lcd.c: 500: larg = (*(unsigned short long int *)__va_arg((*(unsigned short long int
      +                           **)ap), (unsigned short long int)0));
  2665  000E0A  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2666  000E0E  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2667  000E12  CFDE F044          	movff	postinc2,??_lcd_printf
  2668  000E16  CFDE F045          	movff	postinc2,??_lcd_printf+1
  2669  000E1A  CFDE F046          	movff	postinc2,??_lcd_printf+2
  2670  000E1E  5044               	movf	??_lcd_printf,w,c
  2671  000E20  0100               	movlb	0	; () banked
  2672  000E22  6F90               	movwf	lcd_printf@larg& (0+255),b
  2673  000E24  5045               	movf	??_lcd_printf+1,w,c
  2674  000E26  0100               	movlb	0	; () banked
  2675  000E28  6F91               	movwf	(lcd_printf@larg+1)& (0+255),b
  2676  000E2A  5046               	movf	??_lcd_printf+2,w,c
  2677  000E2C  0100               	movlb	0	; () banked
  2678  000E2E  6F92               	movwf	(lcd_printf@larg+2)& (0+255),b
  2679  000E30  0100               	movlb	0	; () banked
  2680  000E32  6B93               	clrf	(lcd_printf@larg+3)& (0+255),b
  2681  000E34                     l3204:
  2682                           
  2683                           ; BSR set to: 0
  2684  000E34  0E03               	movlw	3
  2685  000E36  D7B5               	goto	L7
  2686  000E38                     l225:
  2687                           
  2688                           ; BSR set to: 0
  2689  000E38  0100               	movlb	0	; () banked
  2690  000E3A  AF9F               	btfss	lcd_printf@flags& (0+255),7,b
  2691  000E3C  D00D               	goto	l3210
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;iut_lcd.c: 502: larg = (*(int *)__va_arg((*(int **)ap), (int)0));
  2695  000E3E  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2696  000E42  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2697  000E46  CFDE F090          	movff	postinc2,lcd_printf@larg
  2698  000E4A  CFDD F091          	movff	postdec2,lcd_printf@larg+1
  2699  000E4E  0100               	movlb	0	; () banked
  2700  000E50  0E00               	movlw	0
  2701  000E52  BF91               	btfsc	(lcd_printf@larg+1)& (0+255),7,b
  2702  000E54  0EFF               	movlw	-1
  2703  000E56  D7A2               	goto	L15
  2704  000E58                     l3210:
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;iut_lcd.c: 503: else
  2708                           ;iut_lcd.c: 504: larg = (*(unsigned int *)__va_arg((*(unsigned int **)ap), (unsigned int
      +                          )0));
  2709  000E58  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2710  000E5C  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2711  000E60  CFDE F044          	movff	postinc2,??_lcd_printf
  2712  000E64  CFDD F045          	movff	postdec2,??_lcd_printf+1
  2713  000E68  C044  F090         	movff	??_lcd_printf,lcd_printf@larg
  2714  000E6C  C045  F091         	movff	??_lcd_printf+1,lcd_printf@larg+1
  2715  000E70  0100               	movlb	0	; () banked
  2716  000E72                     L24:
  2717  000E72  6B92               	clrf	(lcd_printf@larg+2)& (0+255),b
  2718  000E74  6B93               	clrf	(lcd_printf@larg+3)& (0+255),b
  2719  000E76                     l3212:
  2720                           
  2721                           ; BSR set to: 0
  2722  000E76  0E02               	movlw	2
  2723  000E78  D794               	goto	L7
  2724  000E7A                     l3214:
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;iut_lcd.c: 507: if (!have_precision)
  2728  000E7A  0100               	movlb	0	; () banked
  2729  000E7C  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2730  000E7E  0100               	movlb	0	; () banked
  2731  000E80  A4D8               	btfss	status,2,c
  2732  000E82  D003               	goto	l231
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;iut_lcd.c: 508: precision = 1;
  2736  000E84  0E01               	movlw	1
  2737  000E86  0100               	movlb	0	; () banked
  2738  000E88  6FA0               	movwf	lcd_printf@precision& (0+255),b
  2739  000E8A                     l231:
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;iut_lcd.c: 510: {
  2743                           ;iut_lcd.c: 511: unsigned char digit_cnt = 0;
  2744  000E8A  0E00               	movlw	0
  2745  000E8C  0100               	movlb	0	; () banked
  2746  000E8E  6F8F               	movwf	lcd_printf@digit_cnt& (0+255),b
  2747                           
  2748                           ;iut_lcd.c: 512: unsigned char prefix_cnt = 0;
  2749  000E90  0E00               	movlw	0
  2750  000E92  0100               	movlb	0	; () banked
  2751  000E94  6F8C               	movwf	lcd_printf@prefix_cnt& (0+255),b
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;iut_lcd.c: 513: unsigned char sign_char;
  2755                           ;iut_lcd.c: 516: char buf[33];
  2756                           ;iut_lcd.c: 518: char *q = &buf[31];
  2757  000E96  0E7F               	movlw	low (lcd_printf@buf+31)
  2758  000E98  0100               	movlb	0	; () banked
  2759  000E9A  6F86               	movwf	lcd_printf@q& (0+255),b
  2760  000E9C  0E00               	movlw	high (lcd_printf@buf+31)
  2761  000E9E  0100               	movlb	0	; () banked
  2762  000EA0  6F87               	movwf	(lcd_printf@q+1)& (0+255),b
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;iut_lcd.c: 520: buf[32] = '\0';
  2766  000EA2  0E00               	movlw	0
  2767  000EA4  0100               	movlb	0	; () banked
  2768  000EA6  6F80               	movwf	(lcd_printf@buf+32)& (0+255),b
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;iut_lcd.c: 522: space_cnt = 0;
  2772  000EA8  0E00               	movlw	0
  2773  000EAA  0100               	movlb	0	; () banked
  2774  000EAC  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;iut_lcd.c: 523: size = 10;
  2778  000EAE  0E0A               	movlw	10
  2779  000EB0  0100               	movlb	0	; () banked
  2780  000EB2  6F94               	movwf	lcd_printf@size& (0+255),b
  2781                           
  2782                           ;iut_lcd.c: 525: switch (c) {
  2783  000EB4  D00B               	goto	l3236
  2784  000EB6                     l3226:
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;iut_lcd.c: 527: case 'B':
  2788                           ;iut_lcd.c: 528: size = 2;
  2789  000EB6  0E02               	movlw	2
  2790  000EB8  D006               	goto	L9
  2791  000EBA                     l3228:
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;iut_lcd.c: 531: size = 8;
  2795  000EBA  0E08               	movlw	8
  2796  000EBC  D004               	goto	L9
  2797  000EBE                     l3230:
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;iut_lcd.c: 534: case 'P':
  2801                           ;iut_lcd.c: 537: c += 'x' - 'p';
  2802  000EBE  0E08               	movlw	8
  2803  000EC0  0100               	movlb	0	; () banked
  2804  000EC2  27A2               	addwf	lcd_printf@c& (0+255),f,b
  2805  000EC4                     l3232:
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;iut_lcd.c: 540: case 'X':
  2809                           ;iut_lcd.c: 541: size = 16;
  2810  000EC4  0E10               	movlw	16
  2811  000EC6                     L9:
  2812  000EC6  0100               	movlb	0	; () banked
  2813  000EC8  6F94               	movwf	lcd_printf@size& (0+255),b
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;iut_lcd.c: 543: }
  2817                           
  2818                           ;iut_lcd.c: 542: break;
  2819  000ECA  D017               	goto	l235
  2820  000ECC                     l3236:
  2821                           
  2822                           ; BSR set to: 0
  2823  000ECC  0100               	movlb	0	; () banked
  2824  000ECE  51A2               	movf	lcd_printf@c& (0+255),w,b
  2825                           
  2826                           ; Switch size 1, requested type "space"
  2827                           ; Number of cases is 7, Range of values is 66 to 120
  2828                           ; switch strategies available:
  2829                           ; Name         Instructions Cycles
  2830                           ; simple_byte           22    12 (average)
  2831                           ;	Chosen strategy is simple_byte
  2832  000ED0  0A42               	xorlw	66	; case 66
  2833  000ED2  B4D8               	btfsc	status,2,c
  2834  000ED4  D7F0               	goto	l3226
  2835  000ED6  0A12               	xorlw	18	; case 80
  2836  000ED8  B4D8               	btfsc	status,2,c
  2837  000EDA  D7F1               	goto	l3230
  2838  000EDC  0A08               	xorlw	8	; case 88
  2839  000EDE  B4D8               	btfsc	status,2,c
  2840  000EE0  D7F1               	goto	l3232
  2841  000EE2  0A3A               	xorlw	58	; case 98
  2842  000EE4  B4D8               	btfsc	status,2,c
  2843  000EE6  D7E7               	goto	l3226
  2844  000EE8  0A0D               	xorlw	13	; case 111
  2845  000EEA  B4D8               	btfsc	status,2,c
  2846  000EEC  D7E6               	goto	l3228
  2847  000EEE  0A1F               	xorlw	31	; case 112
  2848  000EF0  B4D8               	btfsc	status,2,c
  2849  000EF2  D7E5               	goto	l3230
  2850  000EF4  0A08               	xorlw	8	; case 120
  2851  000EF6  B4D8               	btfsc	status,2,c
  2852  000EF8  D7E5               	goto	l3232
  2853  000EFA                     l235:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;iut_lcd.c: 547: if (!(flags & 0x80))
  2857  000EFA  0100               	movlb	0	; () banked
  2858  000EFC  BF9F               	btfsc	lcd_printf@flags& (0+255),7,b
  2859  000EFE  D003               	goto	l3240
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;iut_lcd.c: 548: flags &= ~(0x2 | 0x4);
  2863  000F00  0EF9               	movlw	249
  2864  000F02  0100               	movlb	0	; () banked
  2865  000F04  179F               	andwf	lcd_printf@flags& (0+255),f,b
  2866  000F06                     l3240:
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;iut_lcd.c: 558: if (flags & 0x80 && ((long) larg < 0)) {
  2870  000F06  0100               	movlb	0	; () banked
  2871  000F08  AF9F               	btfss	lcd_printf@flags& (0+255),7,b
  2872  000F0A  D011               	goto	l242
  2873                           
  2874                           ; BSR set to: 0
  2875  000F0C  0100               	movlb	0	; () banked
  2876  000F0E  AF93               	btfss	(lcd_printf@larg+3)& (0+255),7,b
  2877  000F10  D00E               	goto	l242
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;iut_lcd.c: 559: larg = -(long) larg;
  2881  000F12  0100               	movlb	0	; () banked
  2882  000F14  1F93               	comf	(lcd_printf@larg+3)& (0+255),f,b
  2883  000F16  1F92               	comf	(lcd_printf@larg+2)& (0+255),f,b
  2884  000F18  1F91               	comf	(lcd_printf@larg+1)& (0+255),f,b
  2885  000F1A  6D90               	negf	lcd_printf@larg& (0+255),b
  2886  000F1C  0E00               	movlw	0
  2887  000F1E  2391               	addwfc	(lcd_printf@larg+1)& (0+255),f,b
  2888  000F20  2392               	addwfc	(lcd_printf@larg+2)& (0+255),f,b
  2889  000F22  2393               	addwfc	(lcd_printf@larg+3)& (0+255),f,b
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;iut_lcd.c: 560: sign_char = '-';
  2893  000F24  0E2D               	movlw	45
  2894  000F26  D00C               	goto	L14
  2895  000F28                     l3248:
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;iut_lcd.c: 561: ++digit_cnt;
  2899  000F28  0100               	movlb	0	; () banked
  2900  000F2A  2B8F               	incf	lcd_printf@digit_cnt& (0+255),f,b
  2901                           
  2902                           ;iut_lcd.c: 562: } else if (flags & 0x2) {
  2903  000F2C  D00F               	goto	l243
  2904  000F2E                     l242:
  2905                           
  2906                           ; BSR set to: 0
  2907  000F2E  0100               	movlb	0	; () banked
  2908  000F30  A39F               	btfss	lcd_printf@flags& (0+255),1,b
  2909  000F32  D002               	goto	l244
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;iut_lcd.c: 563: sign_char = '+';
  2913  000F34  0E2B               	movlw	43
  2914  000F36  D004               	goto	L14
  2915  000F38                     l244:
  2916                           
  2917                           ; BSR set to: 0
  2918  000F38  0100               	movlb	0	; () banked
  2919  000F3A  A59F               	btfss	lcd_printf@flags& (0+255),2,b
  2920  000F3C  D004               	goto	l3258
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;iut_lcd.c: 566: sign_char = ' ';
  2924  000F3E  0E20               	movlw	32
  2925  000F40                     L14:
  2926  000F40  0100               	movlb	0	; () banked
  2927  000F42  6F83               	movwf	lcd_printf@sign_char& (0+255),b
  2928  000F44  D7F1               	goto	l3248
  2929  000F46                     l3258:
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;iut_lcd.c: 569: sign_char = '\0';
  2933  000F46  0E00               	movlw	0
  2934  000F48  0100               	movlb	0	; () banked
  2935  000F4A  6F83               	movwf	lcd_printf@sign_char& (0+255),b
  2936  000F4C                     l243:
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;iut_lcd.c: 573: if (precision || larg) {
  2940  000F4C  0100               	movlb	0	; () banked
  2941  000F4E  51A0               	movf	lcd_printf@precision& (0+255),w,b
  2942  000F50  0100               	movlb	0	; () banked
  2943  000F52  A4D8               	btfss	status,2,c
  2944  000F54  D00A               	goto	l3262
  2945                           
  2946                           ; BSR set to: 0
  2947  000F56  0100               	movlb	0	; () banked
  2948  000F58  5190               	movf	lcd_printf@larg& (0+255),w,b
  2949  000F5A  0100               	movlb	0	; () banked
  2950  000F5C  1191               	iorwf	(lcd_printf@larg+1)& (0+255),w,b
  2951  000F5E  0100               	movlb	0	; () banked
  2952  000F60  1192               	iorwf	(lcd_printf@larg+2)& (0+255),w,b
  2953  000F62  0100               	movlb	0	; () banked
  2954  000F64  1193               	iorwf	(lcd_printf@larg+3)& (0+255),w,b
  2955  000F66  B4D8               	btfsc	status,2,c
  2956  000F68  D07E               	goto	l3296
  2957  000F6A                     l3262:
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;iut_lcd.c: 575: cval = s_digits[larg % size];
  2961  000F6A  C090  F001         	movff	lcd_printf@larg,___llmod@dividend
  2962  000F6E  C091  F002         	movff	lcd_printf@larg+1,___llmod@dividend+1
  2963  000F72  C092  F003         	movff	lcd_printf@larg+2,___llmod@dividend+2
  2964  000F76  C093  F004         	movff	lcd_printf@larg+3,___llmod@dividend+3
  2965  000F7A  0100               	movlb	0	; () banked
  2966  000F7C  5194               	movf	lcd_printf@size& (0+255),w,b
  2967  000F7E  6E05               	movwf	___llmod@divisor,c
  2968  000F80  6A06               	clrf	___llmod@divisor+1,c
  2969  000F82  6A07               	clrf	___llmod@divisor+2,c
  2970  000F84  6A08               	clrf	___llmod@divisor+3,c
  2971  000F86  EC68  F010         	call	___llmod	;wreg free
  2972  000F8A  0E01               	movlw	low _s_digits
  2973  000F8C  2401               	addwf	?___llmod,w,c
  2974  000F8E  6EF6               	movwf	tblptrl,c
  2975  000F90  0E08               	movlw	high _s_digits
  2976  000F92  2002               	addwfc	?___llmod+1,w,c
  2977  000F94  6EF7               	movwf	tblptrh,c
  2978  000F96                     	if	0	;There are less than 3 active tblptr bytes
  2979  000F96                     	endif
  2980  000F96  0008               	tblrd		*
  2981  000F98  CFF5 F09A          	movff	tablat,lcd_printf@cval
  2982                           
  2983                           ;iut_lcd.c: 576: if (c == 'X' && cval >= 'a')
  2984  000F9C  0E58               	movlw	88
  2985  000F9E  0100               	movlb	0	; () banked
  2986  000FA0  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2987  000FA2  A4D8               	btfss	status,2,c
  2988  000FA4  D007               	goto	l3270
  2989                           
  2990                           ; BSR set to: 0
  2991  000FA6  0E60               	movlw	96
  2992  000FA8  0100               	movlb	0	; () banked
  2993  000FAA  659A               	cpfsgt	lcd_printf@cval& (0+255),b
  2994  000FAC  D003               	goto	l3270
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;iut_lcd.c: 577: cval -= 'a' - 'A';
  2998  000FAE  0E20               	movlw	32
  2999  000FB0  0100               	movlb	0	; () banked
  3000  000FB2  5F9A               	subwf	lcd_printf@cval& (0+255),f,b
  3001  000FB4                     l3270:
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;iut_lcd.c: 578: larg /= size;
  3005  000FB4  C090  F001         	movff	lcd_printf@larg,___lldiv@dividend
  3006  000FB8  C091  F002         	movff	lcd_printf@larg+1,___lldiv@dividend+1
  3007  000FBC  C092  F003         	movff	lcd_printf@larg+2,___lldiv@dividend+2
  3008  000FC0  C093  F004         	movff	lcd_printf@larg+3,___lldiv@dividend+3
  3009  000FC4  0100               	movlb	0	; () banked
  3010  000FC6  5194               	movf	lcd_printf@size& (0+255),w,b
  3011  000FC8  6E05               	movwf	___lldiv@divisor,c
  3012  000FCA  6A06               	clrf	___lldiv@divisor+1,c
  3013  000FCC  6A07               	clrf	___lldiv@divisor+2,c
  3014  000FCE  6A08               	clrf	___lldiv@divisor+3,c
  3015  000FD0  EC27  F010         	call	___lldiv	;wreg free
  3016  000FD4  C001  F090         	movff	?___lldiv,lcd_printf@larg
  3017  000FD8  C002  F091         	movff	?___lldiv+1,lcd_printf@larg+1
  3018  000FDC  C003  F092         	movff	?___lldiv+2,lcd_printf@larg+2
  3019  000FE0  C004  F093         	movff	?___lldiv+3,lcd_printf@larg+3
  3020                           
  3021                           ;iut_lcd.c: 579: *q-- = cval;
  3022  000FE4  C086  FFD9         	movff	lcd_printf@q,fsr2l
  3023  000FE8  C087  FFDA         	movff	lcd_printf@q+1,fsr2h
  3024  000FEC  C09A  FFDF         	movff	lcd_printf@cval,indf2
  3025  000FF0  0100               	movlb	0	; () banked
  3026  000FF2  0786               	decf	lcd_printf@q& (0+255),f,b
  3027  000FF4  A0D8               	btfss	status,0,c
  3028  000FF6  0787               	decf	(lcd_printf@q+1)& (0+255),f,b
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;iut_lcd.c: 580: ++digit_cnt;
  3032  000FF8  0100               	movlb	0	; () banked
  3033  000FFA  2B8F               	incf	lcd_printf@digit_cnt& (0+255),f,b
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;iut_lcd.c: 581: } while (larg);
  3037  000FFC  0100               	movlb	0	; () banked
  3038  000FFE  5190               	movf	lcd_printf@larg& (0+255),w,b
  3039  001000  0100               	movlb	0	; () banked
  3040  001002  1191               	iorwf	(lcd_printf@larg+1)& (0+255),w,b
  3041  001004  0100               	movlb	0	; () banked
  3042  001006  1192               	iorwf	(lcd_printf@larg+2)& (0+255),w,b
  3043  001008  0100               	movlb	0	; () banked
  3044  00100A  1193               	iorwf	(lcd_printf@larg+3)& (0+255),w,b
  3045  00100C  A4D8               	btfss	status,2,c
  3046  00100E  D7AD               	goto	l3262
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;iut_lcd.c: 585: if (flags & 0x8) {
  3050  001010  0100               	movlb	0	; () banked
  3051  001012  A79F               	btfss	lcd_printf@flags& (0+255),3,b
  3052  001014  D02B               	goto	l3298
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;iut_lcd.c: 586: if (c == 'o') {
  3056  001016  0E6F               	movlw	111
  3057  001018  0100               	movlb	0	; () banked
  3058  00101A  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3059  00101C  A4D8               	btfss	status,2,c
  3060  00101E  D00B               	goto	l3286
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;iut_lcd.c: 590: if (precision <= digit_cnt)
  3064  001020  0100               	movlb	0	; () banked
  3065  001022  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3066  001024  0100               	movlb	0	; () banked
  3067  001026  5D8F               	subwf	lcd_printf@digit_cnt& (0+255),w,b
  3068  001028  A0D8               	btfss	status,0,c
  3069  00102A  D020               	goto	l3298
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;iut_lcd.c: 591: precision = digit_cnt + 1;
  3073  00102C  0100               	movlb	0	; () banked
  3074  00102E  298F               	incf	lcd_printf@digit_cnt& (0+255),w,b
  3075  001030  0100               	movlb	0	; () banked
  3076  001032  6FA0               	movwf	lcd_printf@precision& (0+255),b
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;iut_lcd.c: 592: } else if (c == 'x'
  3080  001034  D01B               	goto	l3298
  3081  001036                     l3286:
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;iut_lcd.c: 593: || c == 'X' || c == 'b' || c == 'B')
  3085  001036  0E78               	movlw	120
  3086  001038  0100               	movlb	0	; () banked
  3087  00103A  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3088  00103C  B4D8               	btfsc	status,2,c
  3089  00103E  D00F               	goto	l3294
  3090                           
  3091                           ; BSR set to: 0
  3092  001040  0E58               	movlw	88
  3093  001042  0100               	movlb	0	; () banked
  3094  001044  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3095  001046  B4D8               	btfsc	status,2,c
  3096  001048  D00A               	goto	l3294
  3097                           
  3098                           ; BSR set to: 0
  3099  00104A  0E62               	movlw	98
  3100  00104C  0100               	movlb	0	; () banked
  3101  00104E  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3102  001050  B4D8               	btfsc	status,2,c
  3103  001052  D005               	goto	l3294
  3104                           
  3105                           ; BSR set to: 0
  3106  001054  0E42               	movlw	66
  3107  001056  0100               	movlb	0	; () banked
  3108  001058  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3109  00105A  A4D8               	btfss	status,2,c
  3110  00105C  D007               	goto	l3298
  3111  00105E                     l3294:
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;iut_lcd.c: 594: prefix_cnt = 2;
  3115  00105E  0E02               	movlw	2
  3116  001060  0100               	movlb	0	; () banked
  3117  001062  6F8C               	movwf	lcd_printf@prefix_cnt& (0+255),b
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;iut_lcd.c: 595: }
  3121                           ;iut_lcd.c: 596: } else
  3122                           
  3123                           ; BSR set to: 0
  3124                           
  3125                           ; BSR set to: 0
  3126  001064  D003               	goto	l3298
  3127  001066                     l3296:
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;iut_lcd.c: 597: digit_cnt = 0;
  3131  001066  0E00               	movlw	0
  3132  001068  0100               	movlb	0	; () banked
  3133  00106A  6F8F               	movwf	lcd_printf@digit_cnt& (0+255),b
  3134  00106C                     l3298:
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;iut_lcd.c: 608: if ((flags & 0x10) && (width > precision)
  3138                           ;iut_lcd.c: 609: && !have_precision)
  3139  00106C  0100               	movlb	0	; () banked
  3140  00106E  A99F               	btfss	lcd_printf@flags& (0+255),4,b
  3141  001070  D00C               	goto	l3306
  3142                           
  3143                           ; BSR set to: 0
  3144  001072  0100               	movlb	0	; () banked
  3145  001074  51A1               	movf	lcd_printf@width& (0+255),w,b
  3146  001076  0100               	movlb	0	; () banked
  3147  001078  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  3148  00107A  B0D8               	btfsc	status,0,c
  3149  00107C  D006               	goto	l3306
  3150                           
  3151                           ; BSR set to: 0
  3152  00107E  0100               	movlb	0	; () banked
  3153  001080  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  3154  001082  0100               	movlb	0	; () banked
  3155  001084  B4D8               	btfsc	status,2,c
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;iut_lcd.c: 610: precision = width;
  3159  001086  C0A1  F0A0         	movff	lcd_printf@width,lcd_printf@precision
  3160  00108A                     l3306:
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;iut_lcd.c: 613: if (precision > digit_cnt)
  3164  00108A  0100               	movlb	0	; () banked
  3165  00108C  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3166  00108E  0100               	movlb	0	; () banked
  3167  001090  5D8F               	subwf	lcd_printf@digit_cnt& (0+255),w,b
  3168  001092  B0D8               	btfsc	status,0,c
  3169  001094  D005               	goto	l3310
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;iut_lcd.c: 614: precision -= digit_cnt;
  3173  001096  0100               	movlb	0	; () banked
  3174  001098  518F               	movf	lcd_printf@digit_cnt& (0+255),w,b
  3175  00109A  0100               	movlb	0	; () banked
  3176  00109C  5FA0               	subwf	lcd_printf@precision& (0+255),f,b
  3177  00109E  D003               	goto	l3312
  3178  0010A0                     l3310:
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;iut_lcd.c: 615: else
  3182                           ;iut_lcd.c: 616: precision = 0;
  3183  0010A0  0E00               	movlw	0
  3184  0010A2  0100               	movlb	0	; () banked
  3185  0010A4  6FA0               	movwf	lcd_printf@precision& (0+255),b
  3186  0010A6                     l3312:
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;iut_lcd.c: 622: if (width > precision + digit_cnt + prefix_cnt)
  3190  0010A6  0100               	movlb	0	; () banked
  3191  0010A8  51A1               	movf	lcd_printf@width& (0+255),w,b
  3192  0010AA  6E44               	movwf	??_lcd_printf& (0+255),c
  3193  0010AC  6A45               	clrf	(??_lcd_printf+1)& (0+255),c
  3194  0010AE  0100               	movlb	0	; () banked
  3195  0010B0  518F               	movf	lcd_printf@digit_cnt& (0+255),w,b
  3196  0010B2  C0A0  F046         	movff	lcd_printf@precision,??_lcd_printf+2
  3197  0010B6  6A47               	clrf	(??_lcd_printf+3)& (0+255),c
  3198  0010B8  2646               	addwf	??_lcd_printf+2,f,c
  3199  0010BA  0E00               	movlw	0
  3200  0010BC  2247               	addwfc	??_lcd_printf+3,f,c
  3201  0010BE  0100               	movlb	0	; () banked
  3202  0010C0  518C               	movf	lcd_printf@prefix_cnt& (0+255),w,b
  3203  0010C2  2646               	addwf	??_lcd_printf+2,f,c
  3204  0010C4  0E00               	movlw	0
  3205  0010C6  2247               	addwfc	??_lcd_printf+3,f,c
  3206  0010C8  5044               	movf	??_lcd_printf,w,c
  3207  0010CA  5C46               	subwf	??_lcd_printf+2,w,c
  3208  0010CC  5047               	movf	??_lcd_printf+3,w,c
  3209  0010CE  0A80               	xorlw	128
  3210  0010D0  6E48               	movwf	(??_lcd_printf+4)& (0+255),c
  3211  0010D2  5045               	movf	??_lcd_printf+1,w,c
  3212  0010D4  0A80               	xorlw	128
  3213  0010D6  5848               	subwfb	(??_lcd_printf+4)& (0+255),w,c
  3214  0010D8  B0D8               	btfsc	status,0,c
  3215  0010DA  D00B               	goto	l3316
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;iut_lcd.c: 623: space_cnt =
  3219                           ;iut_lcd.c: 624: width - precision - digit_cnt - prefix_cnt;
  3220  0010DC  0100               	movlb	0	; () banked
  3221  0010DE  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3222  0010E0  0100               	movlb	0	; () banked
  3223  0010E2  258F               	addwf	lcd_printf@digit_cnt& (0+255),w,b
  3224  0010E4  0100               	movlb	0	; () banked
  3225  0010E6  258C               	addwf	lcd_printf@prefix_cnt& (0+255),w,b
  3226  0010E8  0800               	sublw	0
  3227  0010EA  0100               	movlb	0	; () banked
  3228  0010EC  25A1               	addwf	lcd_printf@width& (0+255),w,b
  3229  0010EE  0100               	movlb	0	; () banked
  3230  0010F0  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  3231  0010F2                     l3316:
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;iut_lcd.c: 629: if (!(flags & 0x1) && space_cnt) {
  3235  0010F2  0100               	movlb	0	; () banked
  3236  0010F4  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  3237  0010F6  D00E               	goto	l3324
  3238                           
  3239                           ; BSR set to: 0
  3240  0010F8  0100               	movlb	0	; () banked
  3241  0010FA  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  3242  0010FC  0100               	movlb	0	; () banked
  3243  0010FE  B4D8               	btfsc	status,2,c
  3244  001100  D009               	goto	l3324
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;iut_lcd.c: 630: lcd_repete_n(space_cnt, ' ');
  3248  001102  0E20               	movlw	32
  3249  001104  6E03               	movwf	lcd_repete_n@c,c
  3250  001106  0100               	movlb	0	; () banked
  3251  001108  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  3252  00110A  ECB4  F011         	call	_lcd_repete_n
  3253                           
  3254                           ;iut_lcd.c: 632: space_cnt = 0;
  3255  00110E  0E00               	movlw	0
  3256  001110  0100               	movlb	0	; () banked
  3257  001112  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  3258  001114                     l3324:
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;iut_lcd.c: 633: }
  3262                           ;iut_lcd.c: 636: if (sign_char) {
  3263  001114  0100               	movlb	0	; () banked
  3264  001116  5183               	movf	lcd_printf@sign_char& (0+255),w,b
  3265  001118  0100               	movlb	0	; () banked
  3266  00111A  B4D8               	btfsc	status,2,c
  3267  00111C  D004               	goto	l3328
  3268                           
  3269                           ; BSR set to: 0
  3270                           ;iut_lcd.c: 637: lcd_write_data_busy(sign_char);
  3271  00111E  0100               	movlb	0	; () banked
  3272  001120  5183               	movf	lcd_printf@sign_char& (0+255),w,b
  3273  001122  EC9E  F011         	call	_lcd_write_data_busy
  3274  001126                     l3328:
  3275                           
  3276                           ;iut_lcd.c: 638: }
  3277                           ;iut_lcd.c: 640: if (prefix_cnt) {
  3278  001126  0100               	movlb	0	; () banked
  3279  001128  518C               	movf	lcd_printf@prefix_cnt& (0+255),w,b
  3280  00112A  0100               	movlb	0	; () banked
  3281  00112C  B4D8               	btfsc	status,2,c
  3282  00112E  D007               	goto	l3332
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;iut_lcd.c: 641: lcd_write_data_busy('0');
  3286  001130  0E30               	movlw	48
  3287  001132  EC9E  F011         	call	_lcd_write_data_busy
  3288                           
  3289                           ;iut_lcd.c: 642: lcd_write_data_busy(c);
  3290  001136  0100               	movlb	0	; () banked
  3291  001138  51A2               	movf	lcd_printf@c& (0+255),w,b
  3292  00113A  EC9E  F011         	call	_lcd_write_data_busy
  3293  00113E                     l3332:
  3294                           
  3295                           ;iut_lcd.c: 643: }
  3296                           ;iut_lcd.c: 647: if (precision > prefix_cnt)
  3297  00113E  0100               	movlb	0	; () banked
  3298  001140  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3299  001142  0100               	movlb	0	; () banked
  3300  001144  5D8C               	subwf	lcd_printf@prefix_cnt& (0+255),w,b
  3301  001146  B0D8               	btfsc	status,0,c
  3302  001148  D004               	goto	l3336
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;iut_lcd.c: 648: precision -= prefix_cnt;
  3306  00114A  0100               	movlb	0	; () banked
  3307  00114C  518C               	movf	lcd_printf@prefix_cnt& (0+255),w,b
  3308  00114E  0100               	movlb	0	; () banked
  3309  001150  5FA0               	subwf	lcd_printf@precision& (0+255),f,b
  3310  001152                     l3336:
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;iut_lcd.c: 649: lcd_repete_n(precision, '0');
  3314  001152  0E30               	movlw	48
  3315  001154  6E03               	movwf	lcd_repete_n@c,c
  3316  001156  0100               	movlb	0	; () banked
  3317  001158  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3318  00115A  ECB4  F011         	call	_lcd_repete_n
  3319  00115E  D004               	goto	l3342
  3320  001160                     l3340:
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;iut_lcd.c: 652: lcd_write_data_busy(cval);
  3324  001160  0100               	movlb	0	; () banked
  3325  001162  519A               	movf	lcd_printf@cval& (0+255),w,b
  3326  001164  EC9E  F011         	call	_lcd_write_data_busy
  3327  001168                     l3342:
  3328  001168  0100               	movlb	0	; () banked
  3329  00116A  4B86               	infsnz	lcd_printf@q& (0+255),f,b
  3330  00116C  2B87               	incf	(lcd_printf@q+1)& (0+255),f,b
  3331  00116E  C086  FFD9         	movff	lcd_printf@q,fsr2l
  3332  001172  C087  FFDA         	movff	lcd_printf@q+1,fsr2h
  3333  001176  50DF               	movf	indf2,w,c
  3334  001178  0100               	movlb	0	; () banked
  3335  00117A  6F9A               	movwf	lcd_printf@cval& (0+255),b
  3336                           
  3337                           ; BSR set to: 0
  3338                           
  3339                           ; BSR set to: 0
  3340  00117C  0100               	movlb	0	; () banked
  3341  00117E  519A               	movf	lcd_printf@cval& (0+255),w,b
  3342  001180  0100               	movlb	0	; () banked
  3343  001182  A4D8               	btfss	status,2,c
  3344  001184  D7ED               	goto	l3340
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;iut_lcd.c: 653: }
  3348                           ;iut_lcd.c: 656: lcd_repete_n(space_cnt, ' ');
  3349                           
  3350                           ; BSR set to: 0
  3351  001186  0E20               	movlw	32
  3352  001188  6E03               	movwf	lcd_repete_n@c,c
  3353  00118A  0100               	movlb	0	; () banked
  3354  00118C  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  3355  00118E  ECB4  F011         	call	_lcd_repete_n
  3356                           
  3357                           ;iut_lcd.c: 659: }
  3358                           ;iut_lcd.c: 660: break;
  3359  001192  D1F7               	goto	l3470
  3360  001194                     l3348:
  3361                           
  3362                           ;iut_lcd.c: 662: {
  3363                           ;iut_lcd.c: 663: float x;
  3364                           ;iut_lcd.c: 664: unsigned char i, w;
  3365                           ;iut_lcd.c: 665: unsigned int k;
  3366                           ;iut_lcd.c: 666: unsigned char sign, have_sign = 0;
  3367  001194  0E00               	movlw	0
  3368  001196  0100               	movlb	0	; () banked
  3369  001198  6F8B               	movwf	lcd_printf@have_sign& (0+255),b
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;iut_lcd.c: 667: x = (*(float *)__va_arg((*(float **)ap), (float)0));
  3373  00119A  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  3374  00119E  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  3375  0011A2  CFDE F096          	movff	postinc2,lcd_printf@x
  3376  0011A6  CFDE F097          	movff	postinc2,lcd_printf@x+1
  3377  0011AA  CFDD F098          	movff	postdec2,lcd_printf@x+2
  3378                           
  3379                           ; BSR set to: 0
  3380  0011AE  0E03               	movlw	3
  3381  0011B0  0100               	movlb	0	; () banked
  3382  0011B2  279D               	addwf	lcd_printf@ap& (0+255),f,b
  3383  0011B4  0E00               	movlw	0
  3384  0011B6  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;iut_lcd.c: 668: if (x < 0.0) {
  3388  0011B8  0100               	movlb	0	; () banked
  3389  0011BA  AF98               	btfss	(lcd_printf@x+2)& (0+255),7,b
  3390  0011BC  D012               	goto	l274
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;iut_lcd.c: 669: sign = '-';
  3394  0011BE  0E2D               	movlw	45
  3395  0011C0  0100               	movlb	0	; () banked
  3396  0011C2  6F88               	movwf	lcd_printf@sign& (0+255),b
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;iut_lcd.c: 670: x = -x;
  3400  0011C4  C096  F00D         	movff	lcd_printf@x,___ftneg@f1
  3401  0011C8  C097  F00E         	movff	lcd_printf@x+1,___ftneg@f1+1
  3402  0011CC  C098  F00F         	movff	lcd_printf@x+2,___ftneg@f1+2
  3403  0011D0  EC7D  F011         	call	___ftneg	;wreg free
  3404  0011D4  C00D  F096         	movff	?___ftneg,lcd_printf@x
  3405  0011D8  C00E  F097         	movff	?___ftneg+1,lcd_printf@x+1
  3406  0011DC  C00F  F098         	movff	?___ftneg+2,lcd_printf@x+2
  3407  0011E0  D005               	goto	L11
  3408  0011E2                     l274:
  3409                           
  3410                           ; BSR set to: 0
  3411                           ;iut_lcd.c: 673: if (flags & 0x2) {
  3412  0011E2  0100               	movlb	0	; () banked
  3413  0011E4  A39F               	btfss	lcd_printf@flags& (0+255),1,b
  3414  0011E6  D006               	goto	l276
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;iut_lcd.c: 674: sign = '+';
  3418  0011E8  0E2B               	movlw	43
  3419  0011EA  D008               	goto	L12
  3420  0011EC                     L11:
  3421                           
  3422                           ;iut_lcd.c: 675: have_sign = 1;
  3423  0011EC  0E01               	movlw	1
  3424  0011EE  0100               	movlb	0	; () banked
  3425  0011F0  6F8B               	movwf	lcd_printf@have_sign& (0+255),b
  3426                           
  3427                           ;iut_lcd.c: 676: } else if (flags & 0x4) {
  3428  0011F2  D007               	goto	l275
  3429  0011F4                     l276:
  3430                           
  3431                           ; BSR set to: 0
  3432  0011F4  0100               	movlb	0	; () banked
  3433  0011F6  A59F               	btfss	lcd_printf@flags& (0+255),2,b
  3434  0011F8  D004               	goto	l275
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;iut_lcd.c: 677: sign = ' ';
  3438  0011FA  0E20               	movlw	32
  3439  0011FC                     L12:
  3440  0011FC  0100               	movlb	0	; () banked
  3441  0011FE  6F88               	movwf	lcd_printf@sign& (0+255),b
  3442  001200  D7F5               	goto	L11
  3443  001202                     l275:
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;iut_lcd.c: 679: }
  3447                           ;iut_lcd.c: 680: }
  3448                           ;iut_lcd.c: 681: for (i = 0; x >= 1; i++) x /= 10;
  3449  001202  0E00               	movlw	0
  3450  001204  0100               	movlb	0	; () banked
  3451  001206  6F8D               	movwf	lcd_printf@i& (0+255),b
  3452                           
  3453                           ; BSR set to: 0
  3454  001208  C096  F001         	movff	lcd_printf@x,___ftge@ff1
  3455  00120C  C097  F002         	movff	lcd_printf@x+1,___ftge@ff1+1
  3456  001210  C098  F003         	movff	lcd_printf@x+2,___ftge@ff1+2
  3457  001214  0E00               	movlw	0
  3458  001216  6E04               	movwf	___ftge@ff2,c
  3459  001218  0E80               	movlw	128
  3460  00121A  6E05               	movwf	___ftge@ff2+1,c
  3461  00121C  0E3F               	movlw	63
  3462  00121E  6E06               	movwf	___ftge@ff2+2,c
  3463  001220  ECDF  F00F         	call	___ftge	;wreg free
  3464  001224  A0D8               	btfss	status,0,c
  3465  001226  D025               	goto	l3376
  3466  001228  C096  F01C         	movff	lcd_printf@x,___ftdiv@f1
  3467  00122C  C097  F01D         	movff	lcd_printf@x+1,___ftdiv@f1+1
  3468  001230  C098  F01E         	movff	lcd_printf@x+2,___ftdiv@f1+2
  3469  001234  0E00               	movlw	0
  3470  001236  6E1F               	movwf	___ftdiv@f2,c
  3471  001238  0E20               	movlw	32
  3472  00123A  6E20               	movwf	___ftdiv@f2+1,c
  3473  00123C  0E41               	movlw	65
  3474  00123E  6E21               	movwf	___ftdiv@f2+2,c
  3475  001240  EC76  F00E         	call	___ftdiv	;wreg free
  3476  001244  C01C  F096         	movff	?___ftdiv,lcd_printf@x
  3477  001248  C01D  F097         	movff	?___ftdiv+1,lcd_printf@x+1
  3478  00124C  C01E  F098         	movff	?___ftdiv+2,lcd_printf@x+2
  3479  001250  0100               	movlb	0	; () banked
  3480  001252  2B8D               	incf	lcd_printf@i& (0+255),f,b
  3481                           
  3482                           ; BSR set to: 0
  3483  001254  C096  F001         	movff	lcd_printf@x,___ftge@ff1
  3484  001258  C097  F002         	movff	lcd_printf@x+1,___ftge@ff1+1
  3485  00125C  C098  F003         	movff	lcd_printf@x+2,___ftge@ff1+2
  3486  001260  0E00               	movlw	0
  3487  001262  6E04               	movwf	___ftge@ff2,c
  3488  001264  0E80               	movlw	128
  3489  001266  6E05               	movwf	___ftge@ff2+1,c
  3490  001268  0E3F               	movlw	63
  3491  00126A  6E06               	movwf	___ftge@ff2+2,c
  3492  00126C  ECDF  F00F         	call	___ftge	;wreg free
  3493  001270  D7D9               	goto	L13
  3494  001272                     l3376:
  3495                           
  3496                           ;iut_lcd.c: 682: if ((!have_precision) && (width == 0)) {
  3497  001272  0100               	movlb	0	; () banked
  3498  001274  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  3499  001276  0100               	movlb	0	; () banked
  3500  001278  A4D8               	btfss	status,2,c
  3501  00127A  D00B               	goto	l3382
  3502                           
  3503                           ; BSR set to: 0
  3504  00127C  0100               	movlb	0	; () banked
  3505  00127E  51A1               	movf	lcd_printf@width& (0+255),w,b
  3506  001280  0100               	movlb	0	; () banked
  3507  001282  A4D8               	btfss	status,2,c
  3508  001284  D006               	goto	l3382
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;iut_lcd.c: 683: precision = 3;
  3512  001286  0E03               	movlw	3
  3513  001288  0100               	movlb	0	; () banked
  3514  00128A  6FA0               	movwf	lcd_printf@precision& (0+255),b
  3515                           
  3516                           ;iut_lcd.c: 684: have_precision = 1;
  3517  00128C  0E01               	movlw	1
  3518  00128E  0100               	movlb	0	; () banked
  3519  001290  6F95               	movwf	lcd_printf@have_precision& (0+255),b
  3520  001292                     l3382:
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;iut_lcd.c: 685: }
  3524                           ;iut_lcd.c: 686: w = precision + i;
  3525  001292  0100               	movlb	0	; () banked
  3526  001294  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3527  001296  0100               	movlb	0	; () banked
  3528  001298  258D               	addwf	lcd_printf@i& (0+255),w,b
  3529  00129A  0100               	movlb	0	; () banked
  3530  00129C  6F8E               	movwf	lcd_printf@w& (0+255),b
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;iut_lcd.c: 687: if (precision > 0) w++;
  3534  00129E  0100               	movlb	0	; () banked
  3535  0012A0  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3536  0012A2  0100               	movlb	0	; () banked
  3537  0012A4  B4D8               	btfsc	status,2,c
  3538  0012A6  D002               	goto	l3388
  3539                           
  3540                           ; BSR set to: 0
  3541  0012A8  0100               	movlb	0	; () banked
  3542  0012AA  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3543  0012AC                     l3388:
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;iut_lcd.c: 688: if (have_sign) w++;
  3547  0012AC  0100               	movlb	0	; () banked
  3548  0012AE  518B               	movf	lcd_printf@have_sign& (0+255),w,b
  3549  0012B0  0100               	movlb	0	; () banked
  3550  0012B2  B4D8               	btfsc	status,2,c
  3551  0012B4  D002               	goto	l3392
  3552                           
  3553                           ; BSR set to: 0
  3554  0012B6  0100               	movlb	0	; () banked
  3555  0012B8  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3556  0012BA                     l3392:
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;iut_lcd.c: 689: if (i == 0) w++;
  3560  0012BA  0100               	movlb	0	; () banked
  3561  0012BC  518D               	movf	lcd_printf@i& (0+255),w,b
  3562  0012BE  0100               	movlb	0	; () banked
  3563  0012C0  A4D8               	btfss	status,2,c
  3564  0012C2  D002               	goto	l3396
  3565                           
  3566                           ; BSR set to: 0
  3567  0012C4  0100               	movlb	0	; () banked
  3568  0012C6  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3569  0012C8                     l3396:
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;iut_lcd.c: 690: if (!have_precision) {
  3573  0012C8  0100               	movlb	0	; () banked
  3574  0012CA  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  3575  0012CC  0100               	movlb	0	; () banked
  3576  0012CE  A4D8               	btfss	status,2,c
  3577  0012D0  D01F               	goto	l3404
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;iut_lcd.c: 691: if (width > w + 1) {
  3581  0012D2  0100               	movlb	0	; () banked
  3582  0012D4  51A1               	movf	lcd_printf@width& (0+255),w,b
  3583  0012D6  6E44               	movwf	??_lcd_printf& (0+255),c
  3584  0012D8  6A45               	clrf	(??_lcd_printf+1)& (0+255),c
  3585  0012DA  0100               	movlb	0	; () banked
  3586  0012DC  518E               	movf	lcd_printf@w& (0+255),w,b
  3587  0012DE  6E46               	movwf	(??_lcd_printf+2)& (0+255),c
  3588  0012E0  6A47               	clrf	(??_lcd_printf+3)& (0+255),c
  3589  0012E2  0E01               	movlw	1
  3590  0012E4  2646               	addwf	??_lcd_printf+2,f,c
  3591  0012E6  0E00               	movlw	0
  3592  0012E8  2247               	addwfc	??_lcd_printf+3,f,c
  3593  0012EA  5044               	movf	??_lcd_printf,w,c
  3594  0012EC  5C46               	subwf	??_lcd_printf+2,w,c
  3595  0012EE  5047               	movf	??_lcd_printf+3,w,c
  3596  0012F0  0A80               	xorlw	128
  3597  0012F2  6E48               	movwf	(??_lcd_printf+4)& (0+255),c
  3598  0012F4  5045               	movf	??_lcd_printf+1,w,c
  3599  0012F6  0A80               	xorlw	128
  3600  0012F8  5848               	subwfb	(??_lcd_printf+4)& (0+255),w,c
  3601  0012FA  B0D8               	btfsc	status,0,c
  3602  0012FC  D009               	goto	l3404
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;iut_lcd.c: 692: precision = width - (w + 1);
  3606  0012FE  0100               	movlb	0	; () banked
  3607  001300  298E               	incf	lcd_printf@w& (0+255),w,b
  3608  001302  0800               	sublw	0
  3609  001304  0100               	movlb	0	; () banked
  3610  001306  25A1               	addwf	lcd_printf@width& (0+255),w,b
  3611  001308  0100               	movlb	0	; () banked
  3612  00130A  6FA0               	movwf	lcd_printf@precision& (0+255),b
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;iut_lcd.c: 693: w = width;
  3616  00130C  C0A1  F08E         	movff	lcd_printf@width,lcd_printf@w
  3617  001310                     l3404:
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;iut_lcd.c: 694: }
  3621                           ;iut_lcd.c: 695: }
  3622                           ;iut_lcd.c: 696: if (!(flags & 0x1)) {
  3623  001310  0100               	movlb	0	; () banked
  3624  001312  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  3625  001314  D02E               	goto	l3428
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;iut_lcd.c: 697: if (flags & 0x10) {
  3629  001316  0100               	movlb	0	; () banked
  3630  001318  A99F               	btfss	lcd_printf@flags& (0+255),4,b
  3631  00131A  D01B               	goto	l3422
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;iut_lcd.c: 698: if (have_sign) lcd_write_data_busy(sign);
  3635  00131C  0100               	movlb	0	; () banked
  3636  00131E  518B               	movf	lcd_printf@have_sign& (0+255),w,b
  3637  001320  0100               	movlb	0	; () banked
  3638  001322  B4D8               	btfsc	status,2,c
  3639  001324  D00A               	goto	l3416
  3640                           
  3641                           ; BSR set to: 0
  3642  001326  0100               	movlb	0	; () banked
  3643  001328  5188               	movf	lcd_printf@sign& (0+255),w,b
  3644  00132A  EC9E  F011         	call	_lcd_write_data_busy
  3645                           
  3646                           ;iut_lcd.c: 699: for (; width > w; w++) lcd_write_data_busy('0');
  3647  00132E  D005               	goto	l3416
  3648  001330                     l3412:
  3649  001330  0E30               	movlw	48
  3650  001332  EC9E  F011         	call	_lcd_write_data_busy
  3651  001336  0100               	movlb	0	; () banked
  3652  001338  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3653  00133A                     l3416:
  3654  00133A  0100               	movlb	0	; () banked
  3655  00133C  51A1               	movf	lcd_printf@width& (0+255),w,b
  3656  00133E  0100               	movlb	0	; () banked
  3657  001340  5D8E               	subwf	lcd_printf@w& (0+255),w,b
  3658  001342  B0D8               	btfsc	status,0,c
  3659  001344  D01F               	goto	l3432
  3660  001346  D7F4               	goto	l3412
  3661  001348                     l3418:
  3662                           
  3663                           ; BSR set to: 0
  3664  001348  0E20               	movlw	32
  3665  00134A  EC9E  F011         	call	_lcd_write_data_busy
  3666  00134E  0100               	movlb	0	; () banked
  3667  001350  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3668  001352                     l3422:
  3669                           
  3670                           ; BSR set to: 0
  3671  001352  0100               	movlb	0	; () banked
  3672  001354  51A1               	movf	lcd_printf@width& (0+255),w,b
  3673  001356  0100               	movlb	0	; () banked
  3674  001358  5D8E               	subwf	lcd_printf@w& (0+255),w,b
  3675  00135A  A0D8               	btfss	status,0,c
  3676  00135C  D7F5               	goto	l3418
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;iut_lcd.c: 702: if (have_sign) lcd_write_data_busy(sign);
  3680                           
  3681                           ; BSR set to: 0
  3682  00135E  0100               	movlb	0	; () banked
  3683  001360  518B               	movf	lcd_printf@have_sign& (0+255),w,b
  3684  001362  0100               	movlb	0	; () banked
  3685  001364  B4D8               	btfsc	status,2,c
  3686  001366  D00E               	goto	l3432
  3687                           
  3688                           ; BSR set to: 0
  3689  001368  0100               	movlb	0	; () banked
  3690  00136A  5188               	movf	lcd_printf@sign& (0+255),w,b
  3691  00136C  EC9E  F011         	call	_lcd_write_data_busy
  3692                           
  3693                           ;iut_lcd.c: 703: }
  3694                           ;iut_lcd.c: 704: } else {
  3695  001370  D009               	goto	l3432
  3696  001372                     l3428:
  3697                           
  3698                           ;iut_lcd.c: 705: if (have_sign) lcd_write_data_busy(sign);
  3699  001372  0100               	movlb	0	; () banked
  3700  001374  518B               	movf	lcd_printf@have_sign& (0+255),w,b
  3701  001376  0100               	movlb	0	; () banked
  3702  001378  B4D8               	btfsc	status,2,c
  3703  00137A  D004               	goto	l3432
  3704                           
  3705                           ; BSR set to: 0
  3706  00137C  0100               	movlb	0	; () banked
  3707  00137E  5188               	movf	lcd_printf@sign& (0+255),w,b
  3708  001380  EC9E  F011         	call	_lcd_write_data_busy
  3709  001384                     l3432:
  3710                           
  3711                           ;iut_lcd.c: 706: }
  3712                           ;iut_lcd.c: 707: if (i == 0) {
  3713  001384  0100               	movlb	0	; () banked
  3714  001386  518D               	movf	lcd_printf@i& (0+255),w,b
  3715  001388  0100               	movlb	0	; () banked
  3716  00138A  A4D8               	btfss	status,2,c
  3717  00138C  D003               	goto	l3436
  3718                           
  3719                           ; BSR set to: 0
  3720                           ;iut_lcd.c: 708: lcd_write_data_busy('0');
  3721  00138E  0E30               	movlw	48
  3722  001390  EC9E  F011         	call	_lcd_write_data_busy
  3723  001394                     l3436:
  3724                           
  3725                           ;iut_lcd.c: 709: }
  3726                           ;iut_lcd.c: 710: for (; i > 0; i--) {
  3727  001394  0100               	movlb	0	; () banked
  3728  001396  518D               	movf	lcd_printf@i& (0+255),w,b
  3729  001398  0100               	movlb	0	; () banked
  3730  00139A  B4D8               	btfsc	status,2,c
  3731  00139C  D04A               	goto	l3446
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;iut_lcd.c: 711: x *= 10;
  3735                           
  3736                           ; BSR set to: 0
  3737                           
  3738                           ; BSR set to: 0
  3739  00139E  C096  F02B         	movff	lcd_printf@x,___ftmul@f1
  3740  0013A2  C097  F02C         	movff	lcd_printf@x+1,___ftmul@f1+1
  3741  0013A6  C098  F02D         	movff	lcd_printf@x+2,___ftmul@f1+2
  3742  0013AA  0E00               	movlw	0
  3743  0013AC  6E2E               	movwf	___ftmul@f2,c
  3744  0013AE  0E20               	movlw	32
  3745  0013B0  6E2F               	movwf	___ftmul@f2+1,c
  3746  0013B2  0E41               	movlw	65
  3747  0013B4  6E30               	movwf	___ftmul@f2+2,c
  3748  0013B6  ECFC  F00D         	call	___ftmul	;wreg free
  3749  0013BA  C02B  F096         	movff	?___ftmul,lcd_printf@x
  3750  0013BE  C02C  F097         	movff	?___ftmul+1,lcd_printf@x+1
  3751  0013C2  C02D  F098         	movff	?___ftmul+2,lcd_printf@x+2
  3752                           
  3753                           ;iut_lcd.c: 712: k = (unsigned int)x;
  3754  0013C6  C096  F001         	movff	lcd_printf@x,___fttol@f1
  3755  0013CA  C097  F002         	movff	lcd_printf@x+1,___fttol@f1+1
  3756  0013CE  C098  F003         	movff	lcd_printf@x+2,___fttol@f1+2
  3757  0013D2  EC82  F00D         	call	___fttol	;wreg free
  3758  0013D6  C001  F089         	movff	?___fttol,lcd_printf@k
  3759  0013DA  C002  F08A         	movff	?___fttol+1,lcd_printf@k+1
  3760                           
  3761                           ;iut_lcd.c: 713: x = x - k;
  3762  0013DE  C089  F009         	movff	lcd_printf@k,___lwtoft@c
  3763  0013E2  C08A  F00A         	movff	lcd_printf@k+1,___lwtoft@c+1
  3764  0013E6  EC6B  F011         	call	___lwtoft	;wreg free
  3765  0013EA  C009  F00D         	movff	?___lwtoft,___ftneg@f1
  3766  0013EE  C00A  F00E         	movff	?___lwtoft+1,___ftneg@f1+1
  3767  0013F2  C00B  F00F         	movff	?___lwtoft+2,___ftneg@f1+2
  3768  0013F6  EC7D  F011         	call	___ftneg	;wreg free
  3769  0013FA  C00D  F010         	movff	?___ftneg,___ftadd@f1
  3770  0013FE  C00E  F011         	movff	?___ftneg+1,___ftadd@f1+1
  3771  001402  C00F  F012         	movff	?___ftneg+2,___ftadd@f1+2
  3772  001406  C096  F013         	movff	lcd_printf@x,___ftadd@f2
  3773  00140A  C097  F014         	movff	lcd_printf@x+1,___ftadd@f2+1
  3774  00140E  C098  F015         	movff	lcd_printf@x+2,___ftadd@f2+2
  3775  001412  ECAC  F00C         	call	___ftadd	;wreg free
  3776  001416  C010  F096         	movff	?___ftadd,lcd_printf@x
  3777  00141A  C011  F097         	movff	?___ftadd+1,lcd_printf@x+1
  3778  00141E  C012  F098         	movff	?___ftadd+2,lcd_printf@x+2
  3779                           
  3780                           ;iut_lcd.c: 714: lcd_write_data_busy(k + '0');
  3781  001422  0100               	movlb	0	; () banked
  3782  001424  5189               	movf	lcd_printf@k& (0+255),w,b
  3783  001426  0F30               	addlw	48
  3784  001428  EC9E  F011         	call	_lcd_write_data_busy
  3785  00142C  0100               	movlb	0	; () banked
  3786  00142E  078D               	decf	lcd_printf@i& (0+255),f,b
  3787  001430  D7B1               	goto	l3436
  3788  001432                     l3446:
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;iut_lcd.c: 715: }
  3792                           ;iut_lcd.c: 716: if (precision > 0) lcd_write_data_busy('.');
  3793  001432  0100               	movlb	0	; () banked
  3794  001434  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3795  001436  0100               	movlb	0	; () banked
  3796  001438  B4D8               	btfsc	status,2,c
  3797  00143A  D04D               	goto	l3454
  3798                           
  3799                           ; BSR set to: 0
  3800  00143C  0E2E               	movlw	46
  3801  00143E  EC9E  F011         	call	_lcd_write_data_busy
  3802                           
  3803                           ;iut_lcd.c: 717: for (; i < precision; i++) {
  3804  001442  D049               	goto	l3454
  3805  001444                     l3450:
  3806                           
  3807                           ;iut_lcd.c: 718: x *= 10;
  3808  001444  C096  F02B         	movff	lcd_printf@x,___ftmul@f1
  3809  001448  C097  F02C         	movff	lcd_printf@x+1,___ftmul@f1+1
  3810  00144C  C098  F02D         	movff	lcd_printf@x+2,___ftmul@f1+2
  3811  001450  0E00               	movlw	0
  3812  001452  6E2E               	movwf	___ftmul@f2,c
  3813  001454  0E20               	movlw	32
  3814  001456  6E2F               	movwf	___ftmul@f2+1,c
  3815  001458  0E41               	movlw	65
  3816  00145A  6E30               	movwf	___ftmul@f2+2,c
  3817  00145C  ECFC  F00D         	call	___ftmul	;wreg free
  3818  001460  C02B  F096         	movff	?___ftmul,lcd_printf@x
  3819  001464  C02C  F097         	movff	?___ftmul+1,lcd_printf@x+1
  3820  001468  C02D  F098         	movff	?___ftmul+2,lcd_printf@x+2
  3821                           
  3822                           ;iut_lcd.c: 719: k = (unsigned int)x;
  3823  00146C  C096  F001         	movff	lcd_printf@x,___fttol@f1
  3824  001470  C097  F002         	movff	lcd_printf@x+1,___fttol@f1+1
  3825  001474  C098  F003         	movff	lcd_printf@x+2,___fttol@f1+2
  3826  001478  EC82  F00D         	call	___fttol	;wreg free
  3827  00147C  C001  F089         	movff	?___fttol,lcd_printf@k
  3828  001480  C002  F08A         	movff	?___fttol+1,lcd_printf@k+1
  3829                           
  3830                           ;iut_lcd.c: 720: x = x - k;
  3831  001484  C089  F009         	movff	lcd_printf@k,___lwtoft@c
  3832  001488  C08A  F00A         	movff	lcd_printf@k+1,___lwtoft@c+1
  3833  00148C  EC6B  F011         	call	___lwtoft	;wreg free
  3834  001490  C009  F00D         	movff	?___lwtoft,___ftneg@f1
  3835  001494  C00A  F00E         	movff	?___lwtoft+1,___ftneg@f1+1
  3836  001498  C00B  F00F         	movff	?___lwtoft+2,___ftneg@f1+2
  3837  00149C  EC7D  F011         	call	___ftneg	;wreg free
  3838  0014A0  C00D  F010         	movff	?___ftneg,___ftadd@f1
  3839  0014A4  C00E  F011         	movff	?___ftneg+1,___ftadd@f1+1
  3840  0014A8  C00F  F012         	movff	?___ftneg+2,___ftadd@f1+2
  3841  0014AC  C096  F013         	movff	lcd_printf@x,___ftadd@f2
  3842  0014B0  C097  F014         	movff	lcd_printf@x+1,___ftadd@f2+1
  3843  0014B4  C098  F015         	movff	lcd_printf@x+2,___ftadd@f2+2
  3844  0014B8  ECAC  F00C         	call	___ftadd	;wreg free
  3845  0014BC  C010  F096         	movff	?___ftadd,lcd_printf@x
  3846  0014C0  C011  F097         	movff	?___ftadd+1,lcd_printf@x+1
  3847  0014C4  C012  F098         	movff	?___ftadd+2,lcd_printf@x+2
  3848                           
  3849                           ;iut_lcd.c: 721: lcd_write_data_busy(k + '0');
  3850  0014C8  0100               	movlb	0	; () banked
  3851  0014CA  5189               	movf	lcd_printf@k& (0+255),w,b
  3852  0014CC  0F30               	addlw	48
  3853  0014CE  EC9E  F011         	call	_lcd_write_data_busy
  3854  0014D2  0100               	movlb	0	; () banked
  3855  0014D4  2B8D               	incf	lcd_printf@i& (0+255),f,b
  3856  0014D6                     l3454:
  3857  0014D6  0100               	movlb	0	; () banked
  3858  0014D8  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3859  0014DA  0100               	movlb	0	; () banked
  3860  0014DC  5D8D               	subwf	lcd_printf@i& (0+255),w,b
  3861  0014DE  A0D8               	btfss	status,0,c
  3862  0014E0  D7B1               	goto	l3450
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;iut_lcd.c: 722: }
  3866                           ;iut_lcd.c: 723: if (flags & 0x1) {
  3867  0014E2  0100               	movlb	0	; () banked
  3868  0014E4  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  3869  0014E6  D006               	goto	l3462
  3870  0014E8  D04C               	goto	l3470
  3871  0014EA                     l3458:
  3872                           
  3873                           ; BSR set to: 0
  3874  0014EA  0E20               	movlw	32
  3875  0014EC  EC9E  F011         	call	_lcd_write_data_busy
  3876  0014F0  0100               	movlb	0	; () banked
  3877  0014F2  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3878  0014F4                     l3462:
  3879                           
  3880                           ; BSR set to: 0
  3881  0014F4  0100               	movlb	0	; () banked
  3882  0014F6  51A1               	movf	lcd_printf@width& (0+255),w,b
  3883  0014F8  0100               	movlb	0	; () banked
  3884  0014FA  5D8E               	subwf	lcd_printf@w& (0+255),w,b
  3885  0014FC  B0D8               	btfsc	status,0,c
  3886  0014FE  D041               	goto	l3470
  3887  001500  D7F4               	goto	l3458
  3888  001502                     l3466:
  3889                           
  3890                           ; BSR set to: 0
  3891  001502  0100               	movlb	0	; () banked
  3892  001504  51A2               	movf	lcd_printf@c& (0+255),w,b
  3893                           
  3894                           ; Switch size 1, requested type "space"
  3895                           ; Number of cases is 16, Range of values is 0 to 120
  3896                           ; switch strategies available:
  3897                           ; Name         Instructions Cycles
  3898                           ; simple_byte           49    25 (average)
  3899                           ;	Chosen strategy is simple_byte
  3900  001506  0A00               	xorlw	0	; case 0
  3901  001508  B4D8               	btfsc	status,2,c
  3902  00150A  EF65  F005         	goto	l3044
  3903  00150E  0A25               	xorlw	37	; case 37
  3904  001510  B4D8               	btfsc	status,2,c
  3905  001512  EF68  F005         	goto	l3046
  3906  001516  0A67               	xorlw	103	; case 66
  3907  001518  B4D8               	btfsc	status,2,c
  3908  00151A  D41B               	goto	l3174
  3909  00151C  0A12               	xorlw	18	; case 80
  3910  00151E  B4D8               	btfsc	status,2,c
  3911  001520  D450               	goto	l3194
  3912  001522  0A03               	xorlw	3	; case 83
  3913  001524  B4D8               	btfsc	status,2,c
  3914  001526  EFA1  F005         	goto	l3070
  3915  00152A  0A0B               	xorlw	11	; case 88
  3916  00152C  B4D8               	btfsc	status,2,c
  3917  00152E  D411               	goto	l3174
  3918  001530  0A3A               	xorlw	58	; case 98
  3919  001532  B4D8               	btfsc	status,2,c
  3920  001534  D40E               	goto	l3174
  3921  001536  0A01               	xorlw	1	; case 99
  3922  001538  B4D8               	btfsc	status,2,c
  3923  00153A  EF6D  F005         	goto	l3048
  3924  00153E  0A07               	xorlw	7	; case 100
  3925  001540  B4D8               	btfsc	status,2,c
  3926  001542  D405               	goto	l3172
  3927  001544  0A02               	xorlw	2	; case 102
  3928  001546  B4D8               	btfsc	status,2,c
  3929  001548  D625               	goto	l3348
  3930  00154A  0A0F               	xorlw	15	; case 105
  3931  00154C  B4D8               	btfsc	status,2,c
  3932  00154E  EFA7  F006         	goto	l3172
  3933  001552  0A06               	xorlw	6	; case 111
  3934  001554  B4D8               	btfsc	status,2,c
  3935  001556  EFA9  F006         	goto	l3174
  3936  00155A  0A1F               	xorlw	31	; case 112
  3937  00155C  B4D8               	btfsc	status,2,c
  3938  00155E  D431               	goto	l3194
  3939  001560  0A03               	xorlw	3	; case 115
  3940  001562  B4D8               	btfsc	status,2,c
  3941  001564  EF28  F006         	goto	l3124
  3942  001568  0A06               	xorlw	6	; case 117
  3943  00156A  B4D8               	btfsc	status,2,c
  3944  00156C  EFA9  F006         	goto	l3174
  3945  001570  0A0D               	xorlw	13	; case 120
  3946  001572  B4D8               	btfsc	status,2,c
  3947  001574  EFA9  F006         	goto	l3174
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;iut_lcd.c: 732: } else {
  3951  001578  D004               	goto	l3470
  3952  00157A                     l3468:
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;iut_lcd.c: 733: lcd_putc(c);
  3956  00157A  0100               	movlb	0	; () banked
  3957  00157C  51A2               	movf	lcd_printf@c& (0+255),w,b
  3958  00157E  EC9B  F010         	call	_lcd_putc
  3959  001582                     l3470:
  3960  001582  4A3A               	infsnz	lcd_printf@f,f,c
  3961  001584  2A3B               	incf	lcd_printf@f+1,f,c
  3962  001586                     L3:
  3963  001586  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  3964  00158A  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  3965  00158E                     	if	0	;tblptru may be non-zero
  3966  00158E                     	endif
  3967  00158E                     	if	0	;tblptru may be non-zero
  3968  00158E                     	endif
  3969  00158E  0008               	tblrd		*
  3970  001590  CFF5 F0A2          	movff	tablat,lcd_printf@c
  3971  001594  0100               	movlb	0	; () banked
  3972  001596  51A2               	movf	lcd_printf@c& (0+255),w,b
  3973  001598  0100               	movlb	0	; () banked
  3974  00159A  B4D8               	btfsc	status,2,c
  3975  00159C  0012               	return	
  3976  00159E  EF1F  F004         	goto	l2922
  3977  0015A2                     __end_of_lcd_printf:
  3978                           	opt stack 0
  3979                           tblptru	equ	0xFF8
  3980                           tblptrh	equ	0xFF7
  3981                           tblptrl	equ	0xFF6
  3982                           tablat	equ	0xFF5
  3983                           prodl	equ	0xFF3
  3984                           indf2	equ	0xFDF
  3985                           postinc2	equ	0xFDE
  3986                           postdec2	equ	0xFDD
  3987                           fsr2h	equ	0xFDA
  3988                           fsr2l	equ	0xFD9
  3989                           status	equ	0xFD8
  3990                           
  3991 ;; *************** function _lcd_repete_n *****************
  3992 ;; Defined at:
  3993 ;;		line 798 in file "iut_lcd.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;  n               1    wreg     unsigned char 
  3996 ;;  c               1    2[COMRAM] unsigned char 
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;  n               1    3[COMRAM] unsigned char 
  3999 ;; Return value:  Size  Location     Type
  4000 ;;                  1    wreg      void 
  4001 ;; Registers used:
  4002 ;;		wreg, status,2, status,0, cstack
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4008 ;;      Params:         1       0       0       0       0       0       0       0       0
  4009 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4010 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4011 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4012 ;;Total ram usage:        2 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    3
  4015 ;; This function calls:
  4016 ;;		_lcd_write_data_busy
  4017 ;; This function is called by:
  4018 ;;		_lcd_printf
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           	psect	text5
  4023  002368                     __ptext5:
  4024                           	opt stack 0
  4025  002368                     _lcd_repete_n:
  4026                           	opt stack 26
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;incstack = 0
  4030                           ;lcd_repete_n@n stored from wreg
  4031  002368  6E04               	movwf	lcd_repete_n@n,c
  4032                           
  4033                           ;iut_lcd.c: 799: while (n--) lcd_write_data_busy(c);
  4034  00236A  D003               	goto	l2508
  4035  00236C                     l2506:
  4036  00236C  5003               	movf	lcd_repete_n@c,w,c
  4037  00236E  EC9E  F011         	call	_lcd_write_data_busy
  4038  002372                     l2508:
  4039  002372  0604               	decf	lcd_repete_n@n,f,c
  4040  002374  2804               	incf	lcd_repete_n@n,w,c
  4041  002376  B4D8               	btfsc	status,2,c
  4042  002378  0012               	return	
  4043  00237A  D7F8               	goto	l2506
  4044  00237C                     __end_of_lcd_repete_n:
  4045                           	opt stack 0
  4046                           tblptru	equ	0xFF8
  4047                           tblptrh	equ	0xFF7
  4048                           tblptrl	equ	0xFF6
  4049                           tablat	equ	0xFF5
  4050                           prodl	equ	0xFF3
  4051                           indf2	equ	0xFDF
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           fsr2h	equ	0xFDA
  4055                           fsr2l	equ	0xFD9
  4056                           status	equ	0xFD8
  4057                           
  4058 ;; *************** function _lcd_putc *****************
  4059 ;; Defined at:
  4060 ;;		line 180 in file "iut_lcd.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  lettre          1    wreg     unsigned char 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  lettre          1    5[COMRAM] unsigned char 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      void 
  4067 ;; Registers used:
  4068 ;;		wreg, status,2, status,0, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4074 ;;      Params:         0       0       0       0       0       0       0       0       0
  4075 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4076 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4077 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4078 ;;Total ram usage:        1 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    4
  4081 ;; This function calls:
  4082 ;;		_lcd_position
  4083 ;;		_lcd_write_cmd_busy
  4084 ;;		_lcd_write_data_busy
  4085 ;; This function is called by:
  4086 ;;		_lcd_printf
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           	psect	text6
  4091  002136                     __ptext6:
  4092                           	opt stack 0
  4093  002136                     _lcd_putc:
  4094                           	opt stack 25
  4095                           
  4096                           ;incstack = 0
  4097                           ;lcd_putc@lettre stored from wreg
  4098  002136  6E06               	movwf	lcd_putc@lettre,c
  4099                           
  4100                           ;iut_lcd.c: 181: if (lettre >= 0x20) {
  4101  002138  0E1F               	movlw	31
  4102  00213A  6406               	cpfsgt	lcd_putc@lettre,c
  4103  00213C  D004               	goto	l2490
  4104                           
  4105                           ;iut_lcd.c: 182: lcd_write_data_busy(lettre);
  4106  00213E  5006               	movf	lcd_putc@lettre,w,c
  4107  002140  EC9E  F011         	call	_lcd_write_data_busy
  4108                           
  4109                           ;iut_lcd.c: 183: } else if (lettre == '\f') {
  4110  002144  0012               	return	
  4111  002146                     l2490:
  4112  002146  0E0C               	movlw	12
  4113  002148  1806               	xorwf	lcd_putc@lettre,w,c
  4114  00214A  A4D8               	btfss	status,2,c
  4115  00214C  D004               	goto	l2494
  4116                           
  4117                           ;iut_lcd.c: 184: lcd_write_cmd_busy(0x01);
  4118  00214E  0E01               	movlw	1
  4119  002150  ECA9  F011         	call	_lcd_write_cmd_busy
  4120                           
  4121                           ;iut_lcd.c: 185: } else if (lettre == '\n') {
  4122  002154  0012               	return	
  4123  002156                     l2494:
  4124  002156  0E0A               	movlw	10
  4125  002158  1806               	xorwf	lcd_putc@lettre,w,c
  4126  00215A  A4D8               	btfss	status,2,c
  4127  00215C  D006               	goto	l2498
  4128                           
  4129                           ;iut_lcd.c: 186: lcd_position(1, 0);
  4130  00215E  0E00               	movlw	0
  4131  002160  6E03               	movwf	lcd_position@colonne,c
  4132  002162  0E01               	movlw	1
  4133  002164  EC8F  F011         	call	_lcd_position
  4134                           
  4135                           ;iut_lcd.c: 187: } else if (lettre == '\b') {
  4136  002168  0012               	return	
  4137  00216A                     l2498:
  4138  00216A  0E08               	movlw	8
  4139  00216C  1806               	xorwf	lcd_putc@lettre,w,c
  4140  00216E  A4D8               	btfss	status,2,c
  4141  002170  D004               	goto	l2502
  4142                           
  4143                           ;iut_lcd.c: 188: lcd_write_cmd_busy(0x10);
  4144  002172  0E10               	movlw	16
  4145  002174  ECA9  F011         	call	_lcd_write_cmd_busy
  4146                           
  4147                           ;iut_lcd.c: 189: } else {
  4148  002178  0012               	return	
  4149  00217A                     l2502:
  4150                           
  4151                           ;iut_lcd.c: 190: lcd_write_data_busy(lettre);
  4152  00217A  5006               	movf	lcd_putc@lettre,w,c
  4153  00217C  EC9E  F011         	call	_lcd_write_data_busy
  4154  002180  0012               	return	
  4155  002182                     __end_of_lcd_putc:
  4156                           	opt stack 0
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           prodl	equ	0xFF3
  4162                           indf2	equ	0xFDF
  4163                           postinc2	equ	0xFDE
  4164                           postdec2	equ	0xFDD
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function _lcd_write_data_busy *****************
  4170 ;; Defined at:
  4171 ;;		line 758 in file "iut_lcd.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  c               1    wreg     unsigned char 
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;  c               1    1[COMRAM] unsigned char 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  1    wreg      void 
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, status,0, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4185 ;;      Params:         0       0       0       0       0       0       0       0       0
  4186 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4188 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4189 ;;Total ram usage:        1 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    2
  4192 ;; This function calls:
  4193 ;;		_lcd_busy
  4194 ;;		_lcd_write_cmd_data
  4195 ;; This function is called by:
  4196 ;;		_lcd_putc
  4197 ;;		_lcd_printf
  4198 ;;		_lcd_repete_n
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           	psect	text7
  4203  00233C                     __ptext7:
  4204                           	opt stack 0
  4205  00233C                     _lcd_write_data_busy:
  4206                           	opt stack 27
  4207                           
  4208                           ;incstack = 0
  4209                           ;lcd_write_data_busy@c stored from wreg
  4210  00233C  6E02               	movwf	lcd_write_data_busy@c,c
  4211  00233E                     l2444:
  4212  00233E  ECC1  F010         	call	_lcd_busy	;wreg free
  4213  002342  0900               	iorlw	0
  4214  002344  A4D8               	btfss	status,2,c
  4215  002346  D7FB               	goto	l2444
  4216                           
  4217                           ;iut_lcd.c: 760: PORTDbits.RD1 = 1;
  4218  002348  8283               	bsf	3971,1,c	;volatile
  4219                           
  4220                           ;iut_lcd.c: 761: lcd_write_cmd_data(c);
  4221  00234A  5002               	movf	lcd_write_data_busy@c,w,c
  4222  00234C  EC16  F011         	call	_lcd_write_cmd_data
  4223  002350  0012               	return		;funcret
  4224  002352                     __end_of_lcd_write_data_busy:
  4225                           	opt stack 0
  4226                           tblptru	equ	0xFF8
  4227                           tblptrh	equ	0xFF7
  4228                           tblptrl	equ	0xFF6
  4229                           tablat	equ	0xFF5
  4230                           prodl	equ	0xFF3
  4231                           indf2	equ	0xFDF
  4232                           postinc2	equ	0xFDE
  4233                           postdec2	equ	0xFDD
  4234                           fsr2h	equ	0xFDA
  4235                           fsr2l	equ	0xFD9
  4236                           status	equ	0xFD8
  4237                           
  4238 ;; *************** function _lcd_position *****************
  4239 ;; Defined at:
  4240 ;;		line 159 in file "iut_lcd.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;  ligne           1    wreg     unsigned char 
  4243 ;;  colonne         1    2[COMRAM] unsigned char 
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;  ligne           1    3[COMRAM] unsigned char 
  4246 ;;  address         1    4[COMRAM] unsigned char 
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  1    wreg      void 
  4249 ;; Registers used:
  4250 ;;		wreg, status,2, status,0, cstack
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4256 ;;      Params:         1       0       0       0       0       0       0       0       0
  4257 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4259 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4260 ;;Total ram usage:        3 bytes
  4261 ;; Hardware stack levels used:    1
  4262 ;; Hardware stack levels required when called:    3
  4263 ;; This function calls:
  4264 ;;		_lcd_write_cmd_busy
  4265 ;; This function is called by:
  4266 ;;		_main
  4267 ;;		_lcd_putc
  4268 ;;		_lcd_gotoyx
  4269 ;; This function uses a non-reentrant model
  4270 ;;
  4271                           
  4272                           	psect	text8
  4273  00231E                     __ptext8:
  4274                           	opt stack 0
  4275  00231E                     _lcd_position:
  4276                           	opt stack 25
  4277                           
  4278                           ;incstack = 0
  4279                           ;lcd_position@ligne stored from wreg
  4280  00231E  6E04               	movwf	lcd_position@ligne,c
  4281                           
  4282                           ;iut_lcd.c: 160: char address;
  4283                           ;iut_lcd.c: 162: if (ligne != 0) {
  4284  002320  5004               	movf	lcd_position@ligne,w,c
  4285  002322  B4D8               	btfsc	status,2,c
  4286  002324  D002               	goto	l2436
  4287                           
  4288                           ;iut_lcd.c: 163: address = 0x40;
  4289  002326  0E40               	movlw	64
  4290  002328  D001               	goto	L16
  4291  00232A                     l2436:
  4292                           
  4293                           ;iut_lcd.c: 165: address = 0;
  4294  00232A  0E00               	movlw	0
  4295  00232C                     L16:
  4296  00232C  6E05               	movwf	lcd_position@address,c
  4297                           
  4298                           ;iut_lcd.c: 166: }
  4299                           ;iut_lcd.c: 167: address += colonne;
  4300  00232E  5003               	movf	lcd_position@colonne,w,c
  4301  002330  2605               	addwf	lcd_position@address,f,c
  4302                           
  4303                           ;iut_lcd.c: 168: lcd_write_cmd_busy(0x80 | address);
  4304  002332  5005               	movf	lcd_position@address,w,c
  4305  002334  0980               	iorlw	128
  4306  002336  ECA9  F011         	call	_lcd_write_cmd_busy
  4307  00233A  0012               	return		;funcret
  4308  00233C                     __end_of_lcd_position:
  4309                           	opt stack 0
  4310                           tblptru	equ	0xFF8
  4311                           tblptrh	equ	0xFF7
  4312                           tblptrl	equ	0xFF6
  4313                           tablat	equ	0xFF5
  4314                           prodl	equ	0xFF3
  4315                           indf2	equ	0xFDF
  4316                           postinc2	equ	0xFDE
  4317                           postdec2	equ	0xFDD
  4318                           fsr2h	equ	0xFDA
  4319                           fsr2l	equ	0xFD9
  4320                           status	equ	0xFD8
  4321                           
  4322 ;; *************** function ___lwtoft *****************
  4323 ;; Defined at:
  4324 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  c               2    8[COMRAM] unsigned int 
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;		None
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  3    8[COMRAM] float 
  4331 ;; Registers used:
  4332 ;;		wreg, status,2, status,0, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4338 ;;      Params:         3       0       0       0       0       0       0       0       0
  4339 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4340 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4341 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4342 ;;Total ram usage:        3 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    1
  4345 ;; This function calls:
  4346 ;;		___ftpack
  4347 ;; This function is called by:
  4348 ;;		_lcd_printf
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           	psect	text9
  4353  0022D6                     __ptext9:
  4354                           	opt stack 0
  4355  0022D6                     ___lwtoft:
  4356                           	opt stack 28
  4357                           
  4358                           ;incstack = 0
  4359  0022D6  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  4360  0022DA  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  4361  0022DE  6A03               	clrf	___ftpack@arg+2,c
  4362  0022E0  0E8E               	movlw	142
  4363  0022E2  6E04               	movwf	___ftpack@exp,c
  4364  0022E4  0E00               	movlw	0
  4365  0022E6  6E05               	movwf	___ftpack@sign,c
  4366  0022E8  ECE9  F00E         	call	___ftpack	;wreg free
  4367  0022EC  C001  F009         	movff	?___ftpack,?___lwtoft
  4368  0022F0  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  4369  0022F4  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  4370  0022F8  0012               	return	
  4371  0022FA                     __end_of___lwtoft:
  4372                           	opt stack 0
  4373                           tblptru	equ	0xFF8
  4374                           tblptrh	equ	0xFF7
  4375                           tblptrl	equ	0xFF6
  4376                           tablat	equ	0xFF5
  4377                           prodl	equ	0xFF3
  4378                           indf2	equ	0xFDF
  4379                           postinc2	equ	0xFDE
  4380                           postdec2	equ	0xFDD
  4381                           fsr2h	equ	0xFDA
  4382                           fsr2l	equ	0xFD9
  4383                           status	equ	0xFD8
  4384                           
  4385 ;; *************** function ___llmod *****************
  4386 ;; Defined at:
  4387 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;  dividend        4    0[COMRAM] unsigned long 
  4390 ;;  divisor         4    4[COMRAM] unsigned long 
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;  counter         1    8[COMRAM] unsigned char 
  4393 ;; Return value:  Size  Location     Type
  4394 ;;                  4    0[COMRAM] unsigned long 
  4395 ;; Registers used:
  4396 ;;		wreg, status,2, status,0
  4397 ;; Tracked objects:
  4398 ;;		On entry : 0/0
  4399 ;;		On exit  : 0/0
  4400 ;;		Unchanged: 0/0
  4401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4402 ;;      Params:         8       0       0       0       0       0       0       0       0
  4403 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4404 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4405 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4406 ;;Total ram usage:        9 bytes
  4407 ;; Hardware stack levels used:    1
  4408 ;; This function calls:
  4409 ;;		Nothing
  4410 ;; This function is called by:
  4411 ;;		_lcd_printf
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text10
  4416  0020D0                     __ptext10:
  4417                           	opt stack 0
  4418  0020D0                     ___llmod:
  4419                           	opt stack 29
  4420                           
  4421                           ;incstack = 0
  4422  0020D0  5005               	movf	___llmod@divisor,w,c
  4423  0020D2  1006               	iorwf	___llmod@divisor+1,w,c
  4424  0020D4  1007               	iorwf	___llmod@divisor+2,w,c
  4425  0020D6  1008               	iorwf	___llmod@divisor+3,w,c
  4426  0020D8  B4D8               	btfsc	status,2,c
  4427  0020DA  D024               	goto	l850
  4428  0020DC  0E01               	movlw	1
  4429  0020DE  6E09               	movwf	___llmod@counter,c
  4430  0020E0  D006               	goto	l2770
  4431  0020E2                     l2768:
  4432  0020E2  90D8               	bcf	status,0,c
  4433  0020E4  3605               	rlcf	___llmod@divisor,f,c
  4434  0020E6  3606               	rlcf	___llmod@divisor+1,f,c
  4435  0020E8  3607               	rlcf	___llmod@divisor+2,f,c
  4436  0020EA  3608               	rlcf	___llmod@divisor+3,f,c
  4437  0020EC  2A09               	incf	___llmod@counter,f,c
  4438  0020EE                     l2770:
  4439  0020EE  AE08               	btfss	___llmod@divisor+3,7,c
  4440  0020F0  D7F8               	goto	l2768
  4441  0020F2                     l2772:
  4442  0020F2  5005               	movf	___llmod@divisor,w,c
  4443  0020F4  5C01               	subwf	___llmod@dividend,w,c
  4444  0020F6  5006               	movf	___llmod@divisor+1,w,c
  4445  0020F8  5802               	subwfb	___llmod@dividend+1,w,c
  4446  0020FA  5007               	movf	___llmod@divisor+2,w,c
  4447  0020FC  5803               	subwfb	___llmod@dividend+2,w,c
  4448  0020FE  5008               	movf	___llmod@divisor+3,w,c
  4449  002100  5804               	subwfb	___llmod@dividend+3,w,c
  4450  002102  A0D8               	btfss	status,0,c
  4451  002104  D008               	goto	l2776
  4452  002106  5005               	movf	___llmod@divisor,w,c
  4453  002108  5E01               	subwf	___llmod@dividend,f,c
  4454  00210A  5006               	movf	___llmod@divisor+1,w,c
  4455  00210C  5A02               	subwfb	___llmod@dividend+1,f,c
  4456  00210E  5007               	movf	___llmod@divisor+2,w,c
  4457  002110  5A03               	subwfb	___llmod@dividend+2,f,c
  4458  002112  5008               	movf	___llmod@divisor+3,w,c
  4459  002114  5A04               	subwfb	___llmod@dividend+3,f,c
  4460  002116                     l2776:
  4461  002116  90D8               	bcf	status,0,c
  4462  002118  3208               	rrcf	___llmod@divisor+3,f,c
  4463  00211A  3207               	rrcf	___llmod@divisor+2,f,c
  4464  00211C  3206               	rrcf	___llmod@divisor+1,f,c
  4465  00211E  3205               	rrcf	___llmod@divisor,f,c
  4466  002120  2E09               	decfsz	___llmod@counter,f,c
  4467  002122  D7E7               	goto	l2772
  4468  002124                     l850:
  4469  002124  C001  F001         	movff	___llmod@dividend,?___llmod
  4470  002128  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4471  00212C  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4472  002130  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4473  002134  0012               	return		;funcret
  4474  002136                     __end_of___llmod:
  4475                           	opt stack 0
  4476                           tblptru	equ	0xFF8
  4477                           tblptrh	equ	0xFF7
  4478                           tblptrl	equ	0xFF6
  4479                           tablat	equ	0xFF5
  4480                           prodl	equ	0xFF3
  4481                           indf2	equ	0xFDF
  4482                           postinc2	equ	0xFDE
  4483                           postdec2	equ	0xFDD
  4484                           fsr2h	equ	0xFDA
  4485                           fsr2l	equ	0xFD9
  4486                           status	equ	0xFD8
  4487                           
  4488 ;; *************** function ___lldiv *****************
  4489 ;; Defined at:
  4490 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  dividend        4    0[COMRAM] unsigned long 
  4493 ;;  divisor         4    4[COMRAM] unsigned long 
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;  quotient        4    8[COMRAM] unsigned long 
  4496 ;;  counter         1   12[COMRAM] unsigned char 
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  4    0[COMRAM] unsigned long 
  4499 ;; Registers used:
  4500 ;;		wreg, status,2, status,0
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4506 ;;      Params:         8       0       0       0       0       0       0       0       0
  4507 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4508 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4509 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4510 ;;Total ram usage:       13 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; This function calls:
  4513 ;;		Nothing
  4514 ;; This function is called by:
  4515 ;;		_lcd_printf
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text11
  4520  00204E                     __ptext11:
  4521                           	opt stack 0
  4522  00204E                     ___lldiv:
  4523                           	opt stack 29
  4524                           
  4525                           ;incstack = 0
  4526  00204E  0E00               	movlw	0
  4527  002050  6E09               	movwf	___lldiv@quotient,c
  4528  002052  0E00               	movlw	0
  4529  002054  6E0A               	movwf	___lldiv@quotient+1,c
  4530  002056  0E00               	movlw	0
  4531  002058  6E0B               	movwf	___lldiv@quotient+2,c
  4532  00205A  0E00               	movlw	0
  4533  00205C  6E0C               	movwf	___lldiv@quotient+3,c
  4534  00205E  5005               	movf	___lldiv@divisor,w,c
  4535  002060  1006               	iorwf	___lldiv@divisor+1,w,c
  4536  002062  1007               	iorwf	___lldiv@divisor+2,w,c
  4537  002064  1008               	iorwf	___lldiv@divisor+3,w,c
  4538  002066  B4D8               	btfsc	status,2,c
  4539  002068  D02A               	goto	l840
  4540  00206A  0E01               	movlw	1
  4541  00206C  6E0D               	movwf	___lldiv@counter,c
  4542  00206E  D006               	goto	l2750
  4543  002070                     l2748:
  4544  002070  90D8               	bcf	status,0,c
  4545  002072  3605               	rlcf	___lldiv@divisor,f,c
  4546  002074  3606               	rlcf	___lldiv@divisor+1,f,c
  4547  002076  3607               	rlcf	___lldiv@divisor+2,f,c
  4548  002078  3608               	rlcf	___lldiv@divisor+3,f,c
  4549  00207A  2A0D               	incf	___lldiv@counter,f,c
  4550  00207C                     l2750:
  4551  00207C  AE08               	btfss	___lldiv@divisor+3,7,c
  4552  00207E  D7F8               	goto	l2748
  4553  002080                     l2752:
  4554  002080  90D8               	bcf	status,0,c
  4555  002082  3609               	rlcf	___lldiv@quotient,f,c
  4556  002084  360A               	rlcf	___lldiv@quotient+1,f,c
  4557  002086  360B               	rlcf	___lldiv@quotient+2,f,c
  4558  002088  360C               	rlcf	___lldiv@quotient+3,f,c
  4559  00208A  5005               	movf	___lldiv@divisor,w,c
  4560  00208C  5C01               	subwf	___lldiv@dividend,w,c
  4561  00208E  5006               	movf	___lldiv@divisor+1,w,c
  4562  002090  5802               	subwfb	___lldiv@dividend+1,w,c
  4563  002092  5007               	movf	___lldiv@divisor+2,w,c
  4564  002094  5803               	subwfb	___lldiv@dividend+2,w,c
  4565  002096  5008               	movf	___lldiv@divisor+3,w,c
  4566  002098  5804               	subwfb	___lldiv@dividend+3,w,c
  4567  00209A  A0D8               	btfss	status,0,c
  4568  00209C  D009               	goto	l2760
  4569  00209E  5005               	movf	___lldiv@divisor,w,c
  4570  0020A0  5E01               	subwf	___lldiv@dividend,f,c
  4571  0020A2  5006               	movf	___lldiv@divisor+1,w,c
  4572  0020A4  5A02               	subwfb	___lldiv@dividend+1,f,c
  4573  0020A6  5007               	movf	___lldiv@divisor+2,w,c
  4574  0020A8  5A03               	subwfb	___lldiv@dividend+2,f,c
  4575  0020AA  5008               	movf	___lldiv@divisor+3,w,c
  4576  0020AC  5A04               	subwfb	___lldiv@dividend+3,f,c
  4577  0020AE  8009               	bsf	___lldiv@quotient,0,c
  4578  0020B0                     l2760:
  4579  0020B0  90D8               	bcf	status,0,c
  4580  0020B2  3208               	rrcf	___lldiv@divisor+3,f,c
  4581  0020B4  3207               	rrcf	___lldiv@divisor+2,f,c
  4582  0020B6  3206               	rrcf	___lldiv@divisor+1,f,c
  4583  0020B8  3205               	rrcf	___lldiv@divisor,f,c
  4584  0020BA  2E0D               	decfsz	___lldiv@counter,f,c
  4585  0020BC  D7E1               	goto	l2752
  4586  0020BE                     l840:
  4587  0020BE  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4588  0020C2  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4589  0020C6  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4590  0020CA  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4591  0020CE  0012               	return		;funcret
  4592  0020D0                     __end_of___lldiv:
  4593                           	opt stack 0
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodl	equ	0xFF3
  4599                           indf2	equ	0xFDF
  4600                           postinc2	equ	0xFDE
  4601                           postdec2	equ	0xFDD
  4602                           fsr2h	equ	0xFDA
  4603                           fsr2l	equ	0xFD9
  4604                           status	equ	0xFD8
  4605                           
  4606 ;; *************** function ___fttol *****************
  4607 ;; Defined at:
  4608 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;  f1              3    0[COMRAM] float 
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;  lval            4   10[COMRAM] unsigned long 
  4613 ;;  exp1            1   14[COMRAM] unsigned char 
  4614 ;;  sign1           1    9[COMRAM] unsigned char 
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  4    0[COMRAM] long 
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4624 ;;      Params:         4       0       0       0       0       0       0       0       0
  4625 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4626 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4627 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4628 ;;Total ram usage:       15 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; This function calls:
  4631 ;;		Nothing
  4632 ;; This function is called by:
  4633 ;;		_main
  4634 ;;		_lcd_printf
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text12
  4639  001B04                     __ptext12:
  4640                           	opt stack 0
  4641  001B04                     ___fttol:
  4642                           	opt stack 29
  4643                           
  4644                           ;incstack = 0
  4645  001B04  C003  F005         	movff	___fttol@f1+2,??___fttol
  4646  001B08  6A06               	clrf	(??___fttol+1)& (0+255),c
  4647  001B0A  6A07               	clrf	(??___fttol+2)& (0+255),c
  4648  001B0C  3402               	rlcf	___fttol@f1+1,w,c
  4649  001B0E  3605               	rlcf	??___fttol& (0+255),f,c
  4650  001B10  E301               	bnc	u2481
  4651  001B12  8006               	bsf	(??___fttol+1)& (0+255),0,c
  4652  001B14                     u2481:
  4653  001B14  5005               	movf	??___fttol,w,c
  4654  001B16  6E0F               	movwf	___fttol@exp1,c
  4655  001B18  500F               	movf	___fttol@exp1,w,c
  4656  001B1A  A4D8               	btfss	status,2,c
  4657  001B1C  D009               	goto	l2702
  4658  001B1E  0E00               	movlw	0
  4659  001B20  6E01               	movwf	?___fttol,c
  4660  001B22  0E00               	movlw	0
  4661  001B24  6E02               	movwf	?___fttol+1,c
  4662  001B26  0E00               	movlw	0
  4663  001B28  6E03               	movwf	?___fttol+2,c
  4664  001B2A  0E00               	movlw	0
  4665  001B2C  6E04               	movwf	?___fttol+3,c
  4666  001B2E  0012               	return	
  4667  001B30                     l2702:
  4668  001B30  0E17               	movlw	23
  4669  001B32  6E05               	movwf	??___fttol& (0+255),c
  4670  001B34  C001  F006         	movff	___fttol@f1,??___fttol+1
  4671  001B38  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  4672  001B3C  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  4673  001B40  2805               	incf	??___fttol,w,c
  4674  001B42  6E09               	movwf	(??___fttol+4)& (0+255),c
  4675  001B44  D004               	goto	u2500
  4676  001B46                     u2505:
  4677  001B46  90D8               	bcf	status,0,c
  4678  001B48  3208               	rrcf	??___fttol+3,f,c
  4679  001B4A  3207               	rrcf	??___fttol+2,f,c
  4680  001B4C  3206               	rrcf	??___fttol+1,f,c
  4681  001B4E                     u2500:
  4682  001B4E  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  4683  001B50  D7FA               	goto	u2505
  4684  001B52  5006               	movf	??___fttol+1,w,c
  4685  001B54  6E0A               	movwf	___fttol@sign1,c
  4686  001B56  8E02               	bsf	___fttol@f1+1,7,c
  4687  001B58  0EFF               	movlw	255
  4688  001B5A  1601               	andwf	___fttol@f1,f,c
  4689  001B5C  0EFF               	movlw	255
  4690  001B5E  1602               	andwf	___fttol@f1+1,f,c
  4691  001B60  0E00               	movlw	0
  4692  001B62  1603               	andwf	___fttol@f1+2,f,c
  4693  001B64  5001               	movf	___fttol@f1,w,c
  4694  001B66  6E0B               	movwf	___fttol@lval,c
  4695  001B68  5002               	movf	___fttol@f1+1,w,c
  4696  001B6A  6E0C               	movwf	___fttol@lval+1,c
  4697  001B6C  5003               	movf	___fttol@f1+2,w,c
  4698  001B6E  6E0D               	movwf	___fttol@lval+2,c
  4699  001B70  6A0E               	clrf	___fttol@lval+3,c
  4700  001B72  0E8E               	movlw	142
  4701  001B74  5E0F               	subwf	___fttol@exp1,f,c
  4702  001B76  AE0F               	btfss	___fttol@exp1,7,c
  4703  001B78  D016               	goto	l2724
  4704  001B7A  500F               	movf	___fttol@exp1,w,c
  4705  001B7C  0A80               	xorlw	128
  4706  001B7E  0F8F               	addlw	143
  4707  001B80  B0D8               	btfsc	status,0,c
  4708  001B82  D009               	goto	l2720
  4709  001B84  0E00               	movlw	0
  4710  001B86  6E01               	movwf	?___fttol,c
  4711  001B88  0E00               	movlw	0
  4712  001B8A  6E02               	movwf	?___fttol+1,c
  4713  001B8C  0E00               	movlw	0
  4714  001B8E  6E03               	movwf	?___fttol+2,c
  4715  001B90  0E00               	movlw	0
  4716  001B92  6E04               	movwf	?___fttol+3,c
  4717  001B94  0012               	return	
  4718  001B96                     l2720:
  4719  001B96  90D8               	bcf	status,0,c
  4720  001B98  320E               	rrcf	___fttol@lval+3,f,c
  4721  001B9A  320D               	rrcf	___fttol@lval+2,f,c
  4722  001B9C  320C               	rrcf	___fttol@lval+1,f,c
  4723  001B9E  320B               	rrcf	___fttol@lval,f,c
  4724  001BA0  3E0F               	incfsz	___fttol@exp1,f,c
  4725  001BA2  D7F9               	goto	l2720
  4726  001BA4  D015               	goto	l2734
  4727  001BA6                     l2724:
  4728  001BA6  0E17               	movlw	23
  4729  001BA8  640F               	cpfsgt	___fttol@exp1,c
  4730  001BAA  D00F               	goto	l2732
  4731  001BAC  0E00               	movlw	0
  4732  001BAE  6E01               	movwf	?___fttol,c
  4733  001BB0  0E00               	movlw	0
  4734  001BB2  6E02               	movwf	?___fttol+1,c
  4735  001BB4  0E00               	movlw	0
  4736  001BB6  6E03               	movwf	?___fttol+2,c
  4737  001BB8  0E00               	movlw	0
  4738  001BBA  6E04               	movwf	?___fttol+3,c
  4739  001BBC  0012               	return	
  4740  001BBE                     l2730:
  4741  001BBE  90D8               	bcf	status,0,c
  4742  001BC0  360B               	rlcf	___fttol@lval,f,c
  4743  001BC2  360C               	rlcf	___fttol@lval+1,f,c
  4744  001BC4  360D               	rlcf	___fttol@lval+2,f,c
  4745  001BC6  360E               	rlcf	___fttol@lval+3,f,c
  4746  001BC8  060F               	decf	___fttol@exp1,f,c
  4747  001BCA                     l2732:
  4748  001BCA  500F               	movf	___fttol@exp1,w,c
  4749  001BCC  A4D8               	btfss	status,2,c
  4750  001BCE  D7F7               	goto	l2730
  4751  001BD0                     l2734:
  4752  001BD0  500A               	movf	___fttol@sign1,w,c
  4753  001BD2  B4D8               	btfsc	status,2,c
  4754  001BD4  D008               	goto	l2738
  4755  001BD6  1E0E               	comf	___fttol@lval+3,f,c
  4756  001BD8  1E0D               	comf	___fttol@lval+2,f,c
  4757  001BDA  1E0C               	comf	___fttol@lval+1,f,c
  4758  001BDC  6C0B               	negf	___fttol@lval,c
  4759  001BDE  0E00               	movlw	0
  4760  001BE0  220C               	addwfc	___fttol@lval+1,f,c
  4761  001BE2  220D               	addwfc	___fttol@lval+2,f,c
  4762  001BE4  220E               	addwfc	___fttol@lval+3,f,c
  4763  001BE6                     l2738:
  4764  001BE6  C00B  F001         	movff	___fttol@lval,?___fttol
  4765  001BEA  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  4766  001BEE  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  4767  001BF2  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  4768  001BF6  0012               	return	
  4769  001BF8                     __end_of___fttol:
  4770                           	opt stack 0
  4771                           tblptru	equ	0xFF8
  4772                           tblptrh	equ	0xFF7
  4773                           tblptrl	equ	0xFF6
  4774                           tablat	equ	0xFF5
  4775                           prodl	equ	0xFF3
  4776                           indf2	equ	0xFDF
  4777                           postinc2	equ	0xFDE
  4778                           postdec2	equ	0xFDD
  4779                           fsr2h	equ	0xFDA
  4780                           fsr2l	equ	0xFD9
  4781                           status	equ	0xFD8
  4782                           
  4783 ;; *************** function ___ftneg *****************
  4784 ;; Defined at:
  4785 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;  f1              3   12[COMRAM] float 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;		None
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  3   12[COMRAM] float 
  4792 ;; Registers used:
  4793 ;;		wreg, status,2, status,0
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4799 ;;      Params:         3       0       0       0       0       0       0       0       0
  4800 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4801 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4802 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4803 ;;Total ram usage:        3 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; This function calls:
  4806 ;;		Nothing
  4807 ;; This function is called by:
  4808 ;;		_main
  4809 ;;		_lcd_printf
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text13
  4814  0022FA                     __ptext13:
  4815                           	opt stack 0
  4816  0022FA                     ___ftneg:
  4817                           	opt stack 29
  4818                           
  4819                           ;incstack = 0
  4820  0022FA  500D               	movf	___ftneg@f1,w,c
  4821  0022FC  100E               	iorwf	___ftneg@f1+1,w,c
  4822  0022FE  100F               	iorwf	___ftneg@f1+2,w,c
  4823  002300  B4D8               	btfsc	status,2,c
  4824  002302  D006               	goto	l795
  4825  002304  0E00               	movlw	0
  4826  002306  1A0D               	xorwf	___ftneg@f1,f,c
  4827  002308  0E00               	movlw	0
  4828  00230A  1A0E               	xorwf	___ftneg@f1+1,f,c
  4829  00230C  0E80               	movlw	128
  4830  00230E  1A0F               	xorwf	___ftneg@f1+2,f,c
  4831  002310                     l795:
  4832  002310  C00D  F00D         	movff	___ftneg@f1,?___ftneg
  4833  002314  C00E  F00E         	movff	___ftneg@f1+1,?___ftneg+1
  4834  002318  C00F  F00F         	movff	___ftneg@f1+2,?___ftneg+2
  4835  00231C  0012               	return		;funcret
  4836  00231E                     __end_of___ftneg:
  4837                           	opt stack 0
  4838                           tblptru	equ	0xFF8
  4839                           tblptrh	equ	0xFF7
  4840                           tblptrl	equ	0xFF6
  4841                           tablat	equ	0xFF5
  4842                           prodl	equ	0xFF3
  4843                           indf2	equ	0xFDF
  4844                           postinc2	equ	0xFDE
  4845                           postdec2	equ	0xFDD
  4846                           fsr2h	equ	0xFDA
  4847                           fsr2l	equ	0xFD9
  4848                           status	equ	0xFD8
  4849                           
  4850 ;; *************** function ___ftmul *****************
  4851 ;; Defined at:
  4852 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;  f1              3   42[COMRAM] float 
  4855 ;;  f2              3   45[COMRAM] float 
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;  f3_as_produc    3   52[COMRAM] unsigned um
  4858 ;;  sign            1   56[COMRAM] unsigned char 
  4859 ;;  cntr            1   55[COMRAM] unsigned char 
  4860 ;;  exp             1   51[COMRAM] unsigned char 
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  3   42[COMRAM] float 
  4863 ;; Registers used:
  4864 ;;		wreg, status,2, status,0, cstack
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4870 ;;      Params:         6       0       0       0       0       0       0       0       0
  4871 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4872 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4873 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4874 ;;Total ram usage:       15 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    1
  4877 ;; This function calls:
  4878 ;;		___ftpack
  4879 ;; This function is called by:
  4880 ;;		_main
  4881 ;;		_lcd_printf
  4882 ;; This function uses a non-reentrant model
  4883 ;;
  4884                           
  4885                           	psect	text14
  4886  001BF8                     __ptext14:
  4887                           	opt stack 0
  4888  001BF8                     ___ftmul:
  4889                           	opt stack 28
  4890                           
  4891                           ;incstack = 0
  4892  001BF8  C02D  F031         	movff	___ftmul@f1+2,??___ftmul
  4893  001BFC  6A32               	clrf	(??___ftmul+1)& (0+255),c
  4894  001BFE  6A33               	clrf	(??___ftmul+2)& (0+255),c
  4895  001C00  342C               	rlcf	___ftmul@f1+1,w,c
  4896  001C02  3631               	rlcf	??___ftmul& (0+255),f,c
  4897  001C04  E301               	bnc	u2381
  4898  001C06  8032               	bsf	(??___ftmul+1)& (0+255),0,c
  4899  001C08                     u2381:
  4900  001C08  5031               	movf	??___ftmul,w,c
  4901  001C0A  6E34               	movwf	___ftmul@exp,c
  4902  001C0C  5034               	movf	___ftmul@exp,w,c
  4903  001C0E  A4D8               	btfss	status,2,c
  4904  001C10  D007               	goto	l2632
  4905  001C12  0E00               	movlw	0
  4906  001C14  6E2B               	movwf	?___ftmul,c
  4907  001C16  0E00               	movlw	0
  4908  001C18  6E2C               	movwf	?___ftmul+1,c
  4909  001C1A  0E00               	movlw	0
  4910  001C1C  6E2D               	movwf	?___ftmul+2,c
  4911  001C1E  0012               	return	
  4912  001C20                     l2632:
  4913  001C20  C030  F031         	movff	___ftmul@f2+2,??___ftmul
  4914  001C24  6A32               	clrf	(??___ftmul+1)& (0+255),c
  4915  001C26  6A33               	clrf	(??___ftmul+2)& (0+255),c
  4916  001C28  342F               	rlcf	___ftmul@f2+1,w,c
  4917  001C2A  3631               	rlcf	??___ftmul& (0+255),f,c
  4918  001C2C  E301               	bnc	u2401
  4919  001C2E  8032               	bsf	(??___ftmul+1)& (0+255),0,c
  4920  001C30                     u2401:
  4921  001C30  5031               	movf	??___ftmul,w,c
  4922  001C32  6E39               	movwf	___ftmul@sign,c
  4923  001C34  5039               	movf	___ftmul@sign,w,c
  4924  001C36  A4D8               	btfss	status,2,c
  4925  001C38  D007               	goto	l2638
  4926  001C3A  0E00               	movlw	0
  4927  001C3C  6E2B               	movwf	?___ftmul,c
  4928  001C3E  0E00               	movlw	0
  4929  001C40  6E2C               	movwf	?___ftmul+1,c
  4930  001C42  0E00               	movlw	0
  4931  001C44  6E2D               	movwf	?___ftmul+2,c
  4932  001C46  0012               	return	
  4933  001C48                     l2638:
  4934  001C48  5039               	movf	___ftmul@sign,w,c
  4935  001C4A  0F7B               	addlw	123
  4936  001C4C  2634               	addwf	___ftmul@exp,f,c
  4937  001C4E  C02D  F039         	movff	___ftmul@f1+2,___ftmul@sign
  4938  001C52  5030               	movf	___ftmul@f2+2,w,c
  4939  001C54  1A39               	xorwf	___ftmul@sign,f,c
  4940  001C56  0E80               	movlw	128
  4941  001C58  1639               	andwf	___ftmul@sign,f,c
  4942  001C5A  8E2C               	bsf	___ftmul@f1+1,7,c
  4943  001C5C  8E2F               	bsf	___ftmul@f2+1,7,c
  4944  001C5E  0EFF               	movlw	255
  4945  001C60  162E               	andwf	___ftmul@f2,f,c
  4946  001C62  0EFF               	movlw	255
  4947  001C64  162F               	andwf	___ftmul@f2+1,f,c
  4948  001C66  0E00               	movlw	0
  4949  001C68  1630               	andwf	___ftmul@f2+2,f,c
  4950  001C6A  0E00               	movlw	0
  4951  001C6C  6E35               	movwf	___ftmul@f3_as_product,c
  4952  001C6E  0E00               	movlw	0
  4953  001C70  6E36               	movwf	___ftmul@f3_as_product+1,c
  4954  001C72  0E00               	movlw	0
  4955  001C74  6E37               	movwf	___ftmul@f3_as_product+2,c
  4956  001C76  0E07               	movlw	7
  4957  001C78  6E38               	movwf	___ftmul@cntr,c
  4958  001C7A                     l2652:
  4959  001C7A  A02B               	btfss	___ftmul@f1,0,c
  4960  001C7C  D006               	goto	l2656
  4961  001C7E  502E               	movf	___ftmul@f2,w,c
  4962  001C80  2635               	addwf	___ftmul@f3_as_product,f,c
  4963  001C82  502F               	movf	___ftmul@f2+1,w,c
  4964  001C84  2236               	addwfc	___ftmul@f3_as_product+1,f,c
  4965  001C86  5030               	movf	___ftmul@f2+2,w,c
  4966  001C88  2237               	addwfc	___ftmul@f3_as_product+2,f,c
  4967  001C8A                     l2656:
  4968  001C8A  90D8               	bcf	status,0,c
  4969  001C8C  322D               	rrcf	___ftmul@f1+2,f,c
  4970  001C8E  322C               	rrcf	___ftmul@f1+1,f,c
  4971  001C90  322B               	rrcf	___ftmul@f1,f,c
  4972  001C92  90D8               	bcf	status,0,c
  4973  001C94  362E               	rlcf	___ftmul@f2,f,c
  4974  001C96  362F               	rlcf	___ftmul@f2+1,f,c
  4975  001C98  3630               	rlcf	___ftmul@f2+2,f,c
  4976  001C9A  2E38               	decfsz	___ftmul@cntr,f,c
  4977  001C9C  D7EE               	goto	l2652
  4978  001C9E  0E09               	movlw	9
  4979  001CA0  6E38               	movwf	___ftmul@cntr,c
  4980  001CA2                     l2662:
  4981  001CA2  A02B               	btfss	___ftmul@f1,0,c
  4982  001CA4  D006               	goto	l2666
  4983  001CA6  502E               	movf	___ftmul@f2,w,c
  4984  001CA8  2635               	addwf	___ftmul@f3_as_product,f,c
  4985  001CAA  502F               	movf	___ftmul@f2+1,w,c
  4986  001CAC  2236               	addwfc	___ftmul@f3_as_product+1,f,c
  4987  001CAE  5030               	movf	___ftmul@f2+2,w,c
  4988  001CB0  2237               	addwfc	___ftmul@f3_as_product+2,f,c
  4989  001CB2                     l2666:
  4990  001CB2  90D8               	bcf	status,0,c
  4991  001CB4  322D               	rrcf	___ftmul@f1+2,f,c
  4992  001CB6  322C               	rrcf	___ftmul@f1+1,f,c
  4993  001CB8  322B               	rrcf	___ftmul@f1,f,c
  4994  001CBA  90D8               	bcf	status,0,c
  4995  001CBC  3237               	rrcf	___ftmul@f3_as_product+2,f,c
  4996  001CBE  3236               	rrcf	___ftmul@f3_as_product+1,f,c
  4997  001CC0  3235               	rrcf	___ftmul@f3_as_product,f,c
  4998  001CC2  2E38               	decfsz	___ftmul@cntr,f,c
  4999  001CC4  D7EE               	goto	l2662
  5000  001CC6  C035  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5001  001CCA  C036  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5002  001CCE  C037  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5003  001CD2  C034  F004         	movff	___ftmul@exp,___ftpack@exp
  5004  001CD6  C039  F005         	movff	___ftmul@sign,___ftpack@sign
  5005  001CDA  ECE9  F00E         	call	___ftpack	;wreg free
  5006  001CDE  C001  F02B         	movff	?___ftpack,?___ftmul
  5007  001CE2  C002  F02C         	movff	?___ftpack+1,?___ftmul+1
  5008  001CE6  C003  F02D         	movff	?___ftpack+2,?___ftmul+2
  5009  001CEA  0012               	return	
  5010  001CEC                     __end_of___ftmul:
  5011                           	opt stack 0
  5012                           tblptru	equ	0xFF8
  5013                           tblptrh	equ	0xFF7
  5014                           tblptrl	equ	0xFF6
  5015                           tablat	equ	0xFF5
  5016                           prodl	equ	0xFF3
  5017                           indf2	equ	0xFDF
  5018                           postinc2	equ	0xFDE
  5019                           postdec2	equ	0xFDD
  5020                           fsr2h	equ	0xFDA
  5021                           fsr2l	equ	0xFD9
  5022                           status	equ	0xFD8
  5023                           
  5024 ;; *************** function ___ftge *****************
  5025 ;; Defined at:
  5026 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  ff1             3    0[COMRAM] float 
  5029 ;;  ff2             3    3[COMRAM] float 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;		None
  5032 ;; Return value:  Size  Location     Type
  5033 ;;		None               void
  5034 ;; Registers used:
  5035 ;;		wreg, status,2, status,0
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5041 ;;      Params:         6       0       0       0       0       0       0       0       0
  5042 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5043 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5044 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5045 ;;Total ram usage:        9 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; This function calls:
  5048 ;;		Nothing
  5049 ;; This function is called by:
  5050 ;;		_lcd_printf
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           	psect	text15
  5055  001FBE                     __ptext15:
  5056                           	opt stack 0
  5057  001FBE                     ___ftge:
  5058                           	opt stack 29
  5059                           
  5060                           ;incstack = 0
  5061  001FBE  AE03               	btfss	___ftge@ff1+2,7,c
  5062  001FC0  D016               	goto	l2678
  5063  001FC2  C001  F007         	movff	___ftge@ff1,??___ftge
  5064  001FC6  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5065  001FCA  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5066  001FCE  1E07               	comf	??___ftge,f,c
  5067  001FD0  1E08               	comf	??___ftge+1,f,c
  5068  001FD2  1E09               	comf	??___ftge+2,f,c
  5069  001FD4  2A07               	incf	??___ftge,f,c
  5070  001FD6  0E00               	movlw	0
  5071  001FD8  2208               	addwfc	??___ftge+1,f,c
  5072  001FDA  2209               	addwfc	??___ftge+2,f,c
  5073  001FDC  0E00               	movlw	0
  5074  001FDE  2407               	addwf	??___ftge,w,c
  5075  001FE0  6E01               	movwf	___ftge@ff1,c
  5076  001FE2  0E00               	movlw	0
  5077  001FE4  2008               	addwfc	??___ftge+1,w,c
  5078  001FE6  6E02               	movwf	___ftge@ff1+1,c
  5079  001FE8  0E80               	movlw	128
  5080  001FEA  2009               	addwfc	??___ftge+2,w,c
  5081  001FEC  6E03               	movwf	___ftge@ff1+2,c
  5082  001FEE                     l2678:
  5083  001FEE  AE06               	btfss	___ftge@ff2+2,7,c
  5084  001FF0  D016               	goto	l2682
  5085  001FF2  C004  F007         	movff	___ftge@ff2,??___ftge
  5086  001FF6  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5087  001FFA  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5088  001FFE  1E07               	comf	??___ftge,f,c
  5089  002000  1E08               	comf	??___ftge+1,f,c
  5090  002002  1E09               	comf	??___ftge+2,f,c
  5091  002004  2A07               	incf	??___ftge,f,c
  5092  002006  0E00               	movlw	0
  5093  002008  2208               	addwfc	??___ftge+1,f,c
  5094  00200A  2209               	addwfc	??___ftge+2,f,c
  5095  00200C  0E00               	movlw	0
  5096  00200E  2407               	addwf	??___ftge,w,c
  5097  002010  6E04               	movwf	___ftge@ff2,c
  5098  002012  0E00               	movlw	0
  5099  002014  2008               	addwfc	??___ftge+1,w,c
  5100  002016  6E05               	movwf	___ftge@ff2+1,c
  5101  002018  0E80               	movlw	128
  5102  00201A  2009               	addwfc	??___ftge+2,w,c
  5103  00201C  6E06               	movwf	___ftge@ff2+2,c
  5104  00201E                     l2682:
  5105  00201E  0E00               	movlw	0
  5106  002020  1A01               	xorwf	___ftge@ff1,f,c
  5107  002022  0E00               	movlw	0
  5108  002024  1A02               	xorwf	___ftge@ff1+1,f,c
  5109  002026  0E80               	movlw	128
  5110  002028  1A03               	xorwf	___ftge@ff1+2,f,c
  5111  00202A  0E00               	movlw	0
  5112  00202C  1A04               	xorwf	___ftge@ff2,f,c
  5113  00202E  0E00               	movlw	0
  5114  002030  1A05               	xorwf	___ftge@ff2+1,f,c
  5115  002032  0E80               	movlw	128
  5116  002034  1A06               	xorwf	___ftge@ff2+2,f,c
  5117  002036  5004               	movf	___ftge@ff2,w,c
  5118  002038  5C01               	subwf	___ftge@ff1,w,c
  5119  00203A  5005               	movf	___ftge@ff2+1,w,c
  5120  00203C  5802               	subwfb	___ftge@ff1+1,w,c
  5121  00203E  5006               	movf	___ftge@ff2+2,w,c
  5122  002040  5803               	subwfb	___ftge@ff1+2,w,c
  5123  002042  B0D8               	btfsc	status,0,c
  5124  002044  D002               	goto	l2688
  5125  002046  90D8               	bcf	status,0,c
  5126  002048  0012               	return	
  5127  00204A                     l2688:
  5128  00204A  80D8               	bsf	status,0,c
  5129  00204C  0012               	return	
  5130  00204E                     __end_of___ftge:
  5131                           	opt stack 0
  5132                           tblptru	equ	0xFF8
  5133                           tblptrh	equ	0xFF7
  5134                           tblptrl	equ	0xFF6
  5135                           tablat	equ	0xFF5
  5136                           prodl	equ	0xFF3
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           fsr2h	equ	0xFDA
  5141                           fsr2l	equ	0xFD9
  5142                           status	equ	0xFD8
  5143                           
  5144 ;; *************** function ___ftdiv *****************
  5145 ;; Defined at:
  5146 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  f1              3   27[COMRAM] float 
  5149 ;;  f2              3   30[COMRAM] float 
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  f3              3   37[COMRAM] float 
  5152 ;;  sign            1   41[COMRAM] unsigned char 
  5153 ;;  exp             1   40[COMRAM] unsigned char 
  5154 ;;  cntr            1   36[COMRAM] unsigned char 
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  3   27[COMRAM] float 
  5157 ;; Registers used:
  5158 ;;		wreg, status,2, status,0, cstack
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5164 ;;      Params:         6       0       0       0       0       0       0       0       0
  5165 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5166 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5167 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5168 ;;Total ram usage:       15 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    1
  5171 ;; This function calls:
  5172 ;;		___ftpack
  5173 ;; This function is called by:
  5174 ;;		_main
  5175 ;;		_lcd_printf
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           	psect	text16
  5180  001CEC                     __ptext16:
  5181                           	opt stack 0
  5182  001CEC                     ___ftdiv:
  5183                           	opt stack 28
  5184                           
  5185                           ;incstack = 0
  5186  001CEC  C01E  F022         	movff	___ftdiv@f1+2,??___ftdiv
  5187  001CF0  6A23               	clrf	(??___ftdiv+1)& (0+255),c
  5188  001CF2  6A24               	clrf	(??___ftdiv+2)& (0+255),c
  5189  001CF4  341D               	rlcf	___ftdiv@f1+1,w,c
  5190  001CF6  3622               	rlcf	??___ftdiv& (0+255),f,c
  5191  001CF8  E301               	bnc	u2331
  5192  001CFA  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
  5193  001CFC                     u2331:
  5194  001CFC  5022               	movf	??___ftdiv,w,c
  5195  001CFE  6E29               	movwf	___ftdiv@exp,c
  5196  001D00  5029               	movf	___ftdiv@exp,w,c
  5197  001D02  A4D8               	btfss	status,2,c
  5198  001D04  D007               	goto	l2586
  5199  001D06  0E00               	movlw	0
  5200  001D08  6E1C               	movwf	?___ftdiv,c
  5201  001D0A  0E00               	movlw	0
  5202  001D0C  6E1D               	movwf	?___ftdiv+1,c
  5203  001D0E  0E00               	movlw	0
  5204  001D10  6E1E               	movwf	?___ftdiv+2,c
  5205  001D12  0012               	return	
  5206  001D14                     l2586:
  5207  001D14  C021  F022         	movff	___ftdiv@f2+2,??___ftdiv
  5208  001D18  6A23               	clrf	(??___ftdiv+1)& (0+255),c
  5209  001D1A  6A24               	clrf	(??___ftdiv+2)& (0+255),c
  5210  001D1C  3420               	rlcf	___ftdiv@f2+1,w,c
  5211  001D1E  3622               	rlcf	??___ftdiv& (0+255),f,c
  5212  001D20  E301               	bnc	u2351
  5213  001D22  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
  5214  001D24                     u2351:
  5215  001D24  5022               	movf	??___ftdiv,w,c
  5216  001D26  6E2A               	movwf	___ftdiv@sign,c
  5217  001D28  502A               	movf	___ftdiv@sign,w,c
  5218  001D2A  A4D8               	btfss	status,2,c
  5219  001D2C  D007               	goto	l2592
  5220  001D2E  0E00               	movlw	0
  5221  001D30  6E1C               	movwf	?___ftdiv,c
  5222  001D32  0E00               	movlw	0
  5223  001D34  6E1D               	movwf	?___ftdiv+1,c
  5224  001D36  0E00               	movlw	0
  5225  001D38  6E1E               	movwf	?___ftdiv+2,c
  5226  001D3A  0012               	return	
  5227  001D3C                     l2592:
  5228  001D3C  0E00               	movlw	0
  5229  001D3E  6E26               	movwf	___ftdiv@f3,c
  5230  001D40  0E00               	movlw	0
  5231  001D42  6E27               	movwf	___ftdiv@f3+1,c
  5232  001D44  0E00               	movlw	0
  5233  001D46  6E28               	movwf	___ftdiv@f3+2,c
  5234  001D48  502A               	movf	___ftdiv@sign,w,c
  5235  001D4A  0F89               	addlw	137
  5236  001D4C  5E29               	subwf	___ftdiv@exp,f,c
  5237  001D4E  C01E  F02A         	movff	___ftdiv@f1+2,___ftdiv@sign
  5238  001D52  5021               	movf	___ftdiv@f2+2,w,c
  5239  001D54  1A2A               	xorwf	___ftdiv@sign,f,c
  5240  001D56  0E80               	movlw	128
  5241  001D58  162A               	andwf	___ftdiv@sign,f,c
  5242  001D5A  8E1D               	bsf	___ftdiv@f1+1,7,c
  5243  001D5C  0EFF               	movlw	255
  5244  001D5E  161C               	andwf	___ftdiv@f1,f,c
  5245  001D60  0EFF               	movlw	255
  5246  001D62  161D               	andwf	___ftdiv@f1+1,f,c
  5247  001D64  0E00               	movlw	0
  5248  001D66  161E               	andwf	___ftdiv@f1+2,f,c
  5249  001D68  8E20               	bsf	___ftdiv@f2+1,7,c
  5250  001D6A  0EFF               	movlw	255
  5251  001D6C  161F               	andwf	___ftdiv@f2,f,c
  5252  001D6E  0EFF               	movlw	255
  5253  001D70  1620               	andwf	___ftdiv@f2+1,f,c
  5254  001D72  0E00               	movlw	0
  5255  001D74  1621               	andwf	___ftdiv@f2+2,f,c
  5256  001D76  0E18               	movlw	24
  5257  001D78  6E25               	movwf	___ftdiv@cntr,c
  5258  001D7A                     l2612:
  5259  001D7A  90D8               	bcf	status,0,c
  5260  001D7C  3626               	rlcf	___ftdiv@f3,f,c
  5261  001D7E  3627               	rlcf	___ftdiv@f3+1,f,c
  5262  001D80  3628               	rlcf	___ftdiv@f3+2,f,c
  5263  001D82  501F               	movf	___ftdiv@f2,w,c
  5264  001D84  5C1C               	subwf	___ftdiv@f1,w,c
  5265  001D86  5020               	movf	___ftdiv@f2+1,w,c
  5266  001D88  581D               	subwfb	___ftdiv@f1+1,w,c
  5267  001D8A  5021               	movf	___ftdiv@f2+2,w,c
  5268  001D8C  581E               	subwfb	___ftdiv@f1+2,w,c
  5269  001D8E  A0D8               	btfss	status,0,c
  5270  001D90  D007               	goto	l773
  5271  001D92  501F               	movf	___ftdiv@f2,w,c
  5272  001D94  5E1C               	subwf	___ftdiv@f1,f,c
  5273  001D96  5020               	movf	___ftdiv@f2+1,w,c
  5274  001D98  5A1D               	subwfb	___ftdiv@f1+1,f,c
  5275  001D9A  5021               	movf	___ftdiv@f2+2,w,c
  5276  001D9C  5A1E               	subwfb	___ftdiv@f1+2,f,c
  5277  001D9E  8026               	bsf	___ftdiv@f3,0,c
  5278  001DA0                     l773:
  5279  001DA0  90D8               	bcf	status,0,c
  5280  001DA2  361C               	rlcf	___ftdiv@f1,f,c
  5281  001DA4  361D               	rlcf	___ftdiv@f1+1,f,c
  5282  001DA6  361E               	rlcf	___ftdiv@f1+2,f,c
  5283  001DA8  2E25               	decfsz	___ftdiv@cntr,f,c
  5284  001DAA  D7E7               	goto	l2612
  5285  001DAC  C026  F001         	movff	___ftdiv@f3,___ftpack@arg
  5286  001DB0  C027  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5287  001DB4  C028  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5288  001DB8  C029  F004         	movff	___ftdiv@exp,___ftpack@exp
  5289  001DBC  C02A  F005         	movff	___ftdiv@sign,___ftpack@sign
  5290  001DC0  ECE9  F00E         	call	___ftpack	;wreg free
  5291  001DC4  C001  F01C         	movff	?___ftpack,?___ftdiv
  5292  001DC8  C002  F01D         	movff	?___ftpack+1,?___ftdiv+1
  5293  001DCC  C003  F01E         	movff	?___ftpack+2,?___ftdiv+2
  5294  001DD0  0012               	return	
  5295  001DD2                     __end_of___ftdiv:
  5296                           	opt stack 0
  5297                           tblptru	equ	0xFF8
  5298                           tblptrh	equ	0xFF7
  5299                           tblptrl	equ	0xFF6
  5300                           tablat	equ	0xFF5
  5301                           prodl	equ	0xFF3
  5302                           indf2	equ	0xFDF
  5303                           postinc2	equ	0xFDE
  5304                           postdec2	equ	0xFDD
  5305                           fsr2h	equ	0xFDA
  5306                           fsr2l	equ	0xFD9
  5307                           status	equ	0xFD8
  5308                           
  5309 ;; *************** function ___ftadd *****************
  5310 ;; Defined at:
  5311 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;  f1              3   15[COMRAM] float 
  5314 ;;  f2              3   18[COMRAM] float 
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;  exp1            1   26[COMRAM] unsigned char 
  5317 ;;  exp2            1   25[COMRAM] unsigned char 
  5318 ;;  sign            1   24[COMRAM] unsigned char 
  5319 ;; Return value:  Size  Location     Type
  5320 ;;                  3   15[COMRAM] float 
  5321 ;; Registers used:
  5322 ;;		wreg, status,2, status,0, cstack
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5328 ;;      Params:         6       0       0       0       0       0       0       0       0
  5329 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5330 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5331 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5332 ;;Total ram usage:       12 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    1
  5335 ;; This function calls:
  5336 ;;		___ftpack
  5337 ;; This function is called by:
  5338 ;;		_main
  5339 ;;		_lcd_printf
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text17
  5344  001958                     __ptext17:
  5345                           	opt stack 0
  5346  001958                     ___ftadd:
  5347                           	opt stack 28
  5348                           
  5349                           ;incstack = 0
  5350  001958  C012  F016         	movff	___ftadd@f1+2,??___ftadd
  5351  00195C  6A17               	clrf	(??___ftadd+1)& (0+255),c
  5352  00195E  6A18               	clrf	(??___ftadd+2)& (0+255),c
  5353  001960  3411               	rlcf	___ftadd@f1+1,w,c
  5354  001962  3616               	rlcf	??___ftadd& (0+255),f,c
  5355  001964  E301               	bnc	u2121
  5356  001966  8017               	bsf	(??___ftadd+1)& (0+255),0,c
  5357  001968                     u2121:
  5358  001968  5016               	movf	??___ftadd,w,c
  5359  00196A  6E1B               	movwf	___ftadd@exp1,c
  5360  00196C  C015  F016         	movff	___ftadd@f2+2,??___ftadd
  5361  001970  6A17               	clrf	(??___ftadd+1)& (0+255),c
  5362  001972  6A18               	clrf	(??___ftadd+2)& (0+255),c
  5363  001974  3414               	rlcf	___ftadd@f2+1,w,c
  5364  001976  3616               	rlcf	??___ftadd& (0+255),f,c
  5365  001978  E301               	bnc	u2131
  5366  00197A  8017               	bsf	(??___ftadd+1)& (0+255),0,c
  5367  00197C                     u2131:
  5368  00197C  5016               	movf	??___ftadd,w,c
  5369  00197E  6E1A               	movwf	___ftadd@exp2,c
  5370  001980  501B               	movf	___ftadd@exp1,w,c
  5371  001982  B4D8               	btfsc	status,2,c
  5372  001984  D00B               	goto	l738
  5373  001986  501A               	movf	___ftadd@exp2,w,c
  5374  001988  5C1B               	subwf	___ftadd@exp1,w,c
  5375  00198A  B0D8               	btfsc	status,0,c
  5376  00198C  D00E               	goto	l2518
  5377  00198E  501B               	movf	___ftadd@exp1,w,c
  5378  001990  0800               	sublw	0
  5379  001992  241A               	addwf	___ftadd@exp2,w,c
  5380  001994  6E16               	movwf	??___ftadd& (0+255),c
  5381  001996  0E18               	movlw	24
  5382  001998  6416               	cpfsgt	??___ftadd,c
  5383  00199A  D007               	goto	l2518
  5384  00199C                     l738:
  5385  00199C  C013  F010         	movff	___ftadd@f2,?___ftadd
  5386  0019A0  C014  F011         	movff	___ftadd@f2+1,?___ftadd+1
  5387  0019A4  C015  F012         	movff	___ftadd@f2+2,?___ftadd+2
  5388  0019A8  0012               	return	
  5389  0019AA                     l2518:
  5390  0019AA  501A               	movf	___ftadd@exp2,w,c
  5391  0019AC  B4D8               	btfsc	status,2,c
  5392  0019AE  D00B               	goto	l742
  5393  0019B0  501B               	movf	___ftadd@exp1,w,c
  5394  0019B2  5C1A               	subwf	___ftadd@exp2,w,c
  5395  0019B4  B0D8               	btfsc	status,0,c
  5396  0019B6  D00E               	goto	l2524
  5397  0019B8  501A               	movf	___ftadd@exp2,w,c
  5398  0019BA  0800               	sublw	0
  5399  0019BC  241B               	addwf	___ftadd@exp1,w,c
  5400  0019BE  6E16               	movwf	??___ftadd& (0+255),c
  5401  0019C0  0E18               	movlw	24
  5402  0019C2  6416               	cpfsgt	??___ftadd,c
  5403  0019C4  D007               	goto	l2524
  5404  0019C6                     l742:
  5405  0019C6  C010  F010         	movff	___ftadd@f1,?___ftadd
  5406  0019CA  C011  F011         	movff	___ftadd@f1+1,?___ftadd+1
  5407  0019CE  C012  F012         	movff	___ftadd@f1+2,?___ftadd+2
  5408  0019D2  0012               	return	
  5409  0019D4                     l2524:
  5410  0019D4  0E06               	movlw	6
  5411  0019D6  6E19               	movwf	___ftadd@sign,c
  5412  0019D8  BE12               	btfsc	___ftadd@f1+2,7,c
  5413  0019DA  8E19               	bsf	___ftadd@sign,7,c
  5414  0019DC  BE15               	btfsc	___ftadd@f2+2,7,c
  5415  0019DE  8C19               	bsf	___ftadd@sign,6,c
  5416  0019E0  8E11               	bsf	___ftadd@f1+1,7,c
  5417  0019E2  0EFF               	movlw	255
  5418  0019E4  1610               	andwf	___ftadd@f1,f,c
  5419  0019E6  0EFF               	movlw	255
  5420  0019E8  1611               	andwf	___ftadd@f1+1,f,c
  5421  0019EA  0E00               	movlw	0
  5422  0019EC  1612               	andwf	___ftadd@f1+2,f,c
  5423  0019EE  8E14               	bsf	___ftadd@f2+1,7,c
  5424  0019F0  0EFF               	movlw	255
  5425  0019F2  1613               	andwf	___ftadd@f2,f,c
  5426  0019F4  0EFF               	movlw	255
  5427  0019F6  1614               	andwf	___ftadd@f2+1,f,c
  5428  0019F8  0E00               	movlw	0
  5429  0019FA  1615               	andwf	___ftadd@f2+2,f,c
  5430  0019FC  501A               	movf	___ftadd@exp2,w,c
  5431  0019FE  5C1B               	subwf	___ftadd@exp1,w,c
  5432  001A00  B0D8               	btfsc	status,0,c
  5433  001A02  D01B               	goto	l2550
  5434  001A04                     l2540:
  5435  001A04  90D8               	bcf	status,0,c
  5436  001A06  3613               	rlcf	___ftadd@f2,f,c
  5437  001A08  3614               	rlcf	___ftadd@f2+1,f,c
  5438  001A0A  3615               	rlcf	___ftadd@f2+2,f,c
  5439  001A0C  061A               	decf	___ftadd@exp2,f,c
  5440  001A0E  501B               	movf	___ftadd@exp1,w,c
  5441  001A10  181A               	xorwf	___ftadd@exp2,w,c
  5442  001A12  B4D8               	btfsc	status,2,c
  5443  001A14  D00D               	goto	l2548
  5444  001A16  0619               	decf	___ftadd@sign,f,c
  5445  001A18  C019  F016         	movff	___ftadd@sign,??___ftadd
  5446  001A1C  0E07               	movlw	7
  5447  001A1E  1616               	andwf	??___ftadd,f,c
  5448  001A20  B4D8               	btfsc	status,2,c
  5449  001A22  D006               	goto	l2548
  5450  001A24  D7EF               	goto	l2540
  5451  001A26                     l2546:
  5452  001A26  90D8               	bcf	status,0,c
  5453  001A28  3212               	rrcf	___ftadd@f1+2,f,c
  5454  001A2A  3211               	rrcf	___ftadd@f1+1,f,c
  5455  001A2C  3210               	rrcf	___ftadd@f1,f,c
  5456  001A2E  2A1B               	incf	___ftadd@exp1,f,c
  5457  001A30                     l2548:
  5458  001A30  501A               	movf	___ftadd@exp2,w,c
  5459  001A32  181B               	xorwf	___ftadd@exp1,w,c
  5460  001A34  B4D8               	btfsc	status,2,c
  5461  001A36  D01F               	goto	l753
  5462  001A38  D7F6               	goto	l2546
  5463  001A3A                     l2550:
  5464  001A3A  501B               	movf	___ftadd@exp1,w,c
  5465  001A3C  5C1A               	subwf	___ftadd@exp2,w,c
  5466  001A3E  B0D8               	btfsc	status,0,c
  5467  001A40  D01A               	goto	l753
  5468  001A42                     l2552:
  5469  001A42  90D8               	bcf	status,0,c
  5470  001A44  3610               	rlcf	___ftadd@f1,f,c
  5471  001A46  3611               	rlcf	___ftadd@f1+1,f,c
  5472  001A48  3612               	rlcf	___ftadd@f1+2,f,c
  5473  001A4A  061B               	decf	___ftadd@exp1,f,c
  5474  001A4C  501B               	movf	___ftadd@exp1,w,c
  5475  001A4E  181A               	xorwf	___ftadd@exp2,w,c
  5476  001A50  B4D8               	btfsc	status,2,c
  5477  001A52  D00D               	goto	l2560
  5478  001A54  0619               	decf	___ftadd@sign,f,c
  5479  001A56  C019  F016         	movff	___ftadd@sign,??___ftadd
  5480  001A5A  0E07               	movlw	7
  5481  001A5C  1616               	andwf	??___ftadd,f,c
  5482  001A5E  B4D8               	btfsc	status,2,c
  5483  001A60  D006               	goto	l2560
  5484  001A62  D7EF               	goto	l2552
  5485  001A64                     l2558:
  5486  001A64  90D8               	bcf	status,0,c
  5487  001A66  3215               	rrcf	___ftadd@f2+2,f,c
  5488  001A68  3214               	rrcf	___ftadd@f2+1,f,c
  5489  001A6A  3213               	rrcf	___ftadd@f2,f,c
  5490  001A6C  2A1A               	incf	___ftadd@exp2,f,c
  5491  001A6E                     l2560:
  5492  001A6E  501A               	movf	___ftadd@exp2,w,c
  5493  001A70  181B               	xorwf	___ftadd@exp1,w,c
  5494  001A72  A4D8               	btfss	status,2,c
  5495  001A74  D7F7               	goto	l2558
  5496  001A76                     l753:
  5497  001A76  AE19               	btfss	___ftadd@sign,7,c
  5498  001A78  D00C               	goto	l762
  5499  001A7A  0EFF               	movlw	255
  5500  001A7C  1A10               	xorwf	___ftadd@f1,f,c
  5501  001A7E  0EFF               	movlw	255
  5502  001A80  1A11               	xorwf	___ftadd@f1+1,f,c
  5503  001A82  0EFF               	movlw	255
  5504  001A84  1A12               	xorwf	___ftadd@f1+2,f,c
  5505  001A86  0E01               	movlw	1
  5506  001A88  2610               	addwf	___ftadd@f1,f,c
  5507  001A8A  0E00               	movlw	0
  5508  001A8C  2211               	addwfc	___ftadd@f1+1,f,c
  5509  001A8E  0E00               	movlw	0
  5510  001A90  2212               	addwfc	___ftadd@f1+2,f,c
  5511  001A92                     l762:
  5512  001A92  AC19               	btfss	___ftadd@sign,6,c
  5513  001A94  D00C               	goto	l2566
  5514  001A96  0EFF               	movlw	255
  5515  001A98  1A13               	xorwf	___ftadd@f2,f,c
  5516  001A9A  0EFF               	movlw	255
  5517  001A9C  1A14               	xorwf	___ftadd@f2+1,f,c
  5518  001A9E  0EFF               	movlw	255
  5519  001AA0  1A15               	xorwf	___ftadd@f2+2,f,c
  5520  001AA2  0E01               	movlw	1
  5521  001AA4  2613               	addwf	___ftadd@f2,f,c
  5522  001AA6  0E00               	movlw	0
  5523  001AA8  2214               	addwfc	___ftadd@f2+1,f,c
  5524  001AAA  0E00               	movlw	0
  5525  001AAC  2215               	addwfc	___ftadd@f2+2,f,c
  5526  001AAE                     l2566:
  5527  001AAE  0E00               	movlw	0
  5528  001AB0  6E19               	movwf	___ftadd@sign,c
  5529  001AB2  5010               	movf	___ftadd@f1,w,c
  5530  001AB4  2613               	addwf	___ftadd@f2,f,c
  5531  001AB6  5011               	movf	___ftadd@f1+1,w,c
  5532  001AB8  2214               	addwfc	___ftadd@f2+1,f,c
  5533  001ABA  5012               	movf	___ftadd@f1+2,w,c
  5534  001ABC  2215               	addwfc	___ftadd@f2+2,f,c
  5535  001ABE  AE15               	btfss	___ftadd@f2+2,7,c
  5536  001AC0  D00E               	goto	l2576
  5537  001AC2  0EFF               	movlw	255
  5538  001AC4  1A13               	xorwf	___ftadd@f2,f,c
  5539  001AC6  0EFF               	movlw	255
  5540  001AC8  1A14               	xorwf	___ftadd@f2+1,f,c
  5541  001ACA  0EFF               	movlw	255
  5542  001ACC  1A15               	xorwf	___ftadd@f2+2,f,c
  5543  001ACE  0E01               	movlw	1
  5544  001AD0  2613               	addwf	___ftadd@f2,f,c
  5545  001AD2  0E00               	movlw	0
  5546  001AD4  2214               	addwfc	___ftadd@f2+1,f,c
  5547  001AD6  0E00               	movlw	0
  5548  001AD8  2215               	addwfc	___ftadd@f2+2,f,c
  5549  001ADA  0E01               	movlw	1
  5550  001ADC  6E19               	movwf	___ftadd@sign,c
  5551  001ADE                     l2576:
  5552  001ADE  C013  F001         	movff	___ftadd@f2,___ftpack@arg
  5553  001AE2  C014  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5554  001AE6  C015  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5555  001AEA  C01B  F004         	movff	___ftadd@exp1,___ftpack@exp
  5556  001AEE  C019  F005         	movff	___ftadd@sign,___ftpack@sign
  5557  001AF2  ECE9  F00E         	call	___ftpack	;wreg free
  5558  001AF6  C001  F010         	movff	?___ftpack,?___ftadd
  5559  001AFA  C002  F011         	movff	?___ftpack+1,?___ftadd+1
  5560  001AFE  C003  F012         	movff	?___ftpack+2,?___ftadd+2
  5561  001B02  0012               	return	
  5562  001B04                     __end_of___ftadd:
  5563                           	opt stack 0
  5564                           tblptru	equ	0xFF8
  5565                           tblptrh	equ	0xFF7
  5566                           tblptrl	equ	0xFF6
  5567                           tablat	equ	0xFF5
  5568                           prodl	equ	0xFF3
  5569                           indf2	equ	0xFDF
  5570                           postinc2	equ	0xFDE
  5571                           postdec2	equ	0xFDD
  5572                           fsr2h	equ	0xFDA
  5573                           fsr2l	equ	0xFD9
  5574                           status	equ	0xFD8
  5575                           
  5576 ;; *************** function _lcd_init *****************
  5577 ;; Defined at:
  5578 ;;		line 101 in file "iut_lcd.c"
  5579 ;; Parameters:    Size  Location     Type
  5580 ;;		None
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;		None
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  1    wreg      void 
  5585 ;; Registers used:
  5586 ;;		wreg, status,2, status,0, cstack
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5592 ;;      Params:         0       0       0       0       0       0       0       0       0
  5593 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5594 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5595 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5596 ;;Total ram usage:        1 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    4
  5599 ;; This function calls:
  5600 ;;		_lcd_clear
  5601 ;;		_lcd_clock_e
  5602 ;;		_lcd_write_cmd_busy
  5603 ;; This function is called by:
  5604 ;;		_main
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           	psect	text18
  5609  001F26                     __ptext18:
  5610                           	opt stack 0
  5611  001F26                     _lcd_init:
  5612                           	opt stack 26
  5613                           
  5614                           ;iut_lcd.c: 102: TRISD &= ~0x07;
  5615                           
  5616                           ;incstack = 0
  5617  001F26  0EF8               	movlw	248
  5618  001F28  1695               	andwf	3989,f,c	;volatile
  5619                           
  5620                           ;iut_lcd.c: 103: TRISD |= 0xF0;
  5621  001F2A  0EF0               	movlw	240
  5622  001F2C  1295               	iorwf	3989,f,c	;volatile
  5623                           
  5624                           ;iut_lcd.c: 104: PORTD &= 0x08;
  5625  001F2E  0E08               	movlw	8
  5626  001F30  1683               	andwf	3971,f,c	;volatile
  5627                           
  5628                           ;iut_lcd.c: 105: _delay(180000);
  5629  001F32  0EEA               	movlw	234
  5630  001F34  6E03               	movwf	??_lcd_init& (0+255),c
  5631  001F36  0EC3               	movlw	195
  5632  001F38                     u3827:
  5633  001F38  2EE8               	decfsz	wreg,f,c
  5634  001F3A  D7FE               	bra	u3827
  5635  001F3C  2E03               	decfsz	??_lcd_init& (0+255),f,c
  5636  001F3E  D7FC               	bra	u3827
  5637  001F40  F000               	nop	
  5638                           
  5639                           ;iut_lcd.c: 107: TRISD &= 0x0f;
  5640  001F42  0E0F               	movlw	15
  5641  001F44  1695               	andwf	3989,f,c	;volatile
  5642                           
  5643                           ;iut_lcd.c: 109: PORTD &= 0x0f;
  5644  001F46  0E0F               	movlw	15
  5645  001F48  1683               	andwf	3971,f,c	;volatile
  5646                           
  5647                           ;iut_lcd.c: 110: PORTD |= 0b00110000;
  5648  001F4A  0E30               	movlw	48
  5649  001F4C  1283               	iorwf	3971,f,c	;volatile
  5650                           
  5651                           ;iut_lcd.c: 111: lcd_clock_e();
  5652  001F4E  ECBE  F011         	call	_lcd_clock_e	;wreg free
  5653                           
  5654                           ;iut_lcd.c: 112: _delay(60000);
  5655  001F52  0E4E               	movlw	78
  5656  001F54  6E03               	movwf	??_lcd_init& (0+255),c
  5657  001F56  0EEB               	movlw	235
  5658  001F58                     u3837:
  5659  001F58  2EE8               	decfsz	wreg,f,c
  5660  001F5A  D7FE               	bra	u3837
  5661  001F5C  2E03               	decfsz	??_lcd_init& (0+255),f,c
  5662  001F5E  D7FC               	bra	u3837
  5663  001F60  F000               	nop	
  5664                           
  5665                           ;iut_lcd.c: 114: PORTD &= 0x0f;
  5666  001F62  0E0F               	movlw	15
  5667  001F64  1683               	andwf	3971,f,c	;volatile
  5668                           
  5669                           ;iut_lcd.c: 115: PORTD |= 0b00110000;
  5670  001F66  0E30               	movlw	48
  5671  001F68  1283               	iorwf	3971,f,c	;volatile
  5672                           
  5673                           ;iut_lcd.c: 116: lcd_clock_e();
  5674  001F6A  ECBE  F011         	call	_lcd_clock_e	;wreg free
  5675                           
  5676                           ;iut_lcd.c: 117: _delay(1200);
  5677  001F6E  0EF0               	movlw	240
  5678  001F70                     u3847:
  5679  001F70  D000               	nop2	
  5680  001F72  2EE8               	decfsz	wreg,f,c
  5681  001F74  D7FD               	bra	u3847
  5682                           
  5683                           ;iut_lcd.c: 119: PORTD &= 0x0f;
  5684  001F76  0E0F               	movlw	15
  5685  001F78  1683               	andwf	3971,f,c	;volatile
  5686                           
  5687                           ;iut_lcd.c: 120: PORTD |= 0b00110000;
  5688  001F7A  0E30               	movlw	48
  5689  001F7C  1283               	iorwf	3971,f,c	;volatile
  5690                           
  5691                           ;iut_lcd.c: 121: lcd_clock_e();
  5692  001F7E  ECBE  F011         	call	_lcd_clock_e	;wreg free
  5693                           
  5694                           ;iut_lcd.c: 122: _delay(1200);
  5695  001F82  0EF0               	movlw	240
  5696  001F84                     u3857:
  5697  001F84  D000               	nop2	
  5698  001F86  2EE8               	decfsz	wreg,f,c
  5699  001F88  D7FD               	bra	u3857
  5700                           
  5701                           ;iut_lcd.c: 124: PORTD &= 0x0f;
  5702  001F8A  0E0F               	movlw	15
  5703  001F8C  1683               	andwf	3971,f,c	;volatile
  5704                           
  5705                           ;iut_lcd.c: 125: PORTD |= 0b00100000;
  5706  001F8E  8A83               	bsf	3971,5,c	;volatile
  5707                           
  5708                           ;iut_lcd.c: 126: lcd_clock_e();
  5709  001F90  ECBE  F011         	call	_lcd_clock_e	;wreg free
  5710                           
  5711                           ;iut_lcd.c: 127: _delay(1200);
  5712  001F94  0EF0               	movlw	240
  5713  001F96                     u3867:
  5714  001F96  D000               	nop2	
  5715  001F98  2EE8               	decfsz	wreg,f,c
  5716  001F9A  D7FD               	bra	u3867
  5717                           
  5718                           ;iut_lcd.c: 129: TRISD |= 0xf0;
  5719  001F9C  0EF0               	movlw	240
  5720  001F9E  1295               	iorwf	3989,f,c	;volatile
  5721                           
  5722                           ;iut_lcd.c: 131: lcd_write_cmd_busy(0x28);
  5723  001FA0  0E28               	movlw	40
  5724  001FA2  ECA9  F011         	call	_lcd_write_cmd_busy
  5725                           
  5726                           ;iut_lcd.c: 132: lcd_write_cmd_busy(0x08);
  5727  001FA6  0E08               	movlw	8
  5728  001FA8  ECA9  F011         	call	_lcd_write_cmd_busy
  5729                           
  5730                           ;iut_lcd.c: 133: lcd_clear();
  5731  001FAC  ECCC  F011         	call	_lcd_clear	;wreg free
  5732                           
  5733                           ;iut_lcd.c: 134: lcd_write_cmd_busy(0x06);
  5734  001FB0  0E06               	movlw	6
  5735  001FB2  ECA9  F011         	call	_lcd_write_cmd_busy
  5736                           
  5737                           ;iut_lcd.c: 135: lcd_write_cmd_busy(0x0C);
  5738  001FB6  0E0C               	movlw	12
  5739  001FB8  ECA9  F011         	call	_lcd_write_cmd_busy
  5740  001FBC  0012               	return		;funcret
  5741  001FBE                     __end_of_lcd_init:
  5742                           	opt stack 0
  5743                           tblptru	equ	0xFF8
  5744                           tblptrh	equ	0xFF7
  5745                           tblptrl	equ	0xFF6
  5746                           tablat	equ	0xFF5
  5747                           prodl	equ	0xFF3
  5748                           wreg	equ	0xFE8
  5749                           indf2	equ	0xFDF
  5750                           postinc2	equ	0xFDE
  5751                           postdec2	equ	0xFDD
  5752                           fsr2h	equ	0xFDA
  5753                           fsr2l	equ	0xFD9
  5754                           status	equ	0xFD8
  5755                           
  5756 ;; *************** function _lcd_clear *****************
  5757 ;; Defined at:
  5758 ;;		line 145 in file "iut_lcd.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;		None
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;		None
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  1    wreg      void 
  5765 ;; Registers used:
  5766 ;;		wreg, status,2, status,0, cstack
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5772 ;;      Params:         0       0       0       0       0       0       0       0       0
  5773 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5774 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5775 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5776 ;;Total ram usage:        0 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; Hardware stack levels required when called:    3
  5779 ;; This function calls:
  5780 ;;		_lcd_write_cmd_busy
  5781 ;; This function is called by:
  5782 ;;		_lcd_init
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           	psect	text19
  5787  002398                     __ptext19:
  5788                           	opt stack 0
  5789  002398                     _lcd_clear:
  5790                           	opt stack 26
  5791                           
  5792                           ;iut_lcd.c: 146: lcd_write_cmd_busy(0x01);
  5793                           
  5794                           ;incstack = 0
  5795  002398  0E01               	movlw	1
  5796  00239A  ECA9  F011         	call	_lcd_write_cmd_busy
  5797  00239E  0012               	return		;funcret
  5798  0023A0                     __end_of_lcd_clear:
  5799                           	opt stack 0
  5800                           tblptru	equ	0xFF8
  5801                           tblptrh	equ	0xFF7
  5802                           tblptrl	equ	0xFF6
  5803                           tablat	equ	0xFF5
  5804                           prodl	equ	0xFF3
  5805                           wreg	equ	0xFE8
  5806                           indf2	equ	0xFDF
  5807                           postinc2	equ	0xFDE
  5808                           postdec2	equ	0xFDD
  5809                           fsr2h	equ	0xFDA
  5810                           fsr2l	equ	0xFD9
  5811                           status	equ	0xFD8
  5812                           
  5813 ;; *************** function _lcd_write_cmd_busy *****************
  5814 ;; Defined at:
  5815 ;;		line 764 in file "iut_lcd.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  c               1    wreg     unsigned char 
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;  c               1    1[COMRAM] unsigned char 
  5820 ;; Return value:  Size  Location     Type
  5821 ;;                  1    wreg      void 
  5822 ;; Registers used:
  5823 ;;		wreg, status,2, status,0, cstack
  5824 ;; Tracked objects:
  5825 ;;		On entry : 0/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5829 ;;      Params:         0       0       0       0       0       0       0       0       0
  5830 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5831 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5832 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5833 ;;Total ram usage:        1 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; Hardware stack levels required when called:    2
  5836 ;; This function calls:
  5837 ;;		_lcd_busy
  5838 ;;		_lcd_write_cmd_data
  5839 ;; This function is called by:
  5840 ;;		_lcd_init
  5841 ;;		_lcd_clear
  5842 ;;		_lcd_position
  5843 ;;		_lcd_putc
  5844 ;; This function uses a non-reentrant model
  5845 ;;
  5846                           
  5847                           	psect	text20
  5848  002352                     __ptext20:
  5849                           	opt stack 0
  5850  002352                     _lcd_write_cmd_busy:
  5851                           	opt stack 26
  5852                           
  5853                           ;incstack = 0
  5854                           ;lcd_write_cmd_busy@c stored from wreg
  5855  002352  6E02               	movwf	lcd_write_cmd_busy@c,c
  5856  002354                     l2428:
  5857  002354  ECC1  F010         	call	_lcd_busy	;wreg free
  5858  002358  0900               	iorlw	0
  5859  00235A  A4D8               	btfss	status,2,c
  5860  00235C  D7FB               	goto	l2428
  5861                           
  5862                           ;iut_lcd.c: 766: PORTDbits.RD1 = 0;
  5863  00235E  9283               	bcf	3971,1,c	;volatile
  5864                           
  5865                           ;iut_lcd.c: 767: lcd_write_cmd_data(c);
  5866  002360  5002               	movf	lcd_write_cmd_busy@c,w,c
  5867  002362  EC16  F011         	call	_lcd_write_cmd_data
  5868  002366  0012               	return		;funcret
  5869  002368                     __end_of_lcd_write_cmd_busy:
  5870                           	opt stack 0
  5871                           tblptru	equ	0xFF8
  5872                           tblptrh	equ	0xFF7
  5873                           tblptrl	equ	0xFF6
  5874                           tablat	equ	0xFF5
  5875                           prodl	equ	0xFF3
  5876                           wreg	equ	0xFE8
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           postdec2	equ	0xFDD
  5880                           fsr2h	equ	0xFDA
  5881                           fsr2l	equ	0xFD9
  5882                           status	equ	0xFD8
  5883                           
  5884 ;; *************** function _lcd_write_cmd_data *****************
  5885 ;; Defined at:
  5886 ;;		line 746 in file "iut_lcd.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  c               1    wreg     unsigned char 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  c               1    0[COMRAM] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      void 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0, cstack
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5900 ;;      Params:         0       0       0       0       0       0       0       0       0
  5901 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5902 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5903 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5904 ;;Total ram usage:        1 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    1
  5907 ;; This function calls:
  5908 ;;		_lcd_clock_e
  5909 ;; This function is called by:
  5910 ;;		_lcd_write_data_busy
  5911 ;;		_lcd_write_cmd_busy
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text21
  5916  00222C                     __ptext21:
  5917                           	opt stack 0
  5918  00222C                     _lcd_write_cmd_data:
  5919                           	opt stack 27
  5920                           
  5921                           ;incstack = 0
  5922                           ;lcd_write_cmd_data@c stored from wreg
  5923  00222C  6E01               	movwf	lcd_write_cmd_data@c,c
  5924                           
  5925                           ;iut_lcd.c: 747: PORTDbits.RD2 = 0;
  5926  00222E  9483               	bcf	3971,2,c	;volatile
  5927                           
  5928                           ;iut_lcd.c: 748: TRISD &= 0x0f;
  5929  002230  0E0F               	movlw	15
  5930  002232  1695               	andwf	3989,f,c	;volatile
  5931                           
  5932                           ;iut_lcd.c: 749: PORTD &= 0x0f;
  5933  002234  0E0F               	movlw	15
  5934  002236  1683               	andwf	3971,f,c	;volatile
  5935                           
  5936                           ;iut_lcd.c: 750: PORTD |= (c & 0xf0);
  5937  002238  5001               	movf	lcd_write_cmd_data@c,w,c
  5938  00223A  0BF0               	andlw	240
  5939  00223C  1283               	iorwf	3971,f,c	;volatile
  5940                           
  5941                           ;iut_lcd.c: 751: lcd_clock_e();
  5942  00223E  ECBE  F011         	call	_lcd_clock_e	;wreg free
  5943                           
  5944                           ;iut_lcd.c: 752: PORTD &= 0x0f;
  5945  002242  0E0F               	movlw	15
  5946  002244  1683               	andwf	3971,f,c	;volatile
  5947                           
  5948                           ;iut_lcd.c: 753: PORTD |= ((c << 4)&0xf0);
  5949  002246  3801               	swapf	lcd_write_cmd_data@c,w,c
  5950  002248  0BF0               	andlw	240
  5951  00224A  0BF0               	andlw	240
  5952  00224C  1283               	iorwf	3971,f,c	;volatile
  5953                           
  5954                           ;iut_lcd.c: 754: lcd_clock_e();
  5955  00224E  ECBE  F011         	call	_lcd_clock_e	;wreg free
  5956                           
  5957                           ;iut_lcd.c: 755: TRISD |= 0xf0;
  5958  002252  0EF0               	movlw	240
  5959  002254  1295               	iorwf	3989,f,c	;volatile
  5960  002256  0012               	return		;funcret
  5961  002258                     __end_of_lcd_write_cmd_data:
  5962                           	opt stack 0
  5963                           tblptru	equ	0xFF8
  5964                           tblptrh	equ	0xFF7
  5965                           tblptrl	equ	0xFF6
  5966                           tablat	equ	0xFF5
  5967                           prodl	equ	0xFF3
  5968                           wreg	equ	0xFE8
  5969                           indf2	equ	0xFDF
  5970                           postinc2	equ	0xFDE
  5971                           postdec2	equ	0xFDD
  5972                           fsr2h	equ	0xFDA
  5973                           fsr2l	equ	0xFD9
  5974                           status	equ	0xFD8
  5975                           
  5976 ;; *************** function _lcd_busy *****************
  5977 ;; Defined at:
  5978 ;;		line 770 in file "iut_lcd.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;		None
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;		None
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      unsigned char 
  5985 ;; Registers used:
  5986 ;;		wreg, cstack
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5992 ;;      Params:         0       0       0       0       0       0       0       0       0
  5993 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5994 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5995 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5996 ;;Total ram usage:        0 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    1
  5999 ;; This function calls:
  6000 ;;		_lcd_clock_e
  6001 ;; This function is called by:
  6002 ;;		_lcd_write_data_busy
  6003 ;;		_lcd_write_cmd_busy
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007                           	psect	text22
  6008  002182                     __ptext22:
  6009                           	opt stack 0
  6010  002182                     _lcd_busy:
  6011                           	opt stack 27
  6012                           
  6013                           ;iut_lcd.c: 771: PORTDbits.RD2 = 1;
  6014                           
  6015                           ;incstack = 0
  6016  002182  8483               	bsf	3971,2,c	;volatile
  6017                           
  6018                           ;iut_lcd.c: 772: PORTDbits.RD1 = 0;
  6019  002184  9283               	bcf	3971,1,c	;volatile
  6020                           
  6021                           ;iut_lcd.c: 773: __nop(); __nop(); __nop();;
  6022  002186  F000               	nop	
  6023  002188  F000               	nop	
  6024  00218A  F000               	nop	
  6025                           
  6026                           ;iut_lcd.c: 774: PORTDbits.RD0 = 1;
  6027  00218C  8083               	bsf	3971,0,c	;volatile
  6028                           
  6029                           ;iut_lcd.c: 775: __nop(); __nop(); __nop();;
  6030  00218E  F000               	nop	
  6031  002190  F000               	nop	
  6032  002192  F000               	nop	
  6033                           
  6034                           ;iut_lcd.c: 776: if (PORTD & 0x80) {
  6035  002194  AE83               	btfss	3971,7,c	;volatile
  6036  002196  D009               	goto	l332
  6037                           
  6038                           ;iut_lcd.c: 777: PORTDbits.RD0 = 0;
  6039  002198  9083               	bcf	3971,0,c	;volatile
  6040                           
  6041                           ;iut_lcd.c: 778: __nop(); __nop(); __nop();;
  6042  00219A  F000               	nop	
  6043  00219C  F000               	nop	
  6044  00219E  F000               	nop	
  6045                           
  6046                           ;iut_lcd.c: 779: lcd_clock_e();
  6047  0021A0  ECBE  F011         	call	_lcd_clock_e	;wreg free
  6048                           
  6049                           ;iut_lcd.c: 780: PORTDbits.RD2 = 0;
  6050  0021A4  9483               	bcf	3971,2,c	;volatile
  6051                           
  6052                           ;iut_lcd.c: 781: return 1;
  6053  0021A6  0E01               	movlw	1
  6054                           
  6055                           ;iut_lcd.c: 782: } else {
  6056  0021A8  0012               	return	
  6057  0021AA                     l332:
  6058                           
  6059                           ;iut_lcd.c: 783: PORTDbits.RD0 = 0;
  6060  0021AA  9083               	bcf	3971,0,c	;volatile
  6061                           
  6062                           ;iut_lcd.c: 784: __nop(); __nop(); __nop();;
  6063  0021AC  F000               	nop	
  6064  0021AE  F000               	nop	
  6065  0021B0  F000               	nop	
  6066                           
  6067                           ;iut_lcd.c: 785: lcd_clock_e();
  6068  0021B2  ECBE  F011         	call	_lcd_clock_e	;wreg free
  6069                           
  6070                           ;iut_lcd.c: 786: PORTDbits.RD2 = 0;
  6071  0021B6  9483               	bcf	3971,2,c	;volatile
  6072                           
  6073                           ;iut_lcd.c: 787: return 0;
  6074  0021B8  0E00               	movlw	0
  6075  0021BA  0012               	return	
  6076  0021BC                     __end_of_lcd_busy:
  6077                           	opt stack 0
  6078                           tblptru	equ	0xFF8
  6079                           tblptrh	equ	0xFF7
  6080                           tblptrl	equ	0xFF6
  6081                           tablat	equ	0xFF5
  6082                           prodl	equ	0xFF3
  6083                           wreg	equ	0xFE8
  6084                           indf2	equ	0xFDF
  6085                           postinc2	equ	0xFDE
  6086                           postdec2	equ	0xFDD
  6087                           fsr2h	equ	0xFDA
  6088                           fsr2l	equ	0xFD9
  6089                           status	equ	0xFD8
  6090                           
  6091 ;; *************** function _lcd_clock_e *****************
  6092 ;; Defined at:
  6093 ;;		line 791 in file "iut_lcd.c"
  6094 ;; Parameters:    Size  Location     Type
  6095 ;;		None
  6096 ;; Auto vars:     Size  Location     Type
  6097 ;;		None
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  1    wreg      void 
  6100 ;; Registers used:
  6101 ;;		None
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6107 ;;      Params:         0       0       0       0       0       0       0       0       0
  6108 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6109 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6110 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6111 ;;Total ram usage:        0 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; This function calls:
  6114 ;;		Nothing
  6115 ;; This function is called by:
  6116 ;;		_lcd_init
  6117 ;;		_lcd_write_cmd_data
  6118 ;;		_lcd_busy
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text23
  6123  00237C                     __ptext23:
  6124                           	opt stack 0
  6125  00237C                     _lcd_clock_e:
  6126                           	opt stack 27
  6127                           
  6128                           ;iut_lcd.c: 792: PORTDbits.RD0 = 1;
  6129                           
  6130                           ;incstack = 0
  6131  00237C  8083               	bsf	3971,0,c	;volatile
  6132                           
  6133                           ;iut_lcd.c: 793: __nop(); __nop(); __nop();;
  6134  00237E  F000               	nop	
  6135  002380  F000               	nop	
  6136  002382  F000               	nop	
  6137                           
  6138                           ;iut_lcd.c: 794: PORTDbits.RD0 = 0;
  6139  002384  9083               	bcf	3971,0,c	;volatile
  6140                           
  6141                           ;iut_lcd.c: 795: __nop(); __nop(); __nop();;
  6142  002386  F000               	nop	
  6143  002388  F000               	nop	
  6144  00238A  F000               	nop	
  6145  00238C  0012               	return		;funcret
  6146  00238E                     __end_of_lcd_clock_e:
  6147                           	opt stack 0
  6148                           tblptru	equ	0xFF8
  6149                           tblptrh	equ	0xFF7
  6150                           tblptrl	equ	0xFF6
  6151                           tablat	equ	0xFF5
  6152                           prodl	equ	0xFF3
  6153                           wreg	equ	0xFE8
  6154                           indf2	equ	0xFDF
  6155                           postinc2	equ	0xFDE
  6156                           postdec2	equ	0xFDD
  6157                           fsr2h	equ	0xFDA
  6158                           fsr2l	equ	0xFD9
  6159                           status	equ	0xFD8
  6160                           
  6161 ;; *************** function _adc_read *****************
  6162 ;; Defined at:
  6163 ;;		line 113 in file "iut_adc.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;  numero_canal    1    wreg     unsigned char 
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;  numero_canal    1    4[COMRAM] unsigned char 
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  2    0[COMRAM] int 
  6170 ;; Registers used:
  6171 ;;		wreg, status,2, status,0
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6177 ;;      Params:         2       0       0       0       0       0       0       0       0
  6178 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6179 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6180 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6181 ;;Total ram usage:        5 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; This function calls:
  6184 ;;		Nothing
  6185 ;; This function is called by:
  6186 ;;		_main
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text24
  6191  0022AC                     __ptext24:
  6192                           	opt stack 0
  6193  0022AC                     _adc_read:
  6194                           	opt stack 30
  6195                           
  6196                           ;incstack = 0
  6197                           ;adc_read@numero_canal stored from wreg
  6198  0022AC  6E05               	movwf	adc_read@numero_canal,c
  6199                           
  6200                           ;iut_adc.c: 115: ADCON0 = ((numero_canal & 0x07) << 2) | 0x01;
  6201  0022AE  C005  F003         	movff	adc_read@numero_canal,??_adc_read
  6202  0022B2  0E07               	movlw	7
  6203  0022B4  1603               	andwf	??_adc_read,f,c
  6204  0022B6  90D8               	bcf	status,0,c
  6205  0022B8  3603               	rlcf	??_adc_read,f,c
  6206  0022BA  90D8               	bcf	status,0,c
  6207  0022BC  3403               	rlcf	??_adc_read,w,c
  6208  0022BE  0901               	iorlw	1
  6209  0022C0  6EC2               	movwf	4034,c	;volatile
  6210                           
  6211                           ;iut_adc.c: 118: ADCON0bits.GO = 1;
  6212  0022C2  82C2               	bsf	4034,1,c	;volatile
  6213  0022C4                     l72:
  6214  0022C4  B2C2               	btfsc	4034,1,c	;volatile
  6215  0022C6  D7FE               	goto	l72
  6216                           
  6217                           ;iut_adc.c: 124: return (((unsigned int) ADRESH) << 8) | ADRESL;
  6218  0022C8  50C4               	movf	4036,w,c	;volatile
  6219  0022CA  6E03               	movwf	??_adc_read& (0+255),c
  6220  0022CC  50C3               	movf	4035,w,c	;volatile
  6221  0022CE  6E01               	movwf	?_adc_read,c
  6222  0022D0  C003  F002         	movff	??_adc_read,?_adc_read+1
  6223  0022D4  0012               	return	
  6224  0022D6                     __end_of_adc_read:
  6225                           	opt stack 0
  6226                           tblptru	equ	0xFF8
  6227                           tblptrh	equ	0xFF7
  6228                           tblptrl	equ	0xFF6
  6229                           tablat	equ	0xFF5
  6230                           prodl	equ	0xFF3
  6231                           wreg	equ	0xFE8
  6232                           indf2	equ	0xFDF
  6233                           postinc2	equ	0xFDE
  6234                           postdec2	equ	0xFDD
  6235                           fsr2h	equ	0xFDA
  6236                           fsr2l	equ	0xFD9
  6237                           status	equ	0xFD8
  6238                           
  6239 ;; *************** function _adc_init *****************
  6240 ;; Defined at:
  6241 ;;		line 48 in file "iut_adc.c"
  6242 ;; Parameters:    Size  Location     Type
  6243 ;;  numero_derni    1    wreg     unsigned char 
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;  numero_derni    1    0[COMRAM] unsigned char 
  6246 ;; Return value:  Size  Location     Type
  6247 ;;                  1    wreg      void 
  6248 ;; Registers used:
  6249 ;;		wreg, status,2, status,0
  6250 ;; Tracked objects:
  6251 ;;		On entry : 0/0
  6252 ;;		On exit  : 0/0
  6253 ;;		Unchanged: 0/0
  6254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6255 ;;      Params:         0       0       0       0       0       0       0       0       0
  6256 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6257 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6258 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6259 ;;Total ram usage:        1 bytes
  6260 ;; Hardware stack levels used:    1
  6261 ;; This function calls:
  6262 ;;		Nothing
  6263 ;; This function is called by:
  6264 ;;		_main
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           	psect	text25
  6269  001E80                     __ptext25:
  6270                           	opt stack 0
  6271  001E80                     _adc_init:
  6272                           	opt stack 30
  6273                           
  6274                           ;incstack = 0
  6275                           ;adc_init@numero_dernier_canal stored from wreg
  6276  001E80  6E01               	movwf	adc_init@numero_dernier_canal,c
  6277                           
  6278                           ;iut_adc.c: 51: switch (numero_dernier_canal) {
  6279  001E82  D033               	goto	l2830
  6280  001E84                     l2790:
  6281                           
  6282                           ;iut_adc.c: 57: ADCON1 = 0xD;
  6283  001E84  0E0D               	movlw	13
  6284  001E86  6EC1               	movwf	4033,c	;volatile
  6285                           
  6286                           ;iut_adc.c: 58: TRISA = TRISA | 0b00000011;
  6287  001E88  5092               	movf	3986,w,c	;volatile
  6288  001E8A  0903               	iorlw	3
  6289  001E8C  D02C               	goto	L21
  6290  001E8E                     l2794:
  6291                           
  6292                           ;iut_adc.c: 61: ADCON1 = 0xC;
  6293  001E8E  0E0C               	movlw	12
  6294  001E90  6EC1               	movwf	4033,c	;volatile
  6295                           
  6296                           ;iut_adc.c: 62: TRISA = TRISA | 0b00000111;
  6297  001E92  5092               	movf	3986,w,c	;volatile
  6298  001E94  0907               	iorlw	7
  6299  001E96  D027               	goto	L21
  6300  001E98                     l2798:
  6301                           
  6302                           ;iut_adc.c: 65: ADCON1 = 0xB;
  6303  001E98  0E0B               	movlw	11
  6304  001E9A  6EC1               	movwf	4033,c	;volatile
  6305                           
  6306                           ;iut_adc.c: 66: TRISA = TRISA | 0b00001111;
  6307  001E9C  5092               	movf	3986,w,c	;volatile
  6308  001E9E  090F               	iorlw	15
  6309  001EA0  D022               	goto	L21
  6310  001EA2                     l2802:
  6311                           
  6312                           ;iut_adc.c: 69: ADCON1 = 0xA;
  6313  001EA2  0E0A               	movlw	10
  6314  001EA4  6EC1               	movwf	4033,c	;volatile
  6315                           
  6316                           ;iut_adc.c: 70: TRISA = TRISA | 0b00101111;
  6317  001EA6  5092               	movf	3986,w,c	;volatile
  6318  001EA8  092F               	iorlw	47
  6319  001EAA  D01D               	goto	L21
  6320  001EAC                     l2806:
  6321                           
  6322                           ;iut_adc.c: 73: ADCON1 = 0x9;
  6323  001EAC  0E09               	movlw	9
  6324  001EAE  6EC1               	movwf	4033,c	;volatile
  6325                           
  6326                           ;iut_adc.c: 74: TRISA = TRISA | 0b00101111;
  6327  001EB0  5092               	movf	3986,w,c	;volatile
  6328  001EB2  092F               	iorlw	47
  6329  001EB4  6E92               	movwf	3986,c	;volatile
  6330                           
  6331                           ;iut_adc.c: 75: TRISE = TRISE | 0b00000001;
  6332  001EB6  5096               	movf	3990,w,c	;volatile
  6333  001EB8  0901               	iorlw	1
  6334  001EBA  D00F               	goto	L23
  6335  001EBC                     l2812:
  6336                           
  6337                           ;iut_adc.c: 78: ADCON1 = 0x8;
  6338  001EBC  0E08               	movlw	8
  6339  001EBE  6EC1               	movwf	4033,c	;volatile
  6340                           
  6341                           ;iut_adc.c: 79: TRISA = TRISA | 0b00101111;
  6342  001EC0  5092               	movf	3986,w,c	;volatile
  6343  001EC2  092F               	iorlw	47
  6344  001EC4  6E92               	movwf	3986,c	;volatile
  6345                           
  6346                           ;iut_adc.c: 80: TRISE = TRISE | 0b00000011;
  6347  001EC6  5096               	movf	3990,w,c	;volatile
  6348  001EC8  0903               	iorlw	3
  6349  001ECA  D007               	goto	L23
  6350  001ECC                     l2818:
  6351                           
  6352                           ;iut_adc.c: 83: ADCON1 = 0x7;
  6353  001ECC  0E07               	movlw	7
  6354  001ECE  6EC1               	movwf	4033,c	;volatile
  6355                           
  6356                           ;iut_adc.c: 84: TRISA = TRISA | 0b00101111;
  6357  001ED0  5092               	movf	3986,w,c	;volatile
  6358  001ED2  092F               	iorlw	47
  6359  001ED4  6E92               	movwf	3986,c	;volatile
  6360                           
  6361                           ;iut_adc.c: 85: TRISE = TRISE | 0b00000111;
  6362  001ED6  5096               	movf	3990,w,c	;volatile
  6363  001ED8  0907               	iorlw	7
  6364  001EDA                     L23:
  6365  001EDA  6E96               	movwf	3990,c	;volatile
  6366                           
  6367                           ;iut_adc.c: 86: break;
  6368  001EDC  D020               	goto	l2832
  6369  001EDE                     l2824:
  6370                           
  6371                           ;iut_adc.c: 88: ADCON1 = 0xE;
  6372  001EDE  0E0E               	movlw	14
  6373  001EE0  6EC1               	movwf	4033,c	;volatile
  6374                           
  6375                           ;iut_adc.c: 89: TRISA = TRISA | 0b00000001;
  6376  001EE2  5092               	movf	3986,w,c	;volatile
  6377  001EE4  0901               	iorlw	1
  6378  001EE6                     L21:
  6379  001EE6  6E92               	movwf	3986,c	;volatile
  6380                           
  6381                           ;iut_adc.c: 91: }
  6382                           
  6383                           ;iut_adc.c: 90: break;
  6384  001EE8  D01A               	goto	l2832
  6385  001EEA                     l2830:
  6386  001EEA  5001               	movf	adc_init@numero_dernier_canal,w,c
  6387                           
  6388                           ; Switch size 1, requested type "space"
  6389                           ; Number of cases is 8, Range of values is 0 to 7
  6390                           ; switch strategies available:
  6391                           ; Name         Instructions Cycles
  6392                           ; simple_byte           25    13 (average)
  6393                           ;	Chosen strategy is simple_byte
  6394  001EEC  0A00               	xorlw	0	; case 0
  6395  001EEE  B4D8               	btfsc	status,2,c
  6396  001EF0  D7F6               	goto	l2824
  6397  001EF2  0A01               	xorlw	1	; case 1
  6398  001EF4  B4D8               	btfsc	status,2,c
  6399  001EF6  D7C6               	goto	l2790
  6400  001EF8  0A03               	xorlw	3	; case 2
  6401  001EFA  B4D8               	btfsc	status,2,c
  6402  001EFC  D7C8               	goto	l2794
  6403  001EFE  0A01               	xorlw	1	; case 3
  6404  001F00  B4D8               	btfsc	status,2,c
  6405  001F02  D7CA               	goto	l2798
  6406  001F04  0A07               	xorlw	7	; case 4
  6407  001F06  B4D8               	btfsc	status,2,c
  6408  001F08  D7CC               	goto	l2802
  6409  001F0A  0A01               	xorlw	1	; case 5
  6410  001F0C  B4D8               	btfsc	status,2,c
  6411  001F0E  D7CE               	goto	l2806
  6412  001F10  0A03               	xorlw	3	; case 6
  6413  001F12  B4D8               	btfsc	status,2,c
  6414  001F14  D7D3               	goto	l2812
  6415  001F16  0A01               	xorlw	1	; case 7
  6416  001F18  B4D8               	btfsc	status,2,c
  6417  001F1A  D7D8               	goto	l2818
  6418  001F1C  D7E0               	goto	l2824
  6419  001F1E                     l2832:
  6420                           
  6421                           ;iut_adc.c: 96: ADCON2 = 0b10100110;
  6422  001F1E  0EA6               	movlw	166
  6423  001F20  6EC0               	movwf	4032,c	;volatile
  6424                           
  6425                           ;iut_adc.c: 99: ADCON0bits.ADON = 1;
  6426  001F22  80C2               	bsf	4034,0,c	;volatile
  6427  001F24  0012               	return		;funcret
  6428  001F26                     __end_of_adc_init:
  6429                           	opt stack 0
  6430                           tblptru	equ	0xFF8
  6431                           tblptrh	equ	0xFF7
  6432                           tblptrl	equ	0xFF6
  6433                           tablat	equ	0xFF5
  6434                           prodl	equ	0xFF3
  6435                           wreg	equ	0xFE8
  6436                           indf2	equ	0xFDF
  6437                           postinc2	equ	0xFDE
  6438                           postdec2	equ	0xFDD
  6439                           fsr2h	equ	0xFDA
  6440                           fsr2l	equ	0xFD9
  6441                           status	equ	0xFD8
  6442                           
  6443 ;; *************** function ___awtoft *****************
  6444 ;; Defined at:
  6445 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awtoft.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;  c               2    8[COMRAM] int 
  6448 ;; Auto vars:     Size  Location     Type
  6449 ;;  sign            1   11[COMRAM] unsigned char 
  6450 ;; Return value:  Size  Location     Type
  6451 ;;                  3    8[COMRAM] float 
  6452 ;; Registers used:
  6453 ;;		wreg, status,2, status,0, cstack
  6454 ;; Tracked objects:
  6455 ;;		On entry : 0/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6459 ;;      Params:         3       0       0       0       0       0       0       0       0
  6460 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6461 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6462 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6463 ;;Total ram usage:        4 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; Hardware stack levels required when called:    1
  6466 ;; This function calls:
  6467 ;;		___ftpack
  6468 ;; This function is called by:
  6469 ;;		_main
  6470 ;; This function uses a non-reentrant model
  6471 ;;
  6472                           
  6473                           	psect	text26
  6474  0021F4                     __ptext26:
  6475                           	opt stack 0
  6476  0021F4                     ___awtoft:
  6477                           	opt stack 29
  6478                           
  6479                           ;incstack = 0
  6480  0021F4  0E00               	movlw	0
  6481  0021F6  6E0C               	movwf	___awtoft@sign,c
  6482  0021F8  AE0A               	btfss	___awtoft@c+1,7,c
  6483  0021FA  D006               	goto	l3482
  6484  0021FC  6C09               	negf	___awtoft@c,c
  6485  0021FE  1E0A               	comf	___awtoft@c+1,f,c
  6486  002200  B0D8               	btfsc	status,0,c
  6487  002202  2A0A               	incf	___awtoft@c+1,f,c
  6488  002204  0E01               	movlw	1
  6489  002206  6E0C               	movwf	___awtoft@sign,c
  6490  002208                     l3482:
  6491  002208  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6492  00220C  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6493  002210  6A03               	clrf	___ftpack@arg+2,c
  6494  002212  0E8E               	movlw	142
  6495  002214  6E04               	movwf	___ftpack@exp,c
  6496  002216  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6497  00221A  ECE9  F00E         	call	___ftpack	;wreg free
  6498  00221E  C001  F009         	movff	?___ftpack,?___awtoft
  6499  002222  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6500  002226  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6501  00222A  0012               	return	
  6502  00222C                     __end_of___awtoft:
  6503                           	opt stack 0
  6504                           tblptru	equ	0xFF8
  6505                           tblptrh	equ	0xFF7
  6506                           tblptrl	equ	0xFF6
  6507                           tablat	equ	0xFF5
  6508                           prodl	equ	0xFF3
  6509                           wreg	equ	0xFE8
  6510                           indf2	equ	0xFDF
  6511                           postinc2	equ	0xFDE
  6512                           postdec2	equ	0xFDD
  6513                           fsr2h	equ	0xFDA
  6514                           fsr2l	equ	0xFD9
  6515                           status	equ	0xFD8
  6516                           
  6517 ;; *************** function ___ftpack *****************
  6518 ;; Defined at:
  6519 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  6520 ;; Parameters:    Size  Location     Type
  6521 ;;  arg             3    0[COMRAM] unsigned um
  6522 ;;  exp             1    3[COMRAM] unsigned char 
  6523 ;;  sign            1    4[COMRAM] unsigned char 
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;		None
  6526 ;; Return value:  Size  Location     Type
  6527 ;;                  3    0[COMRAM] float 
  6528 ;; Registers used:
  6529 ;;		wreg, status,2, status,0
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6535 ;;      Params:         5       0       0       0       0       0       0       0       0
  6536 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6537 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6538 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6539 ;;Total ram usage:        8 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; This function calls:
  6542 ;;		Nothing
  6543 ;; This function is called by:
  6544 ;;		___awtoft
  6545 ;;		___ftadd
  6546 ;;		___ftdiv
  6547 ;;		___ftmul
  6548 ;;		___lwtoft
  6549 ;; This function uses a non-reentrant model
  6550 ;;
  6551                           
  6552                           	psect	text27
  6553  001DD2                     __ptext27:
  6554                           	opt stack 0
  6555  001DD2                     ___ftpack:
  6556                           	opt stack 28
  6557                           
  6558                           ;incstack = 0
  6559  001DD2  5004               	movf	___ftpack@exp,w,c
  6560  001DD4  B4D8               	btfsc	status,2,c
  6561  001DD6  D005               	goto	l2452
  6562  001DD8  5001               	movf	___ftpack@arg,w,c
  6563  001DDA  1002               	iorwf	___ftpack@arg+1,w,c
  6564  001DDC  1003               	iorwf	___ftpack@arg+2,w,c
  6565  001DDE  A4D8               	btfss	status,2,c
  6566  001DE0  D00C               	goto	l2458
  6567  001DE2                     l2452:
  6568  001DE2  0E00               	movlw	0
  6569  001DE4  6E01               	movwf	?___ftpack,c
  6570  001DE6  0E00               	movlw	0
  6571  001DE8  6E02               	movwf	?___ftpack+1,c
  6572  001DEA  0E00               	movlw	0
  6573  001DEC  6E03               	movwf	?___ftpack+2,c
  6574  001DEE  0012               	return	
  6575  001DF0                     l2456:
  6576  001DF0  2A04               	incf	___ftpack@exp,f,c
  6577  001DF2  90D8               	bcf	status,0,c
  6578  001DF4  3203               	rrcf	___ftpack@arg+2,f,c
  6579  001DF6  3202               	rrcf	___ftpack@arg+1,f,c
  6580  001DF8  3201               	rrcf	___ftpack@arg,f,c
  6581  001DFA                     l2458:
  6582  001DFA  0E00               	movlw	0
  6583  001DFC  1401               	andwf	___ftpack@arg,w,c
  6584  001DFE  6E06               	movwf	??___ftpack& (0+255),c
  6585  001E00  0E00               	movlw	0
  6586  001E02  1402               	andwf	___ftpack@arg+1,w,c
  6587  001E04  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6588  001E06  0EFE               	movlw	254
  6589  001E08  1403               	andwf	___ftpack@arg+2,w,c
  6590  001E0A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6591  001E0C  5006               	movf	??___ftpack,w,c
  6592  001E0E  1007               	iorwf	??___ftpack+1,w,c
  6593  001E10  1008               	iorwf	??___ftpack+2,w,c
  6594  001E12  B4D8               	btfsc	status,2,c
  6595  001E14  D00C               	goto	l2464
  6596  001E16  D7EC               	goto	l2456
  6597  001E18                     l2460:
  6598  001E18  2A04               	incf	___ftpack@exp,f,c
  6599  001E1A  0E01               	movlw	1
  6600  001E1C  2601               	addwf	___ftpack@arg,f,c
  6601  001E1E  0E00               	movlw	0
  6602  001E20  2202               	addwfc	___ftpack@arg+1,f,c
  6603  001E22  0E00               	movlw	0
  6604  001E24  2203               	addwfc	___ftpack@arg+2,f,c
  6605  001E26  90D8               	bcf	status,0,c
  6606  001E28  3203               	rrcf	___ftpack@arg+2,f,c
  6607  001E2A  3202               	rrcf	___ftpack@arg+1,f,c
  6608  001E2C  3201               	rrcf	___ftpack@arg,f,c
  6609  001E2E                     l2464:
  6610  001E2E  0E00               	movlw	0
  6611  001E30  1401               	andwf	___ftpack@arg,w,c
  6612  001E32  6E06               	movwf	??___ftpack& (0+255),c
  6613  001E34  0E00               	movlw	0
  6614  001E36  1402               	andwf	___ftpack@arg+1,w,c
  6615  001E38  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6616  001E3A  0EFF               	movlw	255
  6617  001E3C  1403               	andwf	___ftpack@arg+2,w,c
  6618  001E3E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6619  001E40  5006               	movf	??___ftpack,w,c
  6620  001E42  1007               	iorwf	??___ftpack+1,w,c
  6621  001E44  1008               	iorwf	??___ftpack+2,w,c
  6622  001E46  B4D8               	btfsc	status,2,c
  6623  001E48  D006               	goto	l2468
  6624  001E4A  D7E6               	goto	l2460
  6625  001E4C                     l2466:
  6626  001E4C  0604               	decf	___ftpack@exp,f,c
  6627  001E4E  90D8               	bcf	status,0,c
  6628  001E50  3601               	rlcf	___ftpack@arg,f,c
  6629  001E52  3602               	rlcf	___ftpack@arg+1,f,c
  6630  001E54  3603               	rlcf	___ftpack@arg+2,f,c
  6631  001E56                     l2468:
  6632  001E56  BE02               	btfsc	___ftpack@arg+1,7,c
  6633  001E58  D003               	goto	l715
  6634  001E5A  0E02               	movlw	2
  6635  001E5C  6004               	cpfslt	___ftpack@exp,c
  6636  001E5E  D7F6               	goto	l2466
  6637  001E60                     l715:
  6638  001E60  A004               	btfss	___ftpack@exp,0,c
  6639  001E62  9E02               	bcf	___ftpack@arg+1,7,c
  6640  001E64  90D8               	bcf	status,0,c
  6641  001E66  3204               	rrcf	___ftpack@exp,f,c
  6642  001E68  5004               	movf	___ftpack@exp,w,c
  6643  001E6A  1203               	iorwf	___ftpack@arg+2,f,c
  6644  001E6C  5005               	movf	___ftpack@sign,w,c
  6645  001E6E  A4D8               	btfss	status,2,c
  6646  001E70  8E03               	bsf	___ftpack@arg+2,7,c
  6647  001E72  C001  F001         	movff	___ftpack@arg,?___ftpack
  6648  001E76  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6649  001E7A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6650  001E7E  0012               	return	
  6651  001E80                     __end_of___ftpack:
  6652                           	opt stack 0
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodl	equ	0xFF3
  6658                           wreg	equ	0xFE8
  6659                           indf2	equ	0xFDF
  6660                           postinc2	equ	0xFDE
  6661                           postdec2	equ	0xFDD
  6662                           fsr2h	equ	0xFDA
  6663                           fsr2l	equ	0xFD9
  6664                           status	equ	0xFD8
  6665                           
  6666 ;; *************** function _CloseTimer0 *****************
  6667 ;; Defined at:
  6668 ;;		line 77 in file "iut_timers.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;		None
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;		None
  6673 ;; Return value:  Size  Location     Type
  6674 ;;                  1    wreg      void 
  6675 ;; Registers used:
  6676 ;;		wreg, status,2
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 0/0
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6682 ;;      Params:         0       0       0       0       0       0       0       0       0
  6683 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6684 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6685 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6686 ;;Total ram usage:        0 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; This function calls:
  6689 ;;		Nothing
  6690 ;; This function is called by:
  6691 ;;		_main
  6692 ;; This function uses a non-reentrant model
  6693 ;;
  6694                           
  6695                           	psect	text28
  6696  0023A0                     __ptext28:
  6697                           	opt stack 0
  6698  0023A0                     _CloseTimer0:
  6699                           	opt stack 30
  6700                           
  6701                           ;iut_timers.c: 79: INTCONbits.TMR0IE = 0;
  6702                           
  6703                           ;incstack = 0
  6704  0023A0  9AF2               	bcf	intcon,5,c	;volatile
  6705                           
  6706                           ;iut_timers.c: 80: T0CON=0x7F;
  6707  0023A2  0E7F               	movlw	127
  6708  0023A4  6ED5               	movwf	4053,c	;volatile
  6709  0023A6  0012               	return		;funcret
  6710  0023A8                     __end_of_CloseTimer0:
  6711                           	opt stack 0
  6712                           tblptru	equ	0xFF8
  6713                           tblptrh	equ	0xFF7
  6714                           tblptrl	equ	0xFF6
  6715                           tablat	equ	0xFF5
  6716                           prodl	equ	0xFF3
  6717                           intcon	equ	0xFF2
  6718                           wreg	equ	0xFE8
  6719                           indf2	equ	0xFDF
  6720                           postinc2	equ	0xFDE
  6721                           postdec2	equ	0xFDD
  6722                           fsr2h	equ	0xFDA
  6723                           fsr2l	equ	0xFD9
  6724                           status	equ	0xFD8
  6725                           tblptru	equ	0xFF8
  6726                           tblptrh	equ	0xFF7
  6727                           tblptrl	equ	0xFF6
  6728                           tablat	equ	0xFF5
  6729                           prodl	equ	0xFF3
  6730                           intcon	equ	0xFF2
  6731                           wreg	equ	0xFE8
  6732                           indf2	equ	0xFDF
  6733                           postinc2	equ	0xFDE
  6734                           postdec2	equ	0xFDD
  6735                           fsr2h	equ	0xFDA
  6736                           fsr2l	equ	0xFD9
  6737                           status	equ	0xFD8
  6738                           
  6739                           	psect	rparam
  6740  0000                     tblptru	equ	0xFF8
  6741                           tblptrh	equ	0xFF7
  6742                           tblptrl	equ	0xFF6
  6743                           tablat	equ	0xFF5
  6744                           prodl	equ	0xFF3
  6745                           intcon	equ	0xFF2
  6746                           wreg	equ	0xFE8
  6747                           indf2	equ	0xFDF
  6748                           postinc2	equ	0xFDE
  6749                           postdec2	equ	0xFDD
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    17
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     76      76
    BANK0           160     92      92
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_printf@q	PTR unsigned char  size(2) Largest target is 33
		 -> lcd_printf@buf(BANK0[33]), 

    lcd_printf@ramstring	PTR unsigned char  size(2) Largest target is 0

    lcd_printf@romstring	PTR far unsigned char  size(2) Largest target is 0

    lcd_printf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> STR_2(CODE[4]), STR_1(CODE[16]), 

    lcd_printf@ap	PTR void [1] size(2) Largest target is 1
		 -> ?_lcd_printf(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_lcd_printf
    _pwm_setdc2->___fttol
    _pwm_setdc1->___fttol
    _lcd_printf->___ftmul
    _lcd_repete_n->_lcd_write_data_busy
    _lcd_putc->_lcd_position
    _lcd_write_data_busy->_lcd_write_cmd_data
    _lcd_position->_lcd_write_cmd_busy
    ___lwtoft->___ftpack
    ___ftneg->___awtoft
    ___ftmul->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftneg
    _lcd_init->_lcd_write_cmd_busy
    _lcd_clear->_lcd_write_cmd_busy
    _lcd_write_cmd_busy->_lcd_write_cmd_data
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_lcd_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                31    31      0   41450
                                             74 COMRAM     2     2      0
                                             67 BANK0     25    25      0
                        _CloseTimer0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           _adc_init
                           _adc_read
                           _lcd_init
                       _lcd_position
                         _lcd_printf
                           _pwm_init
                         _pwm_setdc1
                         _pwm_setdc2
 ---------------------------------------------------------------------------------
 (1) _pwm_setdc2                                           4     2      2     196
                                             15 COMRAM     4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _pwm_setdc1                                           4     2      2     196
                                             15 COMRAM     4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             2     1      1     164
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _lcd_printf                                          84    74     10   24034
                                             57 COMRAM    17     7     10
                                              0 BANK0     67    67      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lwtoft
                           _lcd_putc
                       _lcd_repete_n
                _lcd_write_data_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_repete_n                                         2     1      1     794
                                              2 COMRAM     2     1      1
                _lcd_write_data_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0     855
                                              5 COMRAM     1     1      0
                       _lcd_position
                 _lcd_write_cmd_busy
                _lcd_write_data_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_write_data_busy                                  1     1      0      66
                                              1 COMRAM     1     1      0
                           _lcd_busy
                 _lcd_write_cmd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_position                                         3     2      1     591
                                              2 COMRAM     3     2      1
                 _lcd_write_cmd_busy
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2679
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     784
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     425
                                             12 COMRAM     3     0      3
                           ___awtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3717
                                             42 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3519
                                             27 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    4205
                                             15 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     132
                                              2 COMRAM     1     1      0
                          _lcd_clear
                        _lcd_clock_e
                 _lcd_write_cmd_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            0     0      0      66
                 _lcd_write_cmd_busy
 ---------------------------------------------------------------------------------
 (3) _lcd_write_cmd_busy                                   1     1      0      66
                                              1 COMRAM     1     1      0
                           _lcd_busy
                 _lcd_write_cmd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_write_cmd_data                                   1     1      0      44
                                              0 COMRAM     1     1      0
                        _lcd_clock_e
 ---------------------------------------------------------------------------------
 (3) _lcd_busy                                             0     0      0       0
                        _lcd_clock_e
 ---------------------------------------------------------------------------------
 (4) _lcd_clock_e                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2824
                                              8 COMRAM     4     1      3
                           ___ftpack
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _CloseTimer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CloseTimer0
   ___awtoft
     ___ftpack
     _adc_read (ARG)
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
       _adc_read (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       _adc_read (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
     _adc_read (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
       _adc_read (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             _adc_read (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _adc_read (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     _adc_read (ARG)
   ___ftneg
     ___awtoft (ARG)
       ___ftpack
       _adc_read (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
   _adc_init
   _adc_read
   _lcd_init
     _lcd_clear
       _lcd_write_cmd_busy
         _lcd_busy
           _lcd_clock_e
         _lcd_write_cmd_data
           _lcd_clock_e
     _lcd_clock_e
     _lcd_write_cmd_busy
       _lcd_busy
         _lcd_clock_e
       _lcd_write_cmd_data
         _lcd_clock_e
   _lcd_position
     _lcd_write_cmd_busy
       _lcd_busy
         _lcd_clock_e
       _lcd_write_cmd_data
         _lcd_clock_e
   _lcd_printf
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             _adc_read (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _adc_read (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             _adc_read (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             _adc_read (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               _adc_read (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             _adc_read (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _adc_read (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       _adc_read (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lldiv
     ___llmod
     ___lwtoft
       ___ftpack
     _lcd_putc
       _lcd_position
         _lcd_write_cmd_busy
           _lcd_busy
             _lcd_clock_e
           _lcd_write_cmd_data
             _lcd_clock_e
       _lcd_write_cmd_busy
         _lcd_busy
           _lcd_clock_e
         _lcd_write_cmd_data
           _lcd_clock_e
       _lcd_write_data_busy
         _lcd_busy
           _lcd_clock_e
         _lcd_write_cmd_data
           _lcd_clock_e
     _lcd_repete_n
       _lcd_write_data_busy
         _lcd_busy
           _lcd_clock_e
         _lcd_write_cmd_data
           _lcd_clock_e
     _lcd_write_data_busy
       _lcd_busy
         _lcd_clock_e
       _lcd_write_cmd_data
         _lcd_clock_e
   _pwm_init
   _pwm_setdc1
     ___fttol (ARG)
   _pwm_setdc2
     ___fttol (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     4C      4C       1       80.0%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      5C       5       57.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Jan 06 15:37:53 2020

               ?_lcd_repete_n 0003                            l27 15C4                            l72 22C4  
               ?_lcd_position 0003                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                  ___ftadd@exp1 001B  
                ___ftadd@exp2 001A                  ___ftadd@sign 0019                           l202 0CE8  
                         l142 0928                           l231 0E8A                           l144 0980  
                         l225 0E38                           l242 0F2E                           l243 0F4C  
                         l235 0EFA                           l332 21AA                           l244 0F38  
                         l149 097C                           l159 0A2A                           l274 11E2  
                         l275 1202                           l276 11F4                           l189 0BEA  
                         l715 1E60                           l742 19C6                           l840 20BE  
                         l753 1A76                           l762 1A92                           l738 199C  
                         l850 2124                           l773 1DA0                           l795 2310  
                __CFG_CPB$OFF 000000                           _PR2 000FCB                  __CFG_CPD$OFF 000000  
                         wreg 000FE8                  __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0025  
                ___ftdiv@sign 002A                  __CFG_WDT$OFF 000000                          l3000 09F6  
                        l3010 0A34                          l3020 0A60                          l3004 0A1A  
                        l3112 0C0A                          l3040 0AC2                          l3032 0A92  
                        l3210 0E58                          l3202 0E0A                          l3130 0C76  
                        l3122 0C40                          l3034 0A96                          l3212 0E76  
                        l3204 0E34                          l3140 0CB4                          l3132 0C7C  
                        l3124 0C50                          l3108 0C02                          l3044 0ACA  
                        l3036 0AAC                          l2502 217A                          l3310 10A0  
                        l3230 0EBE                          l3214 0E7A                          l3070 0B42  
                        l3062 0B12                          l3054 0AF0                          l3046 0AD0  
                        l3312 10A6                          l3240 0F06                          l3232 0EC4  
                        l3160 0D08                          l3080 0B6C                          l3048 0ADA  
                        l2506 236C                          l3306 108A                          l3226 0EB6  
                        l3170 0D3E                          l3082 0B78                          l3074 0B4E  
                        l2460 1E18                          l2452 1DE2                          l2428 2354  
                        l2540 1A04                          l2524 19D4                          l2612 1D7A  
                        l2436 232A                          l2444 233E                          l2508 2372  
                        l3412 1330                          l3404 1310                          l3340 1160  
                        l3332 113E                          l3324 1114                          l3316 10F2  
                        l3228 0EBA                          l3236 0ECC                          l3172 0D4E  
                        l3156 0D00                          l3092 0BB6                          l3084 0B7E  
                        l3076 0B5A                          l3500 167C                          l2550 1A3A  
                        l2518 19AA                          l2702 1B30                          l3422 1352  
                        l3342 1168                          l3270 0FB4                          l3262 0F6A  
                        l3190 0DAC                          l3182 0D76                          l3174 0D52  
                        l2464 1E2E                          l2456 1DF0                          l2560 1A6E  
                        l2552 1A42                          l2632 1C20                          l2720 1B96  
                        l3432 1384                          l3416 133A                          l3336 1152  
                        l3328 1126                          l3248 0F28                          l3512 17A2  
                        l2466 1E4C                          l2458 1DFA                          l2802 1EA2  
                        l2546 1A26                          l2730 1BBE                          l2490 2146  
                        l3450 1444                          l3418 1348                          l3258 0F46  
                        l3194 0DC2                          l3514 17C8                          l3506 1694  
                        l3530 1846                          l2468 1E56                          l2812 1EBC  
                        l2548 1A30                          l2652 1C7A                          l2732 1BCA  
                        l2724 1BA6                          l3436 1394                          l3428 1372  
                        l3348 1194                          l3524 1810                          l2806 1EAC  
                        l2830 1EEA                          l2566 1AAE                          l2558 1A64  
                        l2662 1CA2                          l2638 1C48                          l2734 1BD0  
                        l2750 207C                          l2494 2156                          l3462 14F4  
                        l3454 14D6                          l3446 1432                          l3382 1292  
                        l3294 105E                          l3286 1036                          l3470 1582  
                        l2824 1EDE                          l2832 1F1E                          l2576 1ADE  
                        l2592 1D3C                          l2656 1C8A                          l2760 20B0  
                        l2752 2080                          l3392 12BA                          l3376 1272  
                        l3296 1066                          l2904 21E2                          l3528 181C  
                        l3482 2208                          l2818 1ECC                          l2586 1D14  
                        l2682 201E                          l2666 1CB2                          l2738 1BE6  
                        l2770 20EE                          l2498 216A                          l3458 14EA  
                        l3298 106C                          l3466 1502                          l2930 0870  
                        l2922 083E                          l2906 21E6                          l2748 2070  
                        l2772 20F2                          l3396 12C8                          l3388 12AC  
                        l2932 0876                          l2940 0888                          l3468 157A  
                        l2790 1E84                          l2678 1FEE                          l2934 087C  
                        l2942 08AA                          l2688 204A                          l2776 2116  
                        l2768 20E2                          l2936 0882                          l2928 086A  
                        l2794 1E8E                          l2970 0948                          l2980 098A  
                        l2798 1E98                          l2974 096C                          l2966 092C  
                        l2968 0940                          l2896 21D0                          l2898 21D4  
                        l2996 09DA                          l2998 09EE                          STR_1 0812  
                        STR_2 0822                          STR_3 0822                          STR_4 0822  
                        STR_5 0829                          STR_6 0826                          u2121 1968  
                        u2131 197C                          u2401 1C30                          u2331 1CFC  
                        u2500 1B4E                          u2351 1D24                          u2505 1B46  
               __CFG_DEBUG$ON 000000                          u2381 1C08                          u2481 1B14  
                        u3760 1606                          u3770 161A                          u3827 1F38  
                        u3837 1F58                          u3847 1F70                          u3768 1608  
                        u3857 1F84                          u3778 161C                          u3867 1F96  
                        _TMR2 000FCC                   lcd_printf@c 00A2                   lcd_printf@f 003A  
                 lcd_printf@i 008D                   lcd_printf@k 0089                   lcd_printf@n 009B  
                 lcd_printf@q 0086                   lcd_printf@w 008E                   lcd_printf@x 0096  
  pwm_setdc1@cycles_etat_haut 0010                          _main 15A2                  ___ftpack@arg 0001  
                ___ftpack@exp 0004                   main@moteurD 00B0                   main@moteurG 00AD  
                        fsr2h 000FDA                          indf2 000FDF                          fsr2l 000FD9  
                        prodl 000FF3                          start 0000           __end_of_CloseTimer0 23A8  
                ___ftmul@cntr 0038                  ___param_bank 000000                  ___ftmul@sign 0039  
              ??_lcd_repete_n 0004                  ___fttol@exp1 000F                  ___fttol@lval 000B  
              ??_lcd_position 0004                 __CFG_PLLDIV$5 000000                         ?_main 0001  
             __end_of___ftadd 1B04               __end_of___ftdiv 1DD2               __end_of___ftneg 231E  
             __end_of___lldiv 20D0               __end_of___ftmul 1CEC                         _T0CON 000FD5  
                       _T1CON 000FCD               __end_of___llmod 2136               __end_of___fttol 1BF8  
                       _T2CON 000FCA                         _T3CON 000FB1                         _TMR0H 000FD7  
                       _TMR1H 000FCF                         _TMR0L 000FD6                         _TMR1L 000FCE  
                       _TMR3H 000FB3                         _TMR3L 000FB2                         _PORTD 000F83  
               __CFG_USBDIV$2 000000                         _TRISA 000F92                         _TRISD 000F95  
                       _TRISE 000F96                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                lcd_printf@ap 009D                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                 ___awtoft@sign 000C  
               ___ftpack@sign 0005                         tablat 000FF5                         status 000FD8  
             __initialization 238E                  __end_of_main 1958                        ??_main 004B  
               ___fttol@sign1 000A                 __activetblptr 000002   __end_of_lcd_write_data_busy 2352  
               lcd_repete_n@c 0003                        _ADCON0 000FC2                        _ADCON1 000FC1  
               lcd_repete_n@n 0004                        _ADCON2 000FC0              ___llmod@dividend 0001  
                      _ADRESH 000FC4                        _ADRESL 000FC3                        _CCPR1L 000FBE  
                      _CCPR2L 000FBB              __end_of___awtoft 222C              __end_of___ftpack 1E80  
            __end_of_adc_init 1F26              __end_of_adc_read 22D6              __end_of___lwtoft 22FA  
                 _CloseTimer0 23A0                __CFG_VREGEN$ON 000000          __size_of_lcd_clock_e 0012  
            __end_of_lcd_busy 21BC              __end_of_lcd_init 1FBE                 lcd_printf@buf 0060  
            __end_of_lcd_putc 2182                        ___ftge 1FBE                     ??___ftadd 0016  
                   ??___ftdiv 0022                     ??___ftneg 0010                     ??___lldiv 0009  
                   ??___ftmul 0031                     ??___llmod 0009                     ??___fttol 0005  
            __end_of_s_digits 0812    pwm_setdc2@cycles_etat_haut 0010                        main@n1 00A3  
                      main@n2 00B6                        main@n3 00B8                        main@n4 00A5  
       ___ftmul@f3_as_product 0035                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8              __end_of_pwm_init 21F4  
        __end_of_lcd_repete_n 237C          __end_of_lcd_position 233C                    __accesstop 0060  
     __end_of__initialization 238E               __CFG_PBADEN$OFF 000000                    ___ftadd@f1 0010  
                  ___ftadd@f2 0013                    ___ftge@ff1 0001                    ___ftge@ff2 0004  
               ___rparam_used 000001   __size_of_lcd_write_cmd_data 002C                    ___ftdiv@f1 001C  
                  ___ftdiv@f2 001F                    ___ftdiv@f3 0026   __size_of_lcd_write_cmd_busy 0016  
                  ___ftneg@f1 000D                    ___awtoft@c 0009                    ___ftmul@f1 002B  
                  ___ftmul@f2 002E                    ___fttol@f1 0001                __pcstackCOMRAM 0001  
           main@debutDeCourse 00A7                    ___lwtoft@c 0009            __size_of_lcd_clear 0008  
                     ?___ftge 0001                       _CCP1CON 000FBD                       _CCP2CON 000FBA  
                   ?___awtoft 0009                     ?___ftpack 0001                     ?_adc_init 0001  
                   ?_adc_read 0001                     ?___lwtoft 0009      lcd_printf@have_precision 0095  
                  _lcd_printf 082E                     ?_lcd_busy 0001                     ?_lcd_init 0001  
                   ?_lcd_putc 0001             lcd_position@ligne 0004                       __Hparam 0000  
                     __Lparam 0000             __end_of_lcd_clear 23A0                lcd_printf@cval 009A  
              lcd_printf@larg 0090                lcd_printf@sign 0088                lcd_printf@size 0094  
             __size_of___ftge 0090                       ___ftadd 1958                       ___ftdiv 1CEC  
                     ___ftneg 22FA                       ___lldiv 204E                       ___ftmul 1BF8  
                     ___llmod 20D0                       ___fttol 1B04                     ?_pwm_init 0001  
                __psmallconst 0800                lcd_putc@lettre 0006                       __pcinit 238E  
                  ??___awtoft 000C                    ??___ftpack 0006                       __ramtop 0800  
                  ??_adc_init 0001                    ??_adc_read 0003                       __ptext0 15A2  
                     __ptext1 2258                       __ptext2 2282                       __ptext3 21BC  
                     __ptext4 082E                       __ptext5 2368                       __ptext6 2136  
                     __ptext7 233C                       __ptext8 231E                       __ptext9 22D6  
                  ??___lwtoft 000C                     _T0CONbits 000FD5                     _T1CONbits 000FCD  
                   _T2CONbits 000FCA         __size_of_lcd_repete_n 0014                     _T3CONbits 000FB1  
       __size_of_lcd_position 001E                    ??_lcd_busy 0001                    ??_lcd_init 0003  
                  ??_lcd_putc 0006          end_of_initialization 238E                  ?_CloseTimer0 0001  
               __Lmediumconst 0000               ___lldiv@divisor 0005               ___lldiv@counter 000D  
                     postdec2 000FDD                       postinc2 000FDE                    ??_pwm_init 0002  
                _lcd_repete_n 2368                  _lcd_position 231E                     _PORTDbits 000F83  
              main@vitesseMax 00B3                     _PORTEbits 000F84  adc_init@numero_dernier_canal 0001  
                   _TRISCbits 000F94                     _TRISEbits 000F96           lcd_position@address 0005  
                 ?_lcd_printf 003A                    _pwm_setdc1 2282                    _pwm_setdc2 2258  
         lcd_position@colonne 0003  __size_of_lcd_write_data_busy 0016                   _CCP1CONbits 000FBD  
                 ___ftdiv@exp 0029                 ??_lcd_clock_e 0001                   _CCP2CONbits 000FBA  
                 ___ftmul@exp 0034                __end_of___ftge 204E          lcd_write_data_busy@c 0002  
         start_initialization 238E               main@finDeCourse 00A9    __end_of_lcd_write_cmd_data 2258  
  __end_of_lcd_write_cmd_busy 2368               ___llmod@divisor 0005               ___llmod@counter 0009  
                    ??___ftge 0007           __end_of_lcd_clock_e 238E           __size_of_lcd_printf 0D74  
           __size_of___awtoft 0038             __size_of___ftpack 00AE                pwm_init@period 0002  
           __size_of_adc_init 00A6             __size_of_adc_read 002A             __size_of___lwtoft 0024  
               __pcstackBANK0 0060                   ?_pwm_setdc1 0010                   ?_pwm_setdc2 0010  
           __size_of_lcd_busy 003A             __size_of_lcd_init 0098             __size_of_lcd_putc 004C  
        __size_of_CloseTimer0 0008                     _main$1636 00BA                      ?___ftadd 0010  
                    ?___ftdiv 001C                      ?___ftneg 000D                      ?___lldiv 0001  
                    ?___ftmul 002B                      ?___llmod 0001                      ?___fttol 0001  
                   _lcd_clear 2398             __size_of_pwm_init 0038                   __smallconst 0800  
                 _lcd_clock_e 237C                      _PIE1bits 000F9D                      _PIE2bits 000FA0  
                    _PIR1bits 000F9E                      _PIR2bits 000FA1           __size_of_pwm_setdc1 002A  
         __size_of_pwm_setdc2 002A                    ?_lcd_clear 0001           _lcd_write_data_busy 233C  
                  _ADCON0bits 000FC2                  ??_lcd_printf 0044          ?_lcd_write_data_busy 0001  
         lcd_write_cmd_data@c 0001           lcd_write_cmd_busy@c 0002                      __Hrparam 0000  
                    __Lrparam 0000          adc_read@numero_canal 0005               lcd_printf@flags 009F  
             lcd_printf@width 00A1              __size_of___ftadd 01AC            __end_of_lcd_printf 15A2  
            __size_of___ftdiv 00E6              __size_of___ftneg 0024              __size_of___lldiv 0082  
            __size_of___ftmul 00F4              __size_of___llmod 0066              __size_of___fttol 00F4  
                    ___awtoft 21F4                      ___ftpack 1DD2          __CFG_FOSC$ECPLLIO_EC 000000  
                    _adc_init 1E80                      _adc_read 22AC                      ___lwtoft 22D6  
                    __ptext10 20D0                      __ptext11 204E                      __ptext20 2352  
                    __ptext12 1B04                      __ptext21 222C                      __ptext13 22FA  
                    __ptext22 2182                      __ptext14 1BF8                      __ptext23 237C  
                    __ptext15 1FBE                      __ptext24 22AC                      __ptext16 1CEC  
                    __ptext25 1E80                      __ptext17 1958                      __ptext26 21F4  
                    __ptext18 1F26                      __ptext27 1DD2                      __ptext19 2398  
                    __ptext28 23A0                      _lcd_busy 2182                      _lcd_init 1F26  
                    _lcd_putc 2136         ??_lcd_write_data_busy 0002                 __size_of_main 03B6  
                    _s_digits 0801            _lcd_write_cmd_data 222C                      _pwm_init 21BC  
          _lcd_write_cmd_busy 2352                   ??_lcd_clear 0003                      main@etat 00AB  
       __CFG_CPUDIV$OSC1_PLL2 000000           ?_lcd_write_cmd_data 0001           ?_lcd_write_cmd_busy 0001  
                  _INTCONbits 000FF2                  ??_pwm_setdc1 0012                  ??_pwm_setdc2 0012  
         lcd_printf@digit_cnt 008F           lcd_printf@have_sign 008B              ___lldiv@dividend 0001  
        ??_lcd_write_cmd_data 0001          ??_lcd_write_cmd_busy 0002          lcd_printf@prefix_cnt 008C  
          __end_of_pwm_setdc1 22AC            __end_of_pwm_setdc2 2282              ___lldiv@quotient 0009  
         lcd_printf@ramstring 0081           lcd_printf@sign_char 0083           lcd_printf@precision 00A0  
         lcd_printf@space_cnt 0099             pwm_init@nb_canaux 0001                 ??_CloseTimer0 0001  
                ?_lcd_clock_e 0001           lcd_printf@romstring 0084  
