

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Jan 06 14:24:27 2020

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42  0000                     
    43                           ; Version 1.42
    44                           ; Generated 13/04/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4550 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	smallconst
    79  000800                     __psmallconst:
    80                           	opt stack 0
    81  000800  00                 	db	0
    82  000801                     _s_digits:
    83                           	opt stack 0
    84  000801  30                 	db	48
    85  000802  31                 	db	49
    86  000803  32                 	db	50
    87  000804  33                 	db	51
    88  000805  34                 	db	52
    89  000806  35                 	db	53
    90  000807  36                 	db	54
    91  000808  37                 	db	55
    92  000809  38                 	db	56
    93  00080A  39                 	db	57
    94  00080B  61                 	db	97
    95  00080C  62                 	db	98
    96  00080D  63                 	db	99
    97  00080E  64                 	db	100
    98  00080F  65                 	db	101
    99  000810  66                 	db	102
   100  000811  00                 	db	0
   101  000812                     __end_of_s_digits:
   102                           	opt stack 0
   103  0000                     _T3CONbits	set	4017
   104  0000                     _PIE2bits	set	4000
   105  0000                     _PIR2bits	set	4001
   106  0000                     _TMR3L	set	4018
   107  0000                     _TMR3H	set	4019
   108  0000                     _T3CON	set	4017
   109  0000                     _TMR2	set	4044
   110  0000                     _PIE1bits	set	3997
   111  0000                     _PIR1bits	set	3998
   112  0000                     _TMR1L	set	4046
   113  0000                     _TMR1H	set	4047
   114  0000                     _T1CONbits	set	4045
   115  0000                     _T1CON	set	4045
   116  0000                     _T0CONbits	set	4053
   117  0000                     _INTCONbits	set	4082
   118  0000                     _TMR0L	set	4054
   119  0000                     _TMR0H	set	4055
   120  0000                     _T0CON	set	4053
   121  0000                     _CCP2CONbits	set	4026
   122  0000                     _CCPR2L	set	4027
   123  0000                     _CCP1CONbits	set	4029
   124  0000                     _CCPR1L	set	4030
   125  0000                     _T2CONbits	set	4042
   126  0000                     _PR2	set	4043
   127  0000                     _CCP2CON	set	4026
   128  0000                     _TRISCbits	set	3988
   129  0000                     _CCP1CON	set	4029
   130  0000                     _T2CON	set	4042
   131  0000                     _PORTDbits	set	3971
   132  0000                     _PORTD	set	3971
   133  0000                     _TRISD	set	3989
   134  0000                     _ADRESL	set	4035
   135  0000                     _ADRESH	set	4036
   136  0000                     _ADCON0	set	4034
   137  0000                     _ADCON0bits	set	4034
   138  0000                     _ADCON2	set	4032
   139  0000                     _TRISE	set	3990
   140  0000                     _TRISA	set	3986
   141  0000                     _ADCON1	set	4033
   142  0000                     _PORTEbits	set	3972
   143  0000                     _TRISEbits	set	3990
   144  000812                     STR_4:
   145  000812  25                 	db	37
   146  000813  33                 	db	51	;'3'
   147  000814  64                 	db	100	;'d'
   148  000815  20                 	db	32
   149  000816  25                 	db	37
   150  000817  33                 	db	51	;'3'
   151  000818  64                 	db	100	;'d'
   152  000819  20                 	db	32
   153  00081A  25                 	db	37
   154  00081B  33                 	db	51	;'3'
   155  00081C  64                 	db	100	;'d'
   156  00081D  20                 	db	32
   157  00081E  25                 	db	37
   158  00081F  33                 	db	51	;'3'
   159  000820  64                 	db	100	;'d'
   160  000821  00                 	db	0
   161  000822                     STR_1:
   162  000822  25                 	db	37
   163  000823  33                 	db	51	;'3'
   164  000824  64                 	db	100	;'d'
   165  000825  20                 	db	32
   166  000826  25                 	db	37
   167  000827  37                 	db	55	;'7'
   168  000828  64                 	db	100	;'d'
   169  000829  20                 	db	32
   170  00082A  25                 	db	37
   171  00082B  33                 	db	51	;'3'
   172  00082C  64                 	db	100	;'d'
   173  00082D  00                 	db	0
   174  00082E                     STR_3:
   175  00082E  4D                 	db	77	;'M'
   176  00082F  44                 	db	68	;'D'
   177  000830  20                 	db	32
   178  000831  25                 	db	37
   179  000832  34                 	db	52	;'4'
   180  000833  64                 	db	100	;'d'
   181  000834  00                 	db	0
   182  000835                     STR_2:
   183  000835  4D                 	db	77	;'M'
   184  000836  47                 	db	71	;'G'
   185  000837  20                 	db	32
   186  000838  25                 	db	37
   187  000839  34                 	db	52	;'4'
   188  00083A  64                 	db	100	;'d'
   189  00083B  00                 	db	0
   190  00083C  25                 	db	37
   191  00083D  53                 	db	83	;'S'
   192  00083E  00                 	db	0
   193  00083F  25                 	db	37
   194  000840  64                 	db	100	;'d'
   195  000841  00                 	db	0
   196  0000                     
   197                           ; #config settings
   198  000842  00                 	db	0	; dummy byte at the end
   199  0000                     
   200                           	psect	cinit
   201  002496                     __pcinit:
   202                           	opt stack 0
   203  002496                     start_initialization:
   204                           	opt stack 0
   205  002496                     __initialization:
   206                           	opt stack 0
   207  002496                     end_of_initialization:
   208                           	opt stack 0
   209  002496                     __end_of__initialization:
   210                           	opt stack 0
   211  002496  0E00               	movlw	low (__Lmediumconst shr (0+16))
   212  002498  6EF8               	movwf	tblptru,c
   213  00249A  0100               	movlb	0
   214  00249C  EFDC  F00A         	goto	_main	;jump to C main() function
   215                           tblptru	equ	0xFF8
   216                           
   217                           	psect	cstackBANK0
   218  000060                     __pcstackBANK0:
   219                           	opt stack 0
   220  000060                     lcd_printf@buf:
   221                           	opt stack 0
   222                           
   223                           ; 33 bytes @ 0x0
   224  000060                     	ds	33
   225  000081                     lcd_printf@ramstring:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x21
   229  000081                     	ds	2
   230  000083                     lcd_printf@sign_char:
   231                           	opt stack 0
   232                           
   233                           ; 1 bytes @ 0x23
   234  000083                     	ds	1
   235  000084                     lcd_printf@romstring:
   236                           	opt stack 0
   237                           
   238                           ; 2 bytes @ 0x24
   239  000084                     	ds	2
   240  000086                     lcd_printf@q:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x26
   244  000086                     	ds	2
   245  000088                     lcd_printf@sign:
   246                           	opt stack 0
   247                           
   248                           ; 1 bytes @ 0x28
   249  000088                     	ds	1
   250  000089                     lcd_printf@k:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x29
   254  000089                     	ds	2
   255  00008B                     lcd_printf@have_sign:
   256                           	opt stack 0
   257                           
   258                           ; 1 bytes @ 0x2B
   259  00008B                     	ds	1
   260  00008C                     lcd_printf@prefix_cnt:
   261                           	opt stack 0
   262                           
   263                           ; 1 bytes @ 0x2C
   264  00008C                     	ds	1
   265  00008D                     lcd_printf@i:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0x2D
   269  00008D                     	ds	1
   270  00008E                     lcd_printf@w:
   271                           	opt stack 0
   272                           
   273                           ; 1 bytes @ 0x2E
   274  00008E                     	ds	1
   275  00008F                     lcd_printf@digit_cnt:
   276                           	opt stack 0
   277                           
   278                           ; 1 bytes @ 0x2F
   279  00008F                     	ds	1
   280  000090                     lcd_printf@larg:
   281                           	opt stack 0
   282                           
   283                           ; 4 bytes @ 0x30
   284  000090                     	ds	4
   285  000094                     lcd_printf@size:
   286                           	opt stack 0
   287                           
   288                           ; 1 bytes @ 0x34
   289  000094                     	ds	1
   290  000095                     lcd_printf@have_precision:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0x35
   294  000095                     	ds	1
   295  000096                     lcd_printf@x:
   296                           	opt stack 0
   297                           
   298                           ; 3 bytes @ 0x36
   299  000096                     	ds	3
   300  000099                     lcd_printf@space_cnt:
   301                           	opt stack 0
   302                           
   303                           ; 1 bytes @ 0x39
   304  000099                     	ds	1
   305  00009A                     lcd_printf@cval:
   306                           	opt stack 0
   307                           
   308                           ; 1 bytes @ 0x3A
   309  00009A                     	ds	1
   310  00009B                     lcd_printf@n:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x3B
   314  00009B                     	ds	2
   315  00009D                     lcd_printf@ap:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x3D
   319  00009D                     	ds	2
   320  00009F                     lcd_printf@flags:
   321                           	opt stack 0
   322                           
   323                           ; 1 bytes @ 0x3F
   324  00009F                     	ds	1
   325  0000A0                     lcd_printf@precision:
   326                           	opt stack 0
   327                           
   328                           ; 1 bytes @ 0x40
   329  0000A0                     	ds	1
   330  0000A1                     lcd_printf@width:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x41
   334  0000A1                     	ds	1
   335  0000A2                     lcd_printf@c:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x42
   339  0000A2                     	ds	1
   340  0000A3                     main@timer:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x43
   344  0000A3                     	ds	2
   345  0000A5                     main@debutDeCourse:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x45
   349  0000A5                     	ds	2
   350  0000A7                     main@finDeCourse:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x47
   354  0000A7                     	ds	2
   355  0000A9                     main@vitesseMax:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x49
   359  0000A9                     	ds	2
   360  0000AB                     main@n1:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x4B
   364  0000AB                     	ds	2
   365  0000AD                     main@n4:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x4D
   369  0000AD                     	ds	2
   370  0000AF                     main@moteurG:
   371                           	opt stack 0
   372                           
   373                           ; 3 bytes @ 0x4F
   374  0000AF                     	ds	3
   375  0000B2                     main@moteurD:
   376                           	opt stack 0
   377                           
   378                           ; 3 bytes @ 0x52
   379  0000B2                     	ds	3
   380  0000B5                     main@n2:
   381                           	opt stack 0
   382                           
   383                           ; 2 bytes @ 0x55
   384  0000B5                     	ds	2
   385  0000B7                     main@n3:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x57
   389  0000B7                     	ds	2
   390  0000B9                     _main$1643:
   391                           	opt stack 0
   392                           
   393                           ; 2 bytes @ 0x59
   394  0000B9                     	ds	2
   395                           tblptru	equ	0xFF8
   396                           
   397                           	psect	cstackCOMRAM
   398  000001                     __pcstackCOMRAM:
   399                           	opt stack 0
   400  000001                     ?_adc_read:
   401                           	opt stack 0
   402  000001                     ?_ReadTimer0:
   403                           	opt stack 0
   404  000001                     ?___ftpack:
   405                           	opt stack 0
   406  000001                     ?___fttol:
   407                           	opt stack 0
   408  000001                     ?___lldiv:
   409                           	opt stack 0
   410  000001                     ?___llmod:
   411                           	opt stack 0
   412  000001                     adc_init@numero_dernier_canal:
   413                           	opt stack 0
   414  000001                     lcd_write_cmd_data@c:
   415                           	opt stack 0
   416  000001                     pwm_init@nb_canaux:
   417                           	opt stack 0
   418  000001                     OpenTimer0@config:
   419                           	opt stack 0
   420  000001                     ___ftpack@arg:
   421                           	opt stack 0
   422  000001                     ___ftge@ff1:
   423                           	opt stack 0
   424  000001                     ___fttol@f1:
   425                           	opt stack 0
   426  000001                     ___lldiv@dividend:
   427                           	opt stack 0
   428  000001                     ___llmod@dividend:
   429                           	opt stack 0
   430                           
   431                           ; 4 bytes @ 0x0
   432  000001                     	ds	1
   433  000002                     lcd_write_data_busy@c:
   434                           	opt stack 0
   435  000002                     lcd_write_cmd_busy@c:
   436                           	opt stack 0
   437  000002                     pwm_init@period:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x1
   441  000002                     	ds	1
   442  000003                     ??_lcd_init:
   443  000003                     ??_adc_read:
   444  000003                     lcd_position@colonne:
   445                           	opt stack 0
   446  000003                     lcd_repete_n@c:
   447                           	opt stack 0
   448  000003                     ReadTimer0@timer:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x2
   452  000003                     	ds	1
   453  000004                     lcd_position@ligne:
   454                           	opt stack 0
   455  000004                     lcd_repete_n@n:
   456                           	opt stack 0
   457  000004                     ___ftpack@exp:
   458                           	opt stack 0
   459  000004                     ___ftge@ff2:
   460                           	opt stack 0
   461                           
   462                           ; 3 bytes @ 0x3
   463  000004                     	ds	1
   464  000005                     ??___fttol:
   465  000005                     adc_read@numero_canal:
   466                           	opt stack 0
   467  000005                     lcd_position@address:
   468                           	opt stack 0
   469  000005                     ___ftpack@sign:
   470                           	opt stack 0
   471  000005                     ___lldiv@divisor:
   472                           	opt stack 0
   473  000005                     ___llmod@divisor:
   474                           	opt stack 0
   475                           
   476                           ; 4 bytes @ 0x4
   477  000005                     	ds	1
   478  000006                     ??___ftpack:
   479  000006                     lcd_putc@lettre:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x5
   483  000006                     	ds	1
   484  000007                     ??___ftge:
   485                           
   486                           ; 1 bytes @ 0x6
   487  000007                     	ds	2
   488  000009                     ?___awtoft:
   489                           	opt stack 0
   490  000009                     ?___lwtoft:
   491                           	opt stack 0
   492  000009                     ___llmod@counter:
   493                           	opt stack 0
   494  000009                     ___awtoft@c:
   495                           	opt stack 0
   496  000009                     ___lwtoft@c:
   497                           	opt stack 0
   498  000009                     ___lldiv@quotient:
   499                           	opt stack 0
   500                           
   501                           ; 4 bytes @ 0x8
   502  000009                     	ds	1
   503  00000A                     ___fttol@sign1:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x9
   507  00000A                     	ds	1
   508  00000B                     ___fttol@lval:
   509                           	opt stack 0
   510                           
   511                           ; 4 bytes @ 0xA
   512  00000B                     	ds	1
   513  00000C                     ___awtoft@sign:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0xB
   517  00000C                     	ds	1
   518  00000D                     ?___ftneg:
   519                           	opt stack 0
   520  00000D                     ___lldiv@counter:
   521                           	opt stack 0
   522  00000D                     ___ftneg@f1:
   523                           	opt stack 0
   524                           
   525                           ; 3 bytes @ 0xC
   526  00000D                     	ds	2
   527  00000F                     ___fttol@exp1:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0xE
   531  00000F                     	ds	1
   532  000010                     ?___ftadd:
   533                           	opt stack 0
   534  000010                     pwm_setdc1@cycles_etat_haut:
   535                           	opt stack 0
   536  000010                     pwm_setdc2@cycles_etat_haut:
   537                           	opt stack 0
   538  000010                     ___ftadd@f1:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0xF
   542  000010                     	ds	2
   543  000012                     ??_pwm_setdc1:
   544  000012                     ??_pwm_setdc2:
   545                           
   546                           ; 1 bytes @ 0x11
   547  000012                     	ds	1
   548  000013                     ___ftadd@f2:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x12
   552  000013                     	ds	3
   553  000016                     ??___ftadd:
   554                           
   555                           ; 1 bytes @ 0x15
   556  000016                     	ds	3
   557  000019                     ___ftadd@sign:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x18
   561  000019                     	ds	1
   562  00001A                     ___ftadd@exp2:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x19
   566  00001A                     	ds	1
   567  00001B                     ___ftadd@exp1:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x1A
   571  00001B                     	ds	1
   572  00001C                     ?___ftmul:
   573                           	opt stack 0
   574  00001C                     ___ftmul@f1:
   575                           	opt stack 0
   576                           
   577                           ; 3 bytes @ 0x1B
   578  00001C                     	ds	3
   579  00001F                     ___ftmul@f2:
   580                           	opt stack 0
   581                           
   582                           ; 3 bytes @ 0x1E
   583  00001F                     	ds	3
   584  000022                     ??___ftmul:
   585                           
   586                           ; 1 bytes @ 0x21
   587  000022                     	ds	3
   588  000025                     ___ftmul@exp:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x24
   592  000025                     	ds	1
   593  000026                     ___ftmul@f3_as_product:
   594                           	opt stack 0
   595                           
   596                           ; 3 bytes @ 0x25
   597  000026                     	ds	3
   598  000029                     ___ftmul@cntr:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x28
   602  000029                     	ds	1
   603  00002A                     ___ftmul@sign:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x29
   607  00002A                     	ds	1
   608  00002B                     ?___ftdiv:
   609                           	opt stack 0
   610  00002B                     ___ftdiv@f1:
   611                           	opt stack 0
   612                           
   613                           ; 3 bytes @ 0x2A
   614  00002B                     	ds	3
   615  00002E                     ___ftdiv@f2:
   616                           	opt stack 0
   617                           
   618                           ; 3 bytes @ 0x2D
   619  00002E                     	ds	3
   620  000031                     ??___ftdiv:
   621                           
   622                           ; 1 bytes @ 0x30
   623  000031                     	ds	3
   624  000034                     ___ftdiv@cntr:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x33
   628  000034                     	ds	1
   629  000035                     ___ftdiv@f3:
   630                           	opt stack 0
   631                           
   632                           ; 3 bytes @ 0x34
   633  000035                     	ds	3
   634  000038                     ___ftdiv@exp:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x37
   638  000038                     	ds	1
   639  000039                     ___ftdiv@sign:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x38
   643  000039                     	ds	1
   644  00003A                     ?_lcd_printf:
   645                           	opt stack 0
   646  00003A                     lcd_printf@f:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x39
   650  00003A                     	ds	10
   651  000044                     ??_lcd_printf:
   652                           
   653                           ; 1 bytes @ 0x43
   654  000044                     	ds	7
   655  00004B                     ??_main:
   656                           
   657                           ; 1 bytes @ 0x4A
   658  00004B                     	ds	1
   659                           tblptru	equ	0xFF8
   660                           
   661 ;;
   662 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   663 ;;
   664 ;; *************** function _main *****************
   665 ;; Defined at:
   666 ;;		line 14 in file "main.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;		None
   669 ;; Auto vars:     Size  Location     Type
   670 ;;  moteurD         3   82[BANK0 ] PTR void [1]
   671 ;;  moteurG         3   79[BANK0 ] PTR void [1]
   672 ;;  n3              2   87[BANK0 ] int 
   673 ;;  n2              2   85[BANK0 ] int 
   674 ;;  n4              2   77[BANK0 ] int 
   675 ;;  n1              2   75[BANK0 ] int 
   676 ;;  vitesseMax      2   73[BANK0 ] int 
   677 ;;  finDeCourse     2   71[BANK0 ] int 
   678 ;;  debutDeCours    2   69[BANK0 ] int 
   679 ;;  timer           2   67[BANK0 ] int 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   689 ;;      Params:         0       0       0       0       0       0       0       0       0
   690 ;;      Locals:         0      24       0       0       0       0       0       0       0
   691 ;;      Temps:          1       0       0       0       0       0       0       0       0
   692 ;;      Totals:         1      24       0       0       0       0       0       0       0
   693 ;;Total ram usage:       25 bytes
   694 ;; Hardware stack levels required when called:    6
   695 ;; This function calls:
   696 ;;		_CloseTimer0
   697 ;;		_OpenTimer0
   698 ;;		_ReadTimer0
   699 ;;		___awtoft
   700 ;;		___ftadd
   701 ;;		___ftdiv
   702 ;;		___ftmul
   703 ;;		___ftneg
   704 ;;		___fttol
   705 ;;		_adc_init
   706 ;;		_adc_read
   707 ;;		_lcd_init
   708 ;;		_lcd_position
   709 ;;		_lcd_printf
   710 ;;		_pwm_init
   711 ;;		_pwm_setdc1
   712 ;;		_pwm_setdc2
   713 ;; This function is called by:
   714 ;;		Startup code after reset
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text0
   719  0015B8                     __ptext0:
   720                           	opt stack 0
   721  0015B8                     _main:
   722                           	opt stack 25
   723                           
   724                           ;main.c: 16: int n1,n2,n3,n4;
   725                           ;main.c: 17: adc_init(5);
   726                           
   727                           ;incstack = 0
   728  0015B8  0E05               	movlw	5
   729  0015BA  ECAB  F00F         	call	_adc_init
   730                           
   731                           ;main.c: 18: lcd_init();
   732  0015BE  ECFE  F00F         	call	_lcd_init	;wreg free
   733                           
   734                           ;main.c: 19: int finDeCourse=1, debutDeCourse;
   735  0015C2  0E00               	movlw	0
   736  0015C4  0100               	movlb	0	; () banked
   737  0015C6  6FA8               	movwf	(main@finDeCourse+1)& (0+255),b
   738  0015C8  0E01               	movlw	1
   739  0015CA  6FA7               	movwf	main@finDeCourse& (0+255),b
   740                           
   741                           ; BSR set to: 0
   742                           ;main.c: 20: double moteurG, moteurD;
   743                           ;main.c: 21: int vitesseMax = 180;
   744  0015CC  0E00               	movlw	0
   745  0015CE  0100               	movlb	0	; () banked
   746  0015D0  6FAA               	movwf	(main@vitesseMax+1)& (0+255),b
   747  0015D2  0EB4               	movlw	180
   748  0015D4  6FA9               	movwf	main@vitesseMax& (0+255),b
   749                           
   750                           ; BSR set to: 0
   751                           ;main.c: 22: int timer;
   752                           ;main.c: 24: TRISEbits.TRISE1 = 1;
   753  0015D6  8296               	bsf	3990,1,c	;volatile
   754                           
   755                           ; BSR set to: 0
   756                           ;main.c: 25: TRISEbits.TRISE2 = 1;
   757  0015D8  8496               	bsf	3990,2,c	;volatile
   758  0015DA                     l31:
   759                           
   760                           ;main.c: 29: {
   761                           ;main.c: 30: n1=adc_read(1);
   762  0015DA  0E01               	movlw	1
   763  0015DC  ECC1  F011         	call	_adc_read
   764  0015E0  C001  F0AB         	movff	?_adc_read,main@n1
   765  0015E4  C002  F0AC         	movff	?_adc_read+1,main@n1+1
   766                           
   767                           ;main.c: 31: n2=adc_read(3);
   768  0015E8  0E03               	movlw	3
   769  0015EA  ECC1  F011         	call	_adc_read
   770  0015EE  C001  F0B5         	movff	?_adc_read,main@n2
   771  0015F2  C002  F0B6         	movff	?_adc_read+1,main@n2+1
   772                           
   773                           ;main.c: 32: n3=adc_read(4);
   774  0015F6  0E04               	movlw	4
   775  0015F8  ECC1  F011         	call	_adc_read
   776  0015FC  C001  F0B7         	movff	?_adc_read,main@n3
   777  001600  C002  F0B8         	movff	?_adc_read+1,main@n3+1
   778                           
   779                           ;main.c: 33: n4=adc_read(5);
   780  001604  0E05               	movlw	5
   781  001606  ECC1  F011         	call	_adc_read
   782  00160A  C001  F0AD         	movff	?_adc_read,main@n4
   783  00160E  C002  F0AE         	movff	?_adc_read+1,main@n4+1
   784                           
   785                           ;main.c: 35: debutDeCourse = PORTEbits.RE1;
   786  001612  A284               	btfss	3972,1,c	;volatile
   787  001614  D003               	goto	u3800
   788  001616  6A4B               	clrf	??_main& (0+255),c
   789  001618  2A4B               	incf	??_main& (0+255),f,c
   790  00161A  D001               	goto	u3808
   791  00161C                     u3800:
   792  00161C  6A4B               	clrf	??_main& (0+255),c
   793  00161E                     u3808:
   794  00161E  504B               	movf	??_main,w,c
   795  001620  0100               	movlb	0	; () banked
   796  001622  6FA5               	movwf	main@debutDeCourse& (0+255),b
   797  001624  6BA6               	clrf	(main@debutDeCourse+1)& (0+255),b
   798                           
   799                           ; BSR set to: 0
   800                           ;main.c: 36: finDeCourse = PORTEbits.RE2;
   801  001626  A484               	btfss	3972,2,c	;volatile
   802  001628  D003               	goto	u3810
   803  00162A  6A4B               	clrf	??_main& (0+255),c
   804  00162C  2A4B               	incf	??_main& (0+255),f,c
   805  00162E  D001               	goto	u3818
   806  001630                     u3810:
   807  001630  6A4B               	clrf	??_main& (0+255),c
   808  001632                     u3818:
   809  001632  504B               	movf	??_main,w,c
   810  001634  0100               	movlb	0	; () banked
   811  001636  6FA7               	movwf	main@finDeCourse& (0+255),b
   812  001638  6BA8               	clrf	(main@finDeCourse+1)& (0+255),b
   813                           
   814                           ; BSR set to: 0
   815                           ;main.c: 38: if (debutDeCourse == 1)
   816  00163A  0100               	movlb	0	; () banked
   817  00163C  05A5               	decf	main@debutDeCourse& (0+255),w,b
   818  00163E  0100               	movlb	0	; () banked
   819  001640  11A6               	iorwf	(main@debutDeCourse+1)& (0+255),w,b
   820  001642  A4D8               	btfss	status,2,c
   821  001644  D005               	goto	l3533
   822                           
   823                           ; BSR set to: 0
   824                           ;main.c: 39: {
   825                           ;main.c: 40: pwm_init (150,2);
   826  001646  0E02               	movlw	2
   827  001648  6E01               	movwf	pwm_init@nb_canaux,c
   828  00164A  0E96               	movlw	150
   829  00164C  EC49  F011         	call	_pwm_init
   830  001650                     l3533:
   831                           
   832                           ;main.c: 41: }
   833                           ;main.c: 43: if ((n1<200)&& (n4>200))
   834  001650  0100               	movlb	0	; () banked
   835  001652  BFAC               	btfsc	(main@n1+1)& (0+255),7,b
   836  001654  D008               	goto	l3535
   837  001656  0100               	movlb	0	; () banked
   838  001658  51AC               	movf	(main@n1+1)& (0+255),w,b
   839  00165A  E113               	bnz	l3539
   840  00165C  0EC8               	movlw	200
   841  00165E  0100               	movlb	0	; () banked
   842  001660  5DAB               	subwf	main@n1& (0+255),w,b
   843  001662  B0D8               	btfsc	status,0,c
   844  001664  D00E               	goto	l3539
   845  001666                     l3535:
   846                           
   847                           ; BSR set to: 0
   848  001666  0100               	movlb	0	; () banked
   849  001668  BFAE               	btfsc	(main@n4+1)& (0+255),7,b
   850  00166A  D00B               	goto	l3539
   851  00166C  0100               	movlb	0	; () banked
   852  00166E  51AE               	movf	(main@n4+1)& (0+255),w,b
   853  001670  E105               	bnz	u3840
   854  001672  0EC9               	movlw	201
   855  001674  0100               	movlb	0	; () banked
   856  001676  5DAD               	subwf	main@n4& (0+255),w,b
   857  001678  A0D8               	btfss	status,0,c
   858  00167A  D003               	goto	l3539
   859  00167C                     u3840:
   860                           
   861                           ; BSR set to: 0
   862                           ;main.c: 44: {
   863                           ;main.c: 45: OpenTimer0( 0b11111111 &
   864                           ;main.c: 46: 0b10111111 &
   865                           ;main.c: 47: 0b11011111 &
   866                           ;main.c: 48: 0b11110111);
   867  00167C  0E97               	movlw	151
   868  00167E  ECFA  F011         	call	_OpenTimer0
   869  001682                     l3539:
   870  001682  EC42  F012         	call	_ReadTimer0	;wreg free
   871  001686  0EA7               	movlw	167
   872  001688  5C01               	subwf	?_ReadTimer0,w,c
   873  00168A  0E0E               	movlw	14
   874  00168C  5802               	subwfb	?_ReadTimer0+1,w,c
   875  00168E  B0D8               	btfsc	status,0,c
   876  001690  D7F8               	goto	l3539
   877  001692  0100               	movlb	0	; () banked
   878  001694  BFB6               	btfsc	(main@n2+1)& (0+255),7,b
   879  001696  D013               	goto	l3545
   880  001698  0E91               	movlw	145
   881  00169A  0100               	movlb	0	; () banked
   882  00169C  5DB5               	subwf	main@n2& (0+255),w,b
   883  00169E  0E01               	movlw	1
   884  0016A0  0100               	movlb	0	; () banked
   885  0016A2  59B6               	subwfb	(main@n2+1)& (0+255),w,b
   886  0016A4  A0D8               	btfss	status,0,c
   887  0016A6  D00B               	goto	l3545
   888                           
   889                           ; BSR set to: 0
   890  0016A8  0100               	movlb	0	; () banked
   891  0016AA  BFB8               	btfsc	(main@n3+1)& (0+255),7,b
   892  0016AC  D008               	goto	l3545
   893  0016AE  0E91               	movlw	145
   894  0016B0  0100               	movlb	0	; () banked
   895  0016B2  5DB7               	subwf	main@n3& (0+255),w,b
   896  0016B4  0E01               	movlw	1
   897  0016B6  0100               	movlb	0	; () banked
   898  0016B8  59B8               	subwfb	(main@n3+1)& (0+255),w,b
   899  0016BA  B0D8               	btfsc	status,0,c
   900  0016BC  D7E2               	goto	l3539
   901  0016BE                     l3545:
   902                           
   903                           ; BSR set to: 0
   904                           ;main.c: 52: {
   905                           ;main.c: 53: CloseTimer0();
   906  0016BE  EC54  F012         	call	_CloseTimer0	;wreg free
   907                           
   908                           ;main.c: 54: timer=ReadTimer0();
   909  0016C2  EC42  F012         	call	_ReadTimer0	;wreg free
   910  0016C6  C001  F0A3         	movff	?_ReadTimer0,main@timer
   911  0016CA  C002  F0A4         	movff	?_ReadTimer0+1,main@timer+1
   912                           
   913                           ;main.c: 55: n2=adc_read(3);
   914  0016CE  0E03               	movlw	3
   915  0016D0  ECC1  F011         	call	_adc_read
   916  0016D4  C001  F0B5         	movff	?_adc_read,main@n2
   917  0016D8  C002  F0B6         	movff	?_adc_read+1,main@n2+1
   918                           
   919                           ;main.c: 56: n3=adc_read(4);
   920  0016DC  0E04               	movlw	4
   921  0016DE  ECC1  F011         	call	_adc_read
   922  0016E2  C001  F0B7         	movff	?_adc_read,main@n3
   923  0016E6  C002  F0B8         	movff	?_adc_read+1,main@n3+1
   924                           
   925                           ;main.c: 57: pwm_setdc1(0);
   926  0016EA  0E00               	movlw	0
   927  0016EC  6E11               	movwf	pwm_setdc1@cycles_etat_haut+1,c
   928  0016EE  0E00               	movlw	0
   929  0016F0  6E10               	movwf	pwm_setdc1@cycles_etat_haut,c
   930  0016F2  ECAC  F011         	call	_pwm_setdc1	;wreg free
   931                           
   932                           ;main.c: 58: pwm_setdc2(180);
   933  0016F6  0E00               	movlw	0
   934  0016F8  6E11               	movwf	pwm_setdc2@cycles_etat_haut+1,c
   935  0016FA  0EB4               	movlw	180
   936  0016FC  6E10               	movwf	pwm_setdc2@cycles_etat_haut,c
   937  0016FE  EC97  F011         	call	_pwm_setdc2	;wreg free
   938                           
   939                           ;main.c: 60: lcd_position(0,0);
   940  001702  0E00               	movlw	0
   941  001704  6E03               	movwf	lcd_position@colonne,c
   942  001706  0E00               	movlw	0
   943  001708  EC0A  F012         	call	_lcd_position
   944                           
   945                           ;main.c: 61: lcd_printf("%3d %7d %3d",n1,n2,n3,n4);
   946  00170C  0E22               	movlw	low STR_1
   947  00170E  6E3A               	movwf	lcd_printf@f,c
   948  001710  0E08               	movlw	high STR_1
   949  001712  6E3B               	movwf	lcd_printf@f+1,c
   950  001714  C0AB  F03C         	movff	main@n1,?_lcd_printf+2
   951  001718  C0AC  F03D         	movff	main@n1+1,?_lcd_printf+3
   952  00171C  C0B5  F03E         	movff	main@n2,?_lcd_printf+4
   953  001720  C0B6  F03F         	movff	main@n2+1,?_lcd_printf+5
   954  001724  C0B7  F040         	movff	main@n3,?_lcd_printf+6
   955  001728  C0B8  F041         	movff	main@n3+1,?_lcd_printf+7
   956  00172C  C0AD  F042         	movff	main@n4,?_lcd_printf+8
   957  001730  C0AE  F043         	movff	main@n4+1,?_lcd_printf+9
   958  001734  EC22  F004         	call	_lcd_printf	;wreg free
   959                           
   960                           ;main.c: 62: lcd_position(1,0);
   961  001738  0E00               	movlw	0
   962  00173A  6E03               	movwf	lcd_position@colonne,c
   963  00173C  0E01               	movlw	1
   964  00173E  EC0A  F012         	call	_lcd_position
   965                           
   966                           ;main.c: 63: lcd_printf("MG %4d",(int) moteurG);
   967  001742  C0AF  F001         	movff	main@moteurG,___fttol@f1
   968  001746  C0B0  F002         	movff	main@moteurG+1,___fttol@f1+1
   969  00174A  C0B1  F003         	movff	main@moteurG+2,___fttol@f1+2
   970  00174E  ECED  F00D         	call	___fttol	;wreg free
   971  001752  C001  F0B9         	movff	?___fttol,_main$1643
   972  001756  C002  F0BA         	movff	?___fttol+1,_main$1643+1
   973                           
   974                           ;main.c: 63: lcd_printf("MG %4d",(int) moteurG);
   975  00175A  0E35               	movlw	low STR_2
   976  00175C  6E3A               	movwf	lcd_printf@f,c
   977  00175E  0E08               	movlw	high STR_2
   978  001760  6E3B               	movwf	lcd_printf@f+1,c
   979  001762  C0B9  F03C         	movff	_main$1643,?_lcd_printf+2
   980  001766  C0BA  F03D         	movff	_main$1643+1,?_lcd_printf+3
   981  00176A  EC22  F004         	call	_lcd_printf	;wreg free
   982                           
   983                           ;main.c: 64: lcd_position(1,8);
   984  00176E  0E08               	movlw	8
   985  001770  6E03               	movwf	lcd_position@colonne,c
   986  001772  0E01               	movlw	1
   987  001774  EC0A  F012         	call	_lcd_position
   988                           
   989                           ;main.c: 65: lcd_printf("MD %4d",(int) moteurD);
   990  001778  C0B2  F001         	movff	main@moteurD,___fttol@f1
   991  00177C  C0B3  F002         	movff	main@moteurD+1,___fttol@f1+1
   992  001780  C0B4  F003         	movff	main@moteurD+2,___fttol@f1+2
   993  001784  ECED  F00D         	call	___fttol	;wreg free
   994  001788  C001  F0B9         	movff	?___fttol,_main$1643
   995  00178C  C002  F0BA         	movff	?___fttol+1,_main$1643+1
   996                           
   997                           ;main.c: 65: lcd_printf("MD %4d",(int) moteurD);
   998  001790  0E2E               	movlw	low STR_3
   999  001792  6E3A               	movwf	lcd_printf@f,c
  1000  001794  0E08               	movlw	high STR_3
  1001  001796  6E3B               	movwf	lcd_printf@f+1,c
  1002  001798  C0B9  F03C         	movff	_main$1643,?_lcd_printf+2
  1003  00179C  C0BA  F03D         	movff	_main$1643+1,?_lcd_printf+3
  1004  0017A0  EC22  F004         	call	_lcd_printf	;wreg free
  1005                           
  1006                           ;main.c: 66: }
  1007                           ;main.c: 68: moteurG = vitesseMax * (1023-(double)n3)/1024;
  1008  0017A4  C0A9  F009         	movff	main@vitesseMax,___awtoft@c
  1009  0017A8  C0AA  F00A         	movff	main@vitesseMax+1,___awtoft@c+1
  1010  0017AC  EC65  F011         	call	___awtoft	;wreg free
  1011  0017B0  C009  F01F         	movff	?___awtoft,___ftmul@f2
  1012  0017B4  C00A  F020         	movff	?___awtoft+1,___ftmul@f2+1
  1013  0017B8  C00B  F021         	movff	?___awtoft+2,___ftmul@f2+2
  1014  0017BC  0EC0               	movlw	192
  1015  0017BE  6E13               	movwf	___ftadd@f2,c
  1016  0017C0  0E7F               	movlw	127
  1017  0017C2  6E14               	movwf	___ftadd@f2+1,c
  1018  0017C4  0E44               	movlw	68
  1019  0017C6  6E15               	movwf	___ftadd@f2+2,c
  1020  0017C8  C0B7  F009         	movff	main@n3,___awtoft@c
  1021  0017CC  C0B8  F00A         	movff	main@n3+1,___awtoft@c+1
  1022  0017D0  EC65  F011         	call	___awtoft	;wreg free
  1023  0017D4  C009  F00D         	movff	?___awtoft,___ftneg@f1
  1024  0017D8  C00A  F00E         	movff	?___awtoft+1,___ftneg@f1+1
  1025  0017DC  C00B  F00F         	movff	?___awtoft+2,___ftneg@f1+2
  1026  0017E0  ECE8  F011         	call	___ftneg	;wreg free
  1027  0017E4  C00D  F010         	movff	?___ftneg,___ftadd@f1
  1028  0017E8  C00E  F011         	movff	?___ftneg+1,___ftadd@f1+1
  1029  0017EC  C00F  F012         	movff	?___ftneg+2,___ftadd@f1+2
  1030  0017F0  EC17  F00D         	call	___ftadd	;wreg free
  1031  0017F4  C010  F01C         	movff	?___ftadd,___ftmul@f1
  1032  0017F8  C011  F01D         	movff	?___ftadd+1,___ftmul@f1+1
  1033  0017FC  C012  F01E         	movff	?___ftadd+2,___ftmul@f1+2
  1034  001800  EC67  F00E         	call	___ftmul	;wreg free
  1035  001804  C01C  F02B         	movff	?___ftmul,___ftdiv@f1
  1036  001808  C01D  F02C         	movff	?___ftmul+1,___ftdiv@f1+1
  1037  00180C  C01E  F02D         	movff	?___ftmul+2,___ftdiv@f1+2
  1038  001810  0E00               	movlw	0
  1039  001812  6E2E               	movwf	___ftdiv@f2,c
  1040  001814  0E80               	movlw	128
  1041  001816  6E2F               	movwf	___ftdiv@f2+1,c
  1042  001818  0E44               	movlw	68
  1043  00181A  6E30               	movwf	___ftdiv@f2+2,c
  1044  00181C  ECE1  F00E         	call	___ftdiv	;wreg free
  1045  001820  C02B  F0AF         	movff	?___ftdiv,main@moteurG
  1046  001824  C02C  F0B0         	movff	?___ftdiv+1,main@moteurG+1
  1047  001828  C02D  F0B1         	movff	?___ftdiv+2,main@moteurG+2
  1048                           
  1049                           ;main.c: 69: moteurD = vitesseMax * (1023-(double)n2)/1024;
  1050  00182C  C0A9  F009         	movff	main@vitesseMax,___awtoft@c
  1051  001830  C0AA  F00A         	movff	main@vitesseMax+1,___awtoft@c+1
  1052  001834  EC65  F011         	call	___awtoft	;wreg free
  1053  001838  C009  F01F         	movff	?___awtoft,___ftmul@f2
  1054  00183C  C00A  F020         	movff	?___awtoft+1,___ftmul@f2+1
  1055  001840  C00B  F021         	movff	?___awtoft+2,___ftmul@f2+2
  1056  001844  0EC0               	movlw	192
  1057  001846  6E13               	movwf	___ftadd@f2,c
  1058  001848  0E7F               	movlw	127
  1059  00184A  6E14               	movwf	___ftadd@f2+1,c
  1060  00184C  0E44               	movlw	68
  1061  00184E  6E15               	movwf	___ftadd@f2+2,c
  1062  001850  C0B5  F009         	movff	main@n2,___awtoft@c
  1063  001854  C0B6  F00A         	movff	main@n2+1,___awtoft@c+1
  1064  001858  EC65  F011         	call	___awtoft	;wreg free
  1065  00185C  C009  F00D         	movff	?___awtoft,___ftneg@f1
  1066  001860  C00A  F00E         	movff	?___awtoft+1,___ftneg@f1+1
  1067  001864  C00B  F00F         	movff	?___awtoft+2,___ftneg@f1+2
  1068  001868  ECE8  F011         	call	___ftneg	;wreg free
  1069  00186C  C00D  F010         	movff	?___ftneg,___ftadd@f1
  1070  001870  C00E  F011         	movff	?___ftneg+1,___ftadd@f1+1
  1071  001874  C00F  F012         	movff	?___ftneg+2,___ftadd@f1+2
  1072  001878  EC17  F00D         	call	___ftadd	;wreg free
  1073  00187C  C010  F01C         	movff	?___ftadd,___ftmul@f1
  1074  001880  C011  F01D         	movff	?___ftadd+1,___ftmul@f1+1
  1075  001884  C012  F01E         	movff	?___ftadd+2,___ftmul@f1+2
  1076  001888  EC67  F00E         	call	___ftmul	;wreg free
  1077  00188C  C01C  F02B         	movff	?___ftmul,___ftdiv@f1
  1078  001890  C01D  F02C         	movff	?___ftmul+1,___ftdiv@f1+1
  1079  001894  C01E  F02D         	movff	?___ftmul+2,___ftdiv@f1+2
  1080  001898  0E00               	movlw	0
  1081  00189A  6E2E               	movwf	___ftdiv@f2,c
  1082  00189C  0E80               	movlw	128
  1083  00189E  6E2F               	movwf	___ftdiv@f2+1,c
  1084  0018A0  0E44               	movlw	68
  1085  0018A2  6E30               	movwf	___ftdiv@f2+2,c
  1086  0018A4  ECE1  F00E         	call	___ftdiv	;wreg free
  1087  0018A8  C02B  F0B2         	movff	?___ftdiv,main@moteurD
  1088  0018AC  C02C  F0B3         	movff	?___ftdiv+1,main@moteurD+1
  1089  0018B0  C02D  F0B4         	movff	?___ftdiv+2,main@moteurD+2
  1090                           
  1091                           ;main.c: 71: pwm_setdc1(moteurG);
  1092  0018B4  C0AF  F001         	movff	main@moteurG,___fttol@f1
  1093  0018B8  C0B0  F002         	movff	main@moteurG+1,___fttol@f1+1
  1094  0018BC  C0B1  F003         	movff	main@moteurG+2,___fttol@f1+2
  1095  0018C0  ECED  F00D         	call	___fttol	;wreg free
  1096  0018C4  C001  F010         	movff	?___fttol,pwm_setdc1@cycles_etat_haut
  1097  0018C8  C002  F011         	movff	?___fttol+1,pwm_setdc1@cycles_etat_haut+1
  1098  0018CC  ECAC  F011         	call	_pwm_setdc1	;wreg free
  1099                           
  1100                           ;main.c: 72: pwm_setdc2(moteurD);
  1101  0018D0  C0B2  F001         	movff	main@moteurD,___fttol@f1
  1102  0018D4  C0B3  F002         	movff	main@moteurD+1,___fttol@f1+1
  1103  0018D8  C0B4  F003         	movff	main@moteurD+2,___fttol@f1+2
  1104  0018DC  ECED  F00D         	call	___fttol	;wreg free
  1105  0018E0  C001  F010         	movff	?___fttol,pwm_setdc2@cycles_etat_haut
  1106  0018E4  C002  F011         	movff	?___fttol+1,pwm_setdc2@cycles_etat_haut+1
  1107  0018E8  EC97  F011         	call	_pwm_setdc2	;wreg free
  1108                           
  1109                           ;main.c: 75: lcd_position(0,0);
  1110  0018EC  0E00               	movlw	0
  1111  0018EE  6E03               	movwf	lcd_position@colonne,c
  1112  0018F0  0E00               	movlw	0
  1113  0018F2  EC0A  F012         	call	_lcd_position
  1114                           
  1115                           ;main.c: 76: lcd_printf("%3d %3d %3d %3d",n1,n2,n3,n4);
  1116  0018F6  0E12               	movlw	low STR_4
  1117  0018F8  6E3A               	movwf	lcd_printf@f,c
  1118  0018FA  0E08               	movlw	high STR_4
  1119  0018FC  6E3B               	movwf	lcd_printf@f+1,c
  1120  0018FE  C0AB  F03C         	movff	main@n1,?_lcd_printf+2
  1121  001902  C0AC  F03D         	movff	main@n1+1,?_lcd_printf+3
  1122  001906  C0B5  F03E         	movff	main@n2,?_lcd_printf+4
  1123  00190A  C0B6  F03F         	movff	main@n2+1,?_lcd_printf+5
  1124  00190E  C0B7  F040         	movff	main@n3,?_lcd_printf+6
  1125  001912  C0B8  F041         	movff	main@n3+1,?_lcd_printf+7
  1126  001916  C0AD  F042         	movff	main@n4,?_lcd_printf+8
  1127  00191A  C0AE  F043         	movff	main@n4+1,?_lcd_printf+9
  1128  00191E  EC22  F004         	call	_lcd_printf	;wreg free
  1129                           
  1130                           ;main.c: 77: lcd_position(1,0);
  1131  001922  0E00               	movlw	0
  1132  001924  6E03               	movwf	lcd_position@colonne,c
  1133  001926  0E01               	movlw	1
  1134  001928  EC0A  F012         	call	_lcd_position
  1135                           
  1136                           ;main.c: 78: lcd_printf("MG %4d",(int) moteurG);
  1137  00192C  C0AF  F001         	movff	main@moteurG,___fttol@f1
  1138  001930  C0B0  F002         	movff	main@moteurG+1,___fttol@f1+1
  1139  001934  C0B1  F003         	movff	main@moteurG+2,___fttol@f1+2
  1140  001938  ECED  F00D         	call	___fttol	;wreg free
  1141  00193C  C001  F0B9         	movff	?___fttol,_main$1643
  1142  001940  C002  F0BA         	movff	?___fttol+1,_main$1643+1
  1143                           
  1144                           ;main.c: 78: lcd_printf("MG %4d",(int) moteurG);
  1145  001944  0E35               	movlw	low STR_2
  1146  001946  6E3A               	movwf	lcd_printf@f,c
  1147  001948  0E08               	movlw	high STR_2
  1148  00194A  6E3B               	movwf	lcd_printf@f+1,c
  1149  00194C  C0B9  F03C         	movff	_main$1643,?_lcd_printf+2
  1150  001950  C0BA  F03D         	movff	_main$1643+1,?_lcd_printf+3
  1151  001954  EC22  F004         	call	_lcd_printf	;wreg free
  1152                           
  1153                           ;main.c: 79: lcd_position(1,8);
  1154  001958  0E08               	movlw	8
  1155  00195A  6E03               	movwf	lcd_position@colonne,c
  1156  00195C  0E01               	movlw	1
  1157  00195E  EC0A  F012         	call	_lcd_position
  1158                           
  1159                           ;main.c: 80: lcd_printf("MD %4d",(int) moteurD);
  1160  001962  C0B2  F001         	movff	main@moteurD,___fttol@f1
  1161  001966  C0B3  F002         	movff	main@moteurD+1,___fttol@f1+1
  1162  00196A  C0B4  F003         	movff	main@moteurD+2,___fttol@f1+2
  1163  00196E  ECED  F00D         	call	___fttol	;wreg free
  1164  001972  C001  F0B9         	movff	?___fttol,_main$1643
  1165  001976  C002  F0BA         	movff	?___fttol+1,_main$1643+1
  1166                           
  1167                           ;main.c: 80: lcd_printf("MD %4d",(int) moteurD);
  1168  00197A  0E2E               	movlw	low STR_3
  1169  00197C  6E3A               	movwf	lcd_printf@f,c
  1170  00197E  0E08               	movlw	high STR_3
  1171  001980  6E3B               	movwf	lcd_printf@f+1,c
  1172  001982  C0B9  F03C         	movff	_main$1643,?_lcd_printf+2
  1173  001986  C0BA  F03D         	movff	_main$1643+1,?_lcd_printf+3
  1174  00198A  EC22  F004         	call	_lcd_printf	;wreg free
  1175                           
  1176                           ;main.c: 82: if (finDeCourse == 0)
  1177  00198E  0100               	movlb	0	; () banked
  1178  001990  51A7               	movf	main@finDeCourse& (0+255),w,b
  1179  001992  0100               	movlb	0	; () banked
  1180  001994  11A8               	iorwf	(main@finDeCourse+1)& (0+255),w,b
  1181  001996  A4D8               	btfss	status,2,c
  1182  001998  D620               	goto	l31
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;main.c: 83: {
  1186                           ;main.c: 84: moteurG = 0;
  1187  00199A  0E00               	movlw	0
  1188  00199C  0100               	movlb	0	; () banked
  1189  00199E  6FAF               	movwf	main@moteurG& (0+255),b
  1190  0019A0  0E00               	movlw	0
  1191  0019A2  0100               	movlb	0	; () banked
  1192  0019A4  6FB0               	movwf	(main@moteurG+1)& (0+255),b
  1193  0019A6  0E00               	movlw	0
  1194  0019A8  0100               	movlb	0	; () banked
  1195  0019AA  6FB1               	movwf	(main@moteurG+2)& (0+255),b
  1196                           
  1197                           ;main.c: 85: moteurD = 0;
  1198  0019AC  0E00               	movlw	0
  1199  0019AE  0100               	movlb	0	; () banked
  1200  0019B0  6FB2               	movwf	main@moteurD& (0+255),b
  1201  0019B2  0E00               	movlw	0
  1202  0019B4  0100               	movlb	0	; () banked
  1203  0019B6  6FB3               	movwf	(main@moteurD+1)& (0+255),b
  1204  0019B8  0E00               	movlw	0
  1205  0019BA  0100               	movlb	0	; () banked
  1206  0019BC  6FB4               	movwf	(main@moteurD+2)& (0+255),b
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;main.c: 86: lcd_position(1,0);
  1210  0019BE  0E00               	movlw	0
  1211  0019C0  6E03               	movwf	lcd_position@colonne,c
  1212  0019C2  0E01               	movlw	1
  1213  0019C4  EC0A  F012         	call	_lcd_position
  1214                           
  1215                           ;main.c: 87: lcd_printf("MG %4d",(int) moteurG);
  1216  0019C8  C0AF  F001         	movff	main@moteurG,___fttol@f1
  1217  0019CC  C0B0  F002         	movff	main@moteurG+1,___fttol@f1+1
  1218  0019D0  C0B1  F003         	movff	main@moteurG+2,___fttol@f1+2
  1219  0019D4  ECED  F00D         	call	___fttol	;wreg free
  1220  0019D8  C001  F0B9         	movff	?___fttol,_main$1643
  1221  0019DC  C002  F0BA         	movff	?___fttol+1,_main$1643+1
  1222                           
  1223                           ;main.c: 87: lcd_printf("MG %4d",(int) moteurG);
  1224  0019E0  0E35               	movlw	low STR_2
  1225  0019E2  6E3A               	movwf	lcd_printf@f,c
  1226  0019E4  0E08               	movlw	high STR_2
  1227  0019E6  6E3B               	movwf	lcd_printf@f+1,c
  1228  0019E8  C0B9  F03C         	movff	_main$1643,?_lcd_printf+2
  1229  0019EC  C0BA  F03D         	movff	_main$1643+1,?_lcd_printf+3
  1230  0019F0  EC22  F004         	call	_lcd_printf	;wreg free
  1231                           
  1232                           ;main.c: 88: lcd_position(1,8);
  1233  0019F4  0E08               	movlw	8
  1234  0019F6  6E03               	movwf	lcd_position@colonne,c
  1235  0019F8  0E01               	movlw	1
  1236  0019FA  EC0A  F012         	call	_lcd_position
  1237                           
  1238                           ;main.c: 89: lcd_printf("MD %4d",(int) moteurD);
  1239  0019FE  C0B2  F001         	movff	main@moteurD,___fttol@f1
  1240  001A02  C0B3  F002         	movff	main@moteurD+1,___fttol@f1+1
  1241  001A06  C0B4  F003         	movff	main@moteurD+2,___fttol@f1+2
  1242  001A0A  ECED  F00D         	call	___fttol	;wreg free
  1243  001A0E  C001  F0B9         	movff	?___fttol,_main$1643
  1244  001A12  C002  F0BA         	movff	?___fttol+1,_main$1643+1
  1245                           
  1246                           ;main.c: 89: lcd_printf("MD %4d",(int) moteurD);
  1247  001A16  0E2E               	movlw	low STR_3
  1248  001A18  6E3A               	movwf	lcd_printf@f,c
  1249  001A1A  0E08               	movlw	high STR_3
  1250  001A1C  6E3B               	movwf	lcd_printf@f+1,c
  1251  001A1E  C0B9  F03C         	movff	_main$1643,?_lcd_printf+2
  1252  001A22  C0BA  F03D         	movff	_main$1643+1,?_lcd_printf+3
  1253  001A26  EC22  F004         	call	_lcd_printf	;wreg free
  1254                           
  1255                           ;main.c: 90: break;
  1256  001A2A  EF00  F000         	goto	start
  1257  001A2E                     __end_of_main:
  1258                           	opt stack 0
  1259                           tblptru	equ	0xFF8
  1260                           status	equ	0xFD8
  1261                           
  1262 ;; *************** function _pwm_setdc2 *****************
  1263 ;; Defined at:
  1264 ;;		line 102 in file "iut_pwm.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;  cycles_etat_    2   15[COMRAM] unsigned int 
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;		None
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  1    wreg      void 
  1271 ;; Registers used:
  1272 ;;		wreg, status,2, status,0
  1273 ;; Tracked objects:
  1274 ;;		On entry : 0/0
  1275 ;;		On exit  : 0/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1278 ;;      Params:         2       0       0       0       0       0       0       0       0
  1279 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1280 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1281 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1282 ;;Total ram usage:        4 bytes
  1283 ;; Hardware stack levels used:    1
  1284 ;; This function calls:
  1285 ;;		Nothing
  1286 ;; This function is called by:
  1287 ;;		_main
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           	psect	text1
  1292  00232E                     __ptext1:
  1293                           	opt stack 0
  1294  00232E                     _pwm_setdc2:
  1295                           	opt stack 30
  1296                           
  1297                           ;iut_pwm.c: 103: CCPR2L = cycles_etat_haut >> 2;
  1298                           
  1299                           ;incstack = 0
  1300  00232E  C010  F012         	movff	pwm_setdc2@cycles_etat_haut,??_pwm_setdc2
  1301  002332  C011  F013         	movff	pwm_setdc2@cycles_etat_haut+1,??_pwm_setdc2+1
  1302  002336  90D8               	bcf	status,0,c
  1303  002338  3213               	rrcf	??_pwm_setdc2+1,f,c
  1304  00233A  3212               	rrcf	??_pwm_setdc2,f,c
  1305  00233C  90D8               	bcf	status,0,c
  1306  00233E  3213               	rrcf	??_pwm_setdc2+1,f,c
  1307  002340  3212               	rrcf	??_pwm_setdc2,f,c
  1308  002342  5012               	movf	??_pwm_setdc2,w,c
  1309  002344  6EBB               	movwf	4027,c	;volatile
  1310                           
  1311                           ;iut_pwm.c: 104: CCP2CONbits.DC2B = cycles_etat_haut;
  1312  002346  C010  F012         	movff	pwm_setdc2@cycles_etat_haut,??_pwm_setdc2
  1313  00234A  3A12               	swapf	??_pwm_setdc2,f,c
  1314  00234C  50BA               	movf	4026,w,c	;volatile
  1315  00234E  1812               	xorwf	??_pwm_setdc2,w,c
  1316  002350  0BCF               	andlw	-49
  1317  002352  1812               	xorwf	??_pwm_setdc2,w,c
  1318  002354  6EBA               	movwf	4026,c	;volatile
  1319  002356  0012               	return		;funcret
  1320  002358                     __end_of_pwm_setdc2:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           status	equ	0xFD8
  1324                           
  1325 ;; *************** function _pwm_setdc1 *****************
  1326 ;; Defined at:
  1327 ;;		line 87 in file "iut_pwm.c"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;  cycles_etat_    2   15[COMRAM] unsigned int 
  1330 ;; Auto vars:     Size  Location     Type
  1331 ;;		None
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      void 
  1334 ;; Registers used:
  1335 ;;		wreg, status,2, status,0
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1341 ;;      Params:         2       0       0       0       0       0       0       0       0
  1342 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1343 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1344 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1345 ;;Total ram usage:        4 bytes
  1346 ;; Hardware stack levels used:    1
  1347 ;; This function calls:
  1348 ;;		Nothing
  1349 ;; This function is called by:
  1350 ;;		_main
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           	psect	text2
  1355  002358                     __ptext2:
  1356                           	opt stack 0
  1357  002358                     _pwm_setdc1:
  1358                           	opt stack 30
  1359                           
  1360                           ;iut_pwm.c: 88: CCPR1L = cycles_etat_haut >> 2;
  1361                           
  1362                           ;incstack = 0
  1363  002358  C010  F012         	movff	pwm_setdc1@cycles_etat_haut,??_pwm_setdc1
  1364  00235C  C011  F013         	movff	pwm_setdc1@cycles_etat_haut+1,??_pwm_setdc1+1
  1365  002360  90D8               	bcf	status,0,c
  1366  002362  3213               	rrcf	??_pwm_setdc1+1,f,c
  1367  002364  3212               	rrcf	??_pwm_setdc1,f,c
  1368  002366  90D8               	bcf	status,0,c
  1369  002368  3213               	rrcf	??_pwm_setdc1+1,f,c
  1370  00236A  3212               	rrcf	??_pwm_setdc1,f,c
  1371  00236C  5012               	movf	??_pwm_setdc1,w,c
  1372  00236E  6EBE               	movwf	4030,c	;volatile
  1373                           
  1374                           ;iut_pwm.c: 89: CCP1CONbits.DC1B = cycles_etat_haut;
  1375  002370  C010  F012         	movff	pwm_setdc1@cycles_etat_haut,??_pwm_setdc1
  1376  002374  3A12               	swapf	??_pwm_setdc1,f,c
  1377  002376  50BD               	movf	4029,w,c	;volatile
  1378  002378  1812               	xorwf	??_pwm_setdc1,w,c
  1379  00237A  0BCF               	andlw	-49
  1380  00237C  1812               	xorwf	??_pwm_setdc1,w,c
  1381  00237E  6EBD               	movwf	4029,c	;volatile
  1382  002380  0012               	return		;funcret
  1383  002382                     __end_of_pwm_setdc1:
  1384                           	opt stack 0
  1385                           tblptru	equ	0xFF8
  1386                           status	equ	0xFD8
  1387                           
  1388 ;; *************** function _pwm_init *****************
  1389 ;; Defined at:
  1390 ;;		line 51 in file "iut_pwm.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  period          1    wreg     unsigned char 
  1393 ;;  nb_canaux       1    0[COMRAM] unsigned char 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  period          1    1[COMRAM] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, status,0
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1405 ;;      Params:         1       0       0       0       0       0       0       0       0
  1406 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1408 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1409 ;;Total ram usage:        2 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; This function calls:
  1412 ;;		Nothing
  1413 ;; This function is called by:
  1414 ;;		_main
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418                           	psect	text3
  1419  002292                     __ptext3:
  1420                           	opt stack 0
  1421  002292                     _pwm_init:
  1422                           	opt stack 30
  1423                           
  1424                           ;incstack = 0
  1425                           ;pwm_init@period stored from wreg
  1426  002292  6E02               	movwf	pwm_init@period,c
  1427                           
  1428                           ;iut_pwm.c: 52: T2CON = 1;
  1429  002294  0E01               	movlw	1
  1430  002296  6ECA               	movwf	4042,c	;volatile
  1431                           
  1432                           ;iut_pwm.c: 53: if (nb_canaux >= 1) {
  1433  002298  5001               	movf	pwm_init@nb_canaux,w,c
  1434  00229A  B4D8               	btfsc	status,2,c
  1435  00229C  D004               	goto	l2911
  1436                           
  1437                           ;iut_pwm.c: 54: CCP1CON = 0b00001100;
  1438  00229E  0E0C               	movlw	12
  1439  0022A0  6EBD               	movwf	4029,c	;volatile
  1440                           
  1441                           ;iut_pwm.c: 55: TRISCbits.TRISC2 = 0;
  1442  0022A2  9494               	bcf	3988,2,c	;volatile
  1443                           
  1444                           ;iut_pwm.c: 56: } else {
  1445  0022A4  D002               	goto	l2913
  1446  0022A6                     l2911:
  1447                           
  1448                           ;iut_pwm.c: 57: CCP1CON = 0;
  1449  0022A6  0E00               	movlw	0
  1450  0022A8  6EBD               	movwf	4029,c	;volatile
  1451  0022AA                     l2913:
  1452                           
  1453                           ;iut_pwm.c: 58: }
  1454                           ;iut_pwm.c: 59: if (nb_canaux >= 2) {
  1455  0022AA  0E01               	movlw	1
  1456  0022AC  6401               	cpfsgt	pwm_init@nb_canaux,c
  1457  0022AE  D004               	goto	l2919
  1458                           
  1459                           ;iut_pwm.c: 60: CCP2CON = 0b00001100;
  1460  0022B0  0E0C               	movlw	12
  1461  0022B2  6EBA               	movwf	4026,c	;volatile
  1462                           
  1463                           ;iut_pwm.c: 61: TRISCbits.TRISC1 = 0;
  1464  0022B4  9294               	bcf	3988,1,c	;volatile
  1465                           
  1466                           ;iut_pwm.c: 62: } else {
  1467  0022B6  D002               	goto	l2921
  1468  0022B8                     l2919:
  1469                           
  1470                           ;iut_pwm.c: 63: CCP2CON = 0;
  1471  0022B8  0E00               	movlw	0
  1472  0022BA  6EBA               	movwf	4026,c	;volatile
  1473  0022BC                     l2921:
  1474                           
  1475                           ;iut_pwm.c: 64: }
  1476                           ;iut_pwm.c: 65: PR2 = period;
  1477  0022BC  C002  FFCB         	movff	pwm_init@period,4043	;volatile
  1478                           
  1479                           ;iut_pwm.c: 66: if (nb_canaux > 0) {
  1480  0022C0  5001               	movf	pwm_init@nb_canaux,w,c
  1481  0022C2  B4D8               	btfsc	status,2,c
  1482  0022C4  0012               	return	
  1483                           
  1484                           ;iut_pwm.c: 67: T2CONbits.TMR2ON = 1;
  1485  0022C6  84CA               	bsf	4042,2,c	;volatile
  1486  0022C8  0012               	return	
  1487  0022CA                     __end_of_pwm_init:
  1488                           	opt stack 0
  1489                           tblptru	equ	0xFF8
  1490                           status	equ	0xFD8
  1491                           
  1492 ;; *************** function _lcd_printf *****************
  1493 ;; Defined at:
  1494 ;;		line 220 in file "iut_lcd.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;  f               2   57[COMRAM] PTR const unsigned char 
  1497 ;;		 -> STR_10(3), STR_9(3), STR_8(7), STR_7(7), 
  1498 ;;		 -> STR_6(7), STR_5(7), STR_4(16), STR_3(7), 
  1499 ;;		 -> STR_2(7), STR_1(12), 
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;  x               3   54[BANK0 ] float 
  1502 ;;  k               2   41[BANK0 ] unsigned int 
  1503 ;;  w               1   46[BANK0 ] unsigned char 
  1504 ;;  i               1   45[BANK0 ] unsigned char 
  1505 ;;  have_sign       1   43[BANK0 ] unsigned char 
  1506 ;;  sign            1   40[BANK0 ] unsigned char 
  1507 ;;  buf            33    0[BANK0 ] unsigned char [33]
  1508 ;;  q               2   38[BANK0 ] PTR unsigned char 
  1509 ;;		 -> lcd_printf@buf(33), 
  1510 ;;  digit_cnt       1   47[BANK0 ] unsigned char 
  1511 ;;  prefix_cnt      1   44[BANK0 ] unsigned char 
  1512 ;;  sign_char       1   35[BANK0 ] unsigned char 
  1513 ;;  larg            4   48[BANK0 ] unsigned long 
  1514 ;;  n               2   59[BANK0 ] int 
  1515 ;;  romstring       2   36[BANK0 ] PTR far unsigned char 
  1516 ;;  ramstring       2   33[BANK0 ] PTR unsigned char 
  1517 ;;  width           1   65[BANK0 ] unsigned char 
  1518 ;;  precision       1   64[BANK0 ] unsigned char 
  1519 ;;  flags           1   63[BANK0 ] unsigned char 
  1520 ;;  cval            1   58[BANK0 ] unsigned char 
  1521 ;;  space_cnt       1   57[BANK0 ] unsigned char 
  1522 ;;  have_precisi    1   53[BANK0 ] unsigned char 
  1523 ;;  size            1   52[BANK0 ] unsigned char 
  1524 ;;  ap              2   61[BANK0 ] PTR void [1]
  1525 ;;		 -> ?_lcd_printf(1), 
  1526 ;;  c               1   66[BANK0 ] unsigned char 
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      void 
  1529 ;; Registers used:
  1530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1536 ;;      Params:        10       0       0       0       0       0       0       0       0
  1537 ;;      Locals:         0      67       0       0       0       0       0       0       0
  1538 ;;      Temps:          7       0       0       0       0       0       0       0       0
  1539 ;;      Totals:        17      67       0       0       0       0       0       0       0
  1540 ;;Total ram usage:       84 bytes
  1541 ;; Hardware stack levels used:    1
  1542 ;; Hardware stack levels required when called:    5
  1543 ;; This function calls:
  1544 ;;		___ftadd
  1545 ;;		___ftdiv
  1546 ;;		___ftge
  1547 ;;		___ftmul
  1548 ;;		___ftneg
  1549 ;;		___fttol
  1550 ;;		___lldiv
  1551 ;;		___llmod
  1552 ;;		___lwtoft
  1553 ;;		_lcd_putc
  1554 ;;		_lcd_repete_n
  1555 ;;		_lcd_write_data_busy
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;;		_lcd_puti
  1559 ;;		_lcd_putrs
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text4
  1564  000844                     __ptext4:
  1565                           	opt stack 0
  1566  000844                     _lcd_printf:
  1567                           	opt stack 25
  1568                           
  1569                           ;iut_lcd.c: 221: va_list ap;
  1570                           ;iut_lcd.c: 222: unsigned char c;
  1571                           ;iut_lcd.c: 225: *ap = __va_start();
  1572                           
  1573                           ;incstack = 0
  1574  000844  0E3C               	movlw	low (?_lcd_printf+2)
  1575  000846  0100               	movlb	0	; () banked
  1576  000848  6F9D               	movwf	lcd_printf@ap& (0+255),b
  1577  00084A  0E00               	movlw	high (?_lcd_printf+2)
  1578  00084C  0100               	movlb	0	; () banked
  1579  00084E  6F9E               	movwf	(lcd_printf@ap+1)& (0+255),b
  1580  000850  EFCE  F00A         	goto	L1
  1581  000854                     l2951:
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;iut_lcd.c: 227: if (c == '%') {
  1585  000854  0E25               	movlw	37
  1586  000856  0100               	movlb	0	; () banked
  1587  000858  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1588  00085A  A4D8               	btfss	status,2,c
  1589  00085C  EFC8  F00A         	goto	l3497
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;iut_lcd.c: 228: unsigned char flags = 0;
  1593  000860  0E00               	movlw	0
  1594  000862  0100               	movlb	0	; () banked
  1595  000864  6F9F               	movwf	lcd_printf@flags& (0+255),b
  1596                           
  1597                           ;iut_lcd.c: 229: unsigned char width = 0;
  1598  000866  0E00               	movlw	0
  1599  000868  0100               	movlb	0	; () banked
  1600  00086A  6FA1               	movwf	lcd_printf@width& (0+255),b
  1601                           
  1602                           ;iut_lcd.c: 230: unsigned char precision = 0;
  1603  00086C  0E00               	movlw	0
  1604  00086E  0100               	movlb	0	; () banked
  1605  000870  6FA0               	movwf	lcd_printf@precision& (0+255),b
  1606                           
  1607                           ;iut_lcd.c: 231: unsigned char have_precision = 0;
  1608  000872  0E00               	movlw	0
  1609  000874  0100               	movlb	0	; () banked
  1610  000876  6F95               	movwf	lcd_printf@have_precision& (0+255),b
  1611                           
  1612                           ;iut_lcd.c: 232: unsigned char size = 0;
  1613  000878  0E00               	movlw	0
  1614  00087A  0100               	movlb	0	; () banked
  1615  00087C  6F94               	movwf	lcd_printf@size& (0+255),b
  1616  00087E  D020               	goto	l2971
  1617  000880                     l2957:
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;iut_lcd.c: 278: flags |= 0x1;
  1621  000880  0100               	movlb	0	; () banked
  1622  000882  819F               	bsf	lcd_printf@flags& (0+255),0,b
  1623                           
  1624                           ;iut_lcd.c: 279: break;
  1625  000884  D01D               	goto	l2971
  1626  000886                     l2959:
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;iut_lcd.c: 281: flags |= 0x2;
  1630  000886  0100               	movlb	0	; () banked
  1631  000888  839F               	bsf	lcd_printf@flags& (0+255),1,b
  1632                           
  1633                           ;iut_lcd.c: 282: break;
  1634  00088A  D01A               	goto	l2971
  1635  00088C                     l2961:
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;iut_lcd.c: 284: flags |= 0x4;
  1639  00088C  0100               	movlb	0	; () banked
  1640  00088E  859F               	bsf	lcd_printf@flags& (0+255),2,b
  1641                           
  1642                           ;iut_lcd.c: 285: break;
  1643  000890  D017               	goto	l2971
  1644  000892                     l2963:
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;iut_lcd.c: 287: flags |= 0x8;
  1648  000892  0100               	movlb	0	; () banked
  1649  000894  879F               	bsf	lcd_printf@flags& (0+255),3,b
  1650                           
  1651                           ;iut_lcd.c: 288: break;
  1652  000896  D014               	goto	l2971
  1653  000898                     l2965:
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;iut_lcd.c: 290: flags |= 0x10;
  1657  000898  0100               	movlb	0	; () banked
  1658  00089A  899F               	bsf	lcd_printf@flags& (0+255),4,b
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;iut_lcd.c: 292: }
  1662                           
  1663                           ;iut_lcd.c: 291: break;
  1664  00089C  D011               	goto	l2971
  1665  00089E                     l2969:
  1666                           
  1667                           ; BSR set to: 0
  1668  00089E  0100               	movlb	0	; () banked
  1669  0008A0  51A2               	movf	lcd_printf@c& (0+255),w,b
  1670                           
  1671                           ; Switch size 1, requested type "space"
  1672                           ; Number of cases is 5, Range of values is 32 to 48
  1673                           ; switch strategies available:
  1674                           ; Name         Instructions Cycles
  1675                           ; simple_byte           16     9 (average)
  1676                           ;	Chosen strategy is simple_byte
  1677  0008A2  0A20               	xorlw	32	; case 32
  1678  0008A4  B4D8               	btfsc	status,2,c
  1679  0008A6  D7F2               	goto	l2961
  1680  0008A8  0A03               	xorlw	3	; case 35
  1681  0008AA  B4D8               	btfsc	status,2,c
  1682  0008AC  D7F2               	goto	l2963
  1683  0008AE  0A08               	xorlw	8	; case 43
  1684  0008B0  B4D8               	btfsc	status,2,c
  1685  0008B2  D7E9               	goto	l2959
  1686  0008B4  0A06               	xorlw	6	; case 45
  1687  0008B6  B4D8               	btfsc	status,2,c
  1688  0008B8  D7E3               	goto	l2957
  1689  0008BA  0A1D               	xorlw	29	; case 48
  1690  0008BC  B4D8               	btfsc	status,2,c
  1691  0008BE  D7EC               	goto	l2965
  1692  0008C0                     l2971:
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;iut_lcd.c: 293: c = *++f;
  1696  0008C0  4A3A               	infsnz	lcd_printf@f,f,c
  1697  0008C2  2A3B               	incf	lcd_printf@f+1,f,c
  1698  0008C4  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1699  0008C8  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1700  0008CC                     	if	0	;tblptru may be non-zero
  1701  0008CC                     	endif
  1702  0008CC                     	if	0	;tblptru may be non-zero
  1703  0008CC                     	endif
  1704  0008CC  0008               	tblrd		*
  1705  0008CE  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1706                           
  1707                           ; BSR set to: 0
  1708                           
  1709                           ; BSR set to: 0
  1710  0008D2  0E2D               	movlw	45
  1711  0008D4  0100               	movlb	0	; () banked
  1712  0008D6  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1713  0008D8  B4D8               	btfsc	status,2,c
  1714  0008DA  D7E1               	goto	l2969
  1715                           
  1716                           ; BSR set to: 0
  1717  0008DC  0E2B               	movlw	43
  1718  0008DE  0100               	movlb	0	; () banked
  1719  0008E0  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1720  0008E2  B4D8               	btfsc	status,2,c
  1721  0008E4  D7DC               	goto	l2969
  1722                           
  1723                           ; BSR set to: 0
  1724  0008E6  0E20               	movlw	32
  1725  0008E8  0100               	movlb	0	; () banked
  1726  0008EA  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1727  0008EC  B4D8               	btfsc	status,2,c
  1728  0008EE  D7D7               	goto	l2969
  1729                           
  1730                           ; BSR set to: 0
  1731  0008F0  0E23               	movlw	35
  1732  0008F2  0100               	movlb	0	; () banked
  1733  0008F4  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1734  0008F6  B4D8               	btfsc	status,2,c
  1735  0008F8  D7D2               	goto	l2969
  1736                           
  1737                           ; BSR set to: 0
  1738  0008FA  0E30               	movlw	48
  1739  0008FC  0100               	movlb	0	; () banked
  1740  0008FE  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1741  000900  B4D8               	btfsc	status,2,c
  1742  000902  D7CD               	goto	l2969
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;iut_lcd.c: 294: }
  1746                           ;iut_lcd.c: 296: if (c == '*') {
  1747                           
  1748                           ; BSR set to: 0
  1749  000904  0E2A               	movlw	42
  1750  000906  0100               	movlb	0	; () banked
  1751  000908  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1752  00090A  A4D8               	btfss	status,2,c
  1753  00090C  D024               	goto	l2997
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;iut_lcd.c: 297: n = (*(int *)__va_arg((*(int **)ap), (int)0));
  1757  00090E  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  1758  000912  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  1759  000916  CFDE F09B          	movff	postinc2,lcd_printf@n
  1760  00091A  CFDD F09C          	movff	postdec2,lcd_printf@n+1
  1761                           
  1762                           ; BSR set to: 0
  1763  00091E  0E02               	movlw	2
  1764  000920  0100               	movlb	0	; () banked
  1765  000922  279D               	addwf	lcd_printf@ap& (0+255),f,b
  1766  000924  0E00               	movlw	0
  1767  000926  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;iut_lcd.c: 298: if (n < 0) {
  1771  000928  0100               	movlb	0	; () banked
  1772  00092A  AF9C               	btfss	(lcd_printf@n+1)& (0+255),7,b
  1773  00092C  D008               	goto	l145
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;iut_lcd.c: 299: flags |= 0x1;
  1777  00092E  0100               	movlb	0	; () banked
  1778  000930  819F               	bsf	lcd_printf@flags& (0+255),0,b
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;iut_lcd.c: 300: width = -n;
  1782  000932  0100               	movlb	0	; () banked
  1783  000934  519B               	movf	lcd_printf@n& (0+255),w,b
  1784  000936  0800               	sublw	0
  1785  000938  0100               	movlb	0	; () banked
  1786  00093A  6FA1               	movwf	lcd_printf@width& (0+255),b
  1787                           
  1788                           ;iut_lcd.c: 301: } else
  1789  00093C  D002               	goto	l2995
  1790  00093E                     l145:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;iut_lcd.c: 302: width = n;
  1794  00093E  C09B  F0A1         	movff	lcd_printf@n,lcd_printf@width
  1795  000942                     l2995:
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;iut_lcd.c: 303: c = *++f;
  1799  000942  4A3A               	infsnz	lcd_printf@f,f,c
  1800  000944  2A3B               	incf	lcd_printf@f+1,f,c
  1801  000946  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1802  00094A  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1803  00094E                     	if	0	;tblptru may be non-zero
  1804  00094E                     	endif
  1805  00094E                     	if	0	;tblptru may be non-zero
  1806  00094E                     	endif
  1807  00094E  0008               	tblrd		*
  1808  000950  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1809                           
  1810                           ;iut_lcd.c: 304: } else {
  1811  000954  D020               	goto	l147
  1812  000956                     l2997:
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;iut_lcd.c: 305: cval = 0;
  1816  000956  0E00               	movlw	0
  1817  000958  0100               	movlb	0	; () banked
  1818  00095A  6F9A               	movwf	lcd_printf@cval& (0+255),b
  1819                           
  1820                           ;iut_lcd.c: 306: while ((c >= '0') && (c <= '9')) {
  1821  00095C  D012               	goto	l3003
  1822  00095E                     l2999:
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;iut_lcd.c: 307: cval = cval * 10 + c - '0';
  1826  00095E  0100               	movlb	0	; () banked
  1827  000960  519A               	movf	lcd_printf@cval& (0+255),w,b
  1828  000962  0D0A               	mullw	10
  1829  000964  50F3               	movf	prodl,w,c
  1830  000966  0100               	movlb	0	; () banked
  1831  000968  25A2               	addwf	lcd_printf@c& (0+255),w,b
  1832  00096A  0FD0               	addlw	208
  1833  00096C  0100               	movlb	0	; () banked
  1834  00096E  6F9A               	movwf	lcd_printf@cval& (0+255),b
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;iut_lcd.c: 308: c = *++f;
  1838  000970  4A3A               	infsnz	lcd_printf@f,f,c
  1839  000972  2A3B               	incf	lcd_printf@f+1,f,c
  1840  000974  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1841  000978  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1842  00097C                     	if	0	;tblptru may be non-zero
  1843  00097C                     	endif
  1844  00097C                     	if	0	;tblptru may be non-zero
  1845  00097C                     	endif
  1846  00097C  0008               	tblrd		*
  1847  00097E  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1848  000982                     l3003:
  1849                           
  1850                           ; BSR set to: 0
  1851  000982  0E2F               	movlw	47
  1852  000984  0100               	movlb	0	; () banked
  1853  000986  65A2               	cpfsgt	lcd_printf@c& (0+255),b
  1854  000988  D004               	goto	l152
  1855                           
  1856                           ; BSR set to: 0
  1857  00098A  0E39               	movlw	57
  1858  00098C  0100               	movlb	0	; () banked
  1859  00098E  65A2               	cpfsgt	lcd_printf@c& (0+255),b
  1860  000990  D7E6               	goto	l2999
  1861  000992                     l152:
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;iut_lcd.c: 309: }
  1865                           ;iut_lcd.c: 310: width = cval;
  1866  000992  C09A  F0A1         	movff	lcd_printf@cval,lcd_printf@width
  1867  000996                     l147:
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;iut_lcd.c: 311: }
  1871                           ;iut_lcd.c: 314: if (flags & 0x1)
  1872  000996  0100               	movlb	0	; () banked
  1873  000998  A19F               	btfss	lcd_printf@flags& (0+255),0,b
  1874  00099A  D002               	goto	l3009
  1875                           
  1876                           ; BSR set to: 0
  1877                           ;iut_lcd.c: 315: flags &= ~0x10;
  1878  00099C  0100               	movlb	0	; () banked
  1879  00099E  999F               	bcf	lcd_printf@flags& (0+255),4,b
  1880  0009A0                     l3009:
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;iut_lcd.c: 318: if (c == '.') {
  1884  0009A0  0E2E               	movlw	46
  1885  0009A2  0100               	movlb	0	; () banked
  1886  0009A4  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1887  0009A6  A4D8               	btfss	status,2,c
  1888  0009A8  D050               	goto	l3039
  1889                           
  1890                           ; BSR set to: 0
  1891                           ;iut_lcd.c: 319: c = *++f;
  1892  0009AA  4A3A               	infsnz	lcd_printf@f,f,c
  1893  0009AC  2A3B               	incf	lcd_printf@f+1,f,c
  1894  0009AE  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1895  0009B2  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1896  0009B6                     	if	0	;tblptru may be non-zero
  1897  0009B6                     	endif
  1898  0009B6                     	if	0	;tblptru may be non-zero
  1899  0009B6                     	endif
  1900  0009B6  0008               	tblrd		*
  1901  0009B8  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;iut_lcd.c: 320: if (c == '*') {
  1905  0009BC  0E2A               	movlw	42
  1906  0009BE  0100               	movlb	0	; () banked
  1907  0009C0  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1908  0009C2  A4D8               	btfss	status,2,c
  1909  0009C4  D01F               	goto	l3027
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;iut_lcd.c: 321: n = (*(int *)__va_arg((*(int **)ap), (int)0));
  1913  0009C6  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  1914  0009CA  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  1915  0009CE  CFDE F09B          	movff	postinc2,lcd_printf@n
  1916  0009D2  CFDD F09C          	movff	postdec2,lcd_printf@n+1
  1917                           
  1918                           ; BSR set to: 0
  1919  0009D6  0E02               	movlw	2
  1920  0009D8  0100               	movlb	0	; () banked
  1921  0009DA  279D               	addwf	lcd_printf@ap& (0+255),f,b
  1922  0009DC  0E00               	movlw	0
  1923  0009DE  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;iut_lcd.c: 322: if (n >= 0) {
  1927  0009E0  0100               	movlb	0	; () banked
  1928  0009E2  BF9C               	btfsc	(lcd_printf@n+1)& (0+255),7,b
  1929  0009E4  D005               	goto	l3025
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;iut_lcd.c: 323: precision = n;
  1933  0009E6  C09B  F0A0         	movff	lcd_printf@n,lcd_printf@precision
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;iut_lcd.c: 324: have_precision = 1;
  1937  0009EA  0E01               	movlw	1
  1938  0009EC  0100               	movlb	0	; () banked
  1939  0009EE  6F95               	movwf	lcd_printf@have_precision& (0+255),b
  1940  0009F0                     l3025:
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;iut_lcd.c: 325: }
  1944                           ;iut_lcd.c: 326: c = *++f;
  1945  0009F0  4A3A               	infsnz	lcd_printf@f,f,c
  1946  0009F2  2A3B               	incf	lcd_printf@f+1,f,c
  1947  0009F4  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1948  0009F8  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1949  0009FC                     	if	0	;tblptru may be non-zero
  1950  0009FC                     	endif
  1951  0009FC                     	if	0	;tblptru may be non-zero
  1952  0009FC                     	endif
  1953  0009FC  0008               	tblrd		*
  1954  0009FE  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1955                           
  1956                           ;iut_lcd.c: 327: } else {
  1957  000A02  D023               	goto	l3039
  1958  000A04                     l3027:
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;iut_lcd.c: 328: cval = 0;
  1962  000A04  0E00               	movlw	0
  1963  000A06  0100               	movlb	0	; () banked
  1964  000A08  6F9A               	movwf	lcd_printf@cval& (0+255),b
  1965                           
  1966                           ;iut_lcd.c: 329: while ((c >= '0') && (c <= '9')) {
  1967  000A0A  D012               	goto	l3033
  1968  000A0C                     l3029:
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;iut_lcd.c: 330: cval = cval * 10 + c - '0';
  1972  000A0C  0100               	movlb	0	; () banked
  1973  000A0E  519A               	movf	lcd_printf@cval& (0+255),w,b
  1974  000A10  0D0A               	mullw	10
  1975  000A12  50F3               	movf	prodl,w,c
  1976  000A14  0100               	movlb	0	; () banked
  1977  000A16  25A2               	addwf	lcd_printf@c& (0+255),w,b
  1978  000A18  0FD0               	addlw	208
  1979  000A1A  0100               	movlb	0	; () banked
  1980  000A1C  6F9A               	movwf	lcd_printf@cval& (0+255),b
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;iut_lcd.c: 331: c = *++f;
  1984  000A1E  4A3A               	infsnz	lcd_printf@f,f,c
  1985  000A20  2A3B               	incf	lcd_printf@f+1,f,c
  1986  000A22  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1987  000A26  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1988  000A2A                     	if	0	;tblptru may be non-zero
  1989  000A2A                     	endif
  1990  000A2A                     	if	0	;tblptru may be non-zero
  1991  000A2A                     	endif
  1992  000A2A  0008               	tblrd		*
  1993  000A2C  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1994  000A30                     l3033:
  1995                           
  1996                           ; BSR set to: 0
  1997  000A30  0E2F               	movlw	47
  1998  000A32  0100               	movlb	0	; () banked
  1999  000A34  65A2               	cpfsgt	lcd_printf@c& (0+255),b
  2000  000A36  D004               	goto	l162
  2001                           
  2002                           ; BSR set to: 0
  2003  000A38  0E39               	movlw	57
  2004  000A3A  0100               	movlb	0	; () banked
  2005  000A3C  65A2               	cpfsgt	lcd_printf@c& (0+255),b
  2006  000A3E  D7E6               	goto	l3029
  2007  000A40                     l162:
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;iut_lcd.c: 332: }
  2011                           ;iut_lcd.c: 333: precision = cval;
  2012  000A40  C09A  F0A0         	movff	lcd_printf@cval,lcd_printf@precision
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;iut_lcd.c: 334: have_precision = 1;
  2016  000A44  0E01               	movlw	1
  2017  000A46  0100               	movlb	0	; () banked
  2018  000A48  6F95               	movwf	lcd_printf@have_precision& (0+255),b
  2019  000A4A                     l3039:
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;iut_lcd.c: 335: }
  2023                           ;iut_lcd.c: 336: }
  2024                           ;iut_lcd.c: 340: if (c == 'h') {
  2025  000A4A  0E68               	movlw	104
  2026  000A4C  0100               	movlb	0	; () banked
  2027  000A4E  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2028  000A50  A4D8               	btfss	status,2,c
  2029  000A52  D011               	goto	l3049
  2030                           
  2031                           ; BSR set to: 0
  2032                           ;iut_lcd.c: 341: c = *++f;
  2033  000A54  4A3A               	infsnz	lcd_printf@f,f,c
  2034  000A56  2A3B               	incf	lcd_printf@f+1,f,c
  2035  000A58  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  2036  000A5C  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  2037  000A60                     	if	0	;tblptru may be non-zero
  2038  000A60                     	endif
  2039  000A60                     	if	0	;tblptru may be non-zero
  2040  000A60                     	endif
  2041  000A60  0008               	tblrd		*
  2042  000A62  CFF5 F0A2          	movff	tablat,lcd_printf@c
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;iut_lcd.c: 344: if (c == 'h') {
  2046  000A66  0E68               	movlw	104
  2047  000A68  0100               	movlb	0	; () banked
  2048  000A6A  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2049  000A6C  A4D8               	btfss	status,2,c
  2050  000A6E  EF8C  F00A         	goto	l3495
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;iut_lcd.c: 345: size = 3;
  2054  000A72  0E03               	movlw	3
  2055  000A74  D032               	goto	L2
  2056  000A76                     l3049:
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;iut_lcd.c: 350: else if (c == 't' || c == 'z')
  2060  000A76  0E74               	movlw	116
  2061  000A78  0100               	movlb	0	; () banked
  2062  000A7A  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2063  000A7C  B4D8               	btfsc	status,2,c
  2064  000A7E  D016               	goto	l3063
  2065                           
  2066                           ; BSR set to: 0
  2067  000A80  0E7A               	movlw	122
  2068  000A82  0100               	movlb	0	; () banked
  2069  000A84  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2070  000A86  B4D8               	btfsc	status,2,c
  2071  000A88  D011               	goto	l3063
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;iut_lcd.c: 354: else if (c == 'H' || c == 'T' || c == 'Z') {
  2075                           
  2076                           ; BSR set to: 0
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;iut_lcd.c: 351: c = *++f;
  2080                           
  2081                           ; BSR set to: 0
  2082  000A8A  0E48               	movlw	72
  2083  000A8C  0100               	movlb	0	; () banked
  2084  000A8E  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2085  000A90  B4D8               	btfsc	status,2,c
  2086  000A92  D00A               	goto	l3061
  2087                           
  2088                           ; BSR set to: 0
  2089  000A94  0E54               	movlw	84
  2090  000A96  0100               	movlb	0	; () banked
  2091  000A98  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2092  000A9A  B4D8               	btfsc	status,2,c
  2093  000A9C  D005               	goto	l3061
  2094                           
  2095                           ; BSR set to: 0
  2096  000A9E  0E5A               	movlw	90
  2097  000AA0  0100               	movlb	0	; () banked
  2098  000AA2  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2099  000AA4  A4D8               	btfss	status,2,c
  2100  000AA6  D00D               	goto	l3065
  2101  000AA8                     l3061:
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;iut_lcd.c: 355: size = 2;
  2105  000AA8  0E02               	movlw	2
  2106  000AAA  D017               	goto	L2
  2107  000AAC                     l3063:
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;iut_lcd.c: 356: c = *++f;
  2111  000AAC  4A3A               	infsnz	lcd_printf@f,f,c
  2112  000AAE  2A3B               	incf	lcd_printf@f+1,f,c
  2113  000AB0  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  2114  000AB4  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  2115  000AB8                     	if	0	;tblptru may be non-zero
  2116  000AB8                     	endif
  2117  000AB8                     	if	0	;tblptru may be non-zero
  2118  000AB8                     	endif
  2119  000AB8  0008               	tblrd		*
  2120  000ABA  CFF5 F0A2          	movff	tablat,lcd_printf@c
  2121                           
  2122                           ;iut_lcd.c: 357: }
  2123  000ABE  EF8C  F00A         	goto	l3495
  2124  000AC2                     l3065:
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;iut_lcd.c: 360: else if (c == 'l' || c == 'j') {
  2128  000AC2  0E6C               	movlw	108
  2129  000AC4  0100               	movlb	0	; () banked
  2130  000AC6  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2131  000AC8  B4D8               	btfsc	status,2,c
  2132  000ACA  D006               	goto	l3069
  2133                           
  2134                           ; BSR set to: 0
  2135  000ACC  0E6A               	movlw	106
  2136  000ACE  0100               	movlb	0	; () banked
  2137  000AD0  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2138  000AD2  A4D8               	btfss	status,2,c
  2139  000AD4  EF8C  F00A         	goto	l3495
  2140  000AD8                     l3069:
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;iut_lcd.c: 361: size = 1;
  2144  000AD8  0E01               	movlw	1
  2145  000ADA                     L2:
  2146  000ADA  0100               	movlb	0	; () banked
  2147  000ADC  6F94               	movwf	lcd_printf@size& (0+255),b
  2148  000ADE  D7E6               	goto	l3063
  2149  000AE0                     l3073:
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;iut_lcd.c: 373: --f;
  2153  000AE0  063A               	decf	lcd_printf@f,f,c
  2154  000AE2  A0D8               	btfss	status,0,c
  2155  000AE4  063B               	decf	lcd_printf@f+1,f,c
  2156  000AE6                     l3075:
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;iut_lcd.c: 376: lcd_write_data_busy('%');
  2160  000AE6  0E25               	movlw	37
  2161  000AE8  EC19  F012         	call	_lcd_write_data_busy
  2162                           
  2163                           ;iut_lcd.c: 378: break;
  2164  000AEC  EFCC  F00A         	goto	l3499
  2165  000AF0                     l3077:
  2166                           
  2167                           ;iut_lcd.c: 380: space_cnt = 0;
  2168  000AF0  0E00               	movlw	0
  2169  000AF2  0100               	movlb	0	; () banked
  2170  000AF4  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;iut_lcd.c: 381: if (width > 1) {
  2174  000AF6  0E01               	movlw	1
  2175  000AF8  0100               	movlb	0	; () banked
  2176  000AFA  65A1               	cpfsgt	lcd_printf@width& (0+255),b
  2177  000AFC  D004               	goto	l3083
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;iut_lcd.c: 382: space_cnt = width - 1;
  2181  000AFE  0100               	movlb	0	; () banked
  2182  000B00  05A1               	decf	lcd_printf@width& (0+255),w,b
  2183  000B02  0100               	movlb	0	; () banked
  2184  000B04  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2185  000B06                     l3083:
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;iut_lcd.c: 384: }
  2189                           ;iut_lcd.c: 385: if (space_cnt && !(flags & 0x1)) {
  2190  000B06  0100               	movlb	0	; () banked
  2191  000B08  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2192  000B0A  0100               	movlb	0	; () banked
  2193  000B0C  B4D8               	btfsc	status,2,c
  2194  000B0E  D00C               	goto	l3091
  2195                           
  2196                           ; BSR set to: 0
  2197  000B10  0100               	movlb	0	; () banked
  2198  000B12  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  2199  000B14  D009               	goto	l3091
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;iut_lcd.c: 386: lcd_repete_n(space_cnt, ' ');
  2203  000B16  0E20               	movlw	32
  2204  000B18  6E03               	movwf	lcd_repete_n@c,c
  2205  000B1A  0100               	movlb	0	; () banked
  2206  000B1C  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2207  000B1E  EC2F  F012         	call	_lcd_repete_n
  2208                           
  2209                           ;iut_lcd.c: 387: space_cnt = 0;
  2210  000B22  0E00               	movlw	0
  2211  000B24  0100               	movlb	0	; () banked
  2212  000B26  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2213  000B28                     l3091:
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;iut_lcd.c: 388: }
  2217                           ;iut_lcd.c: 389: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2218  000B28  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2219  000B2C  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2220  000B30  50DF               	movf	indf2,w,c
  2221  000B32  0100               	movlb	0	; () banked
  2222  000B34  6FA2               	movwf	lcd_printf@c& (0+255),b
  2223                           
  2224                           ; BSR set to: 0
  2225  000B36  0E02               	movlw	2
  2226  000B38  0100               	movlb	0	; () banked
  2227  000B3A  279D               	addwf	lcd_printf@ap& (0+255),f,b
  2228  000B3C  0E00               	movlw	0
  2229  000B3E  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;iut_lcd.c: 390: lcd_putc(c);
  2233  000B40  0100               	movlb	0	; () banked
  2234  000B42  51A2               	movf	lcd_printf@c& (0+255),w,b
  2235  000B44  EC06  F011         	call	_lcd_putc
  2236                           
  2237                           ;iut_lcd.c: 392: lcd_repete_n(space_cnt, ' ');
  2238  000B48  0E20               	movlw	32
  2239  000B4A  6E03               	movwf	lcd_repete_n@c,c
  2240  000B4C  0100               	movlb	0	; () banked
  2241  000B4E  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2242  000B50  EC2F  F012         	call	_lcd_repete_n
  2243                           
  2244                           ;iut_lcd.c: 393: break;
  2245  000B54  EFCC  F00A         	goto	l3499
  2246  000B58                     l3099:
  2247                           
  2248                           ;iut_lcd.c: 395: if (size == 2)
  2249  000B58  0E02               	movlw	2
  2250  000B5A  0100               	movlb	0	; () banked
  2251  000B5C  1994               	xorwf	lcd_printf@size& (0+255),w,b
  2252  000B5E  A4D8               	btfss	status,2,c
  2253  000B60  D007               	goto	l3105
  2254  000B62  D006               	goto	l3105
  2255  000B64                     l3103:
  2256                           
  2257                           ; BSR set to: 0
  2258  000B64  0E02               	movlw	2
  2259  000B66  0100               	movlb	0	; () banked
  2260  000B68  279D               	addwf	lcd_printf@ap& (0+255),f,b
  2261  000B6A  0E00               	movlw	0
  2262  000B6C  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  2263  000B6E  D009               	goto	l3109
  2264  000B70                     l3105:
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;iut_lcd.c: 397: else
  2268                           ;iut_lcd.c: 398: romstring = (far char*) (*(near char * *)__va_arg((*(near char * **)ap)
      +                          , (near char *)0));
  2269  000B70  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2270  000B74  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2271  000B78  CFDE F084          	movff	postinc2,lcd_printf@romstring
  2272  000B7C  CFDD F085          	movff	postdec2,lcd_printf@romstring+1
  2273  000B80  D7F1               	goto	l3103
  2274  000B82                     l3109:
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;iut_lcd.c: 399: for (n = 0; romstring[n] != 0; n++);
  2278  000B82  0E00               	movlw	0
  2279  000B84  0100               	movlb	0	; () banked
  2280  000B86  6F9C               	movwf	(lcd_printf@n+1)& (0+255),b
  2281  000B88  0E00               	movlw	0
  2282  000B8A  6F9B               	movwf	lcd_printf@n& (0+255),b
  2283  000B8C  D003               	goto	l3113
  2284  000B8E                     l3111:
  2285                           
  2286                           ; BSR set to: 0
  2287  000B8E  0100               	movlb	0	; () banked
  2288  000B90  4B9B               	infsnz	lcd_printf@n& (0+255),f,b
  2289  000B92  2B9C               	incf	(lcd_printf@n+1)& (0+255),f,b
  2290  000B94                     l3113:
  2291                           
  2292                           ; BSR set to: 0
  2293  000B94  0100               	movlb	0	; () banked
  2294  000B96  519B               	movf	lcd_printf@n& (0+255),w,b
  2295  000B98  0100               	movlb	0	; () banked
  2296  000B9A  2584               	addwf	lcd_printf@romstring& (0+255),w,b
  2297  000B9C  6ED9               	movwf	fsr2l,c
  2298  000B9E  0100               	movlb	0	; () banked
  2299  000BA0  519C               	movf	(lcd_printf@n+1)& (0+255),w,b
  2300  000BA2  0100               	movlb	0	; () banked
  2301  000BA4  2185               	addwfc	(lcd_printf@romstring+1)& (0+255),w,b
  2302  000BA6  6EDA               	movwf	fsr2h,c
  2303  000BA8  50DF               	movf	indf2,w,c
  2304  000BAA  A4D8               	btfss	status,2,c
  2305  000BAC  D7F0               	goto	l3111
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;iut_lcd.c: 402: if (have_precision && precision < (unsigned char) n)
  2309                           
  2310                           ; BSR set to: 0
  2311  000BAE  0100               	movlb	0	; () banked
  2312  000BB0  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2313  000BB2  0100               	movlb	0	; () banked
  2314  000BB4  B4D8               	btfsc	status,2,c
  2315  000BB6  D00A               	goto	l3121
  2316                           
  2317                           ; BSR set to: 0
  2318  000BB8  0100               	movlb	0	; () banked
  2319  000BBA  519B               	movf	lcd_printf@n& (0+255),w,b
  2320  000BBC  0100               	movlb	0	; () banked
  2321  000BBE  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  2322  000BC0  B0D8               	btfsc	status,0,c
  2323  000BC2  D004               	goto	l3121
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;iut_lcd.c: 403: n = precision;
  2327  000BC4  C0A0  F09B         	movff	lcd_printf@precision,lcd_printf@n
  2328  000BC8  0100               	movlb	0	; () banked
  2329  000BCA  6B9C               	clrf	(lcd_printf@n+1)& (0+255),b
  2330  000BCC                     l3121:
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;iut_lcd.c: 404: if (width < (unsigned char) n)
  2334  000BCC  0100               	movlb	0	; () banked
  2335  000BCE  519B               	movf	lcd_printf@n& (0+255),w,b
  2336  000BD0  0100               	movlb	0	; () banked
  2337  000BD2  5DA1               	subwf	lcd_printf@width& (0+255),w,b
  2338  000BD4  A0D8               	btfss	status,0,c
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;iut_lcd.c: 405: width = n;
  2342  000BD6  C09B  F0A1         	movff	lcd_printf@n,lcd_printf@width
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;iut_lcd.c: 406: space_cnt = width - (unsigned char) n;
  2346                           
  2347                           ; BSR set to: 0
  2348  000BDA  0100               	movlb	0	; () banked
  2349  000BDC  519B               	movf	lcd_printf@n& (0+255),w,b
  2350  000BDE  0800               	sublw	0
  2351  000BE0  0100               	movlb	0	; () banked
  2352  000BE2  25A1               	addwf	lcd_printf@width& (0+255),w,b
  2353  000BE4  0100               	movlb	0	; () banked
  2354  000BE6  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;iut_lcd.c: 413: if (have_precision && precision < width)
  2358  000BE8  0100               	movlb	0	; () banked
  2359  000BEA  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2360  000BEC  0100               	movlb	0	; () banked
  2361  000BEE  B4D8               	btfsc	status,2,c
  2362  000BF0  D007               	goto	l192
  2363                           
  2364                           ; BSR set to: 0
  2365  000BF2  0100               	movlb	0	; () banked
  2366  000BF4  51A1               	movf	lcd_printf@width& (0+255),w,b
  2367  000BF6  0100               	movlb	0	; () banked
  2368  000BF8  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  2369  000BFA  A0D8               	btfss	status,0,c
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;iut_lcd.c: 414: width = precision;
  2373  000BFC  C0A0  F0A1         	movff	lcd_printf@precision,lcd_printf@width
  2374  000C00                     l192:
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;iut_lcd.c: 417: if (!(flags & 0x1)) {
  2378  000C00  0100               	movlb	0	; () banked
  2379  000C02  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  2380  000C04  D009               	goto	l3137
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;iut_lcd.c: 418: lcd_repete_n(space_cnt, ' ');
  2384  000C06  0E20               	movlw	32
  2385  000C08  6E03               	movwf	lcd_repete_n@c,c
  2386  000C0A  0100               	movlb	0	; () banked
  2387  000C0C  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2388  000C0E  EC2F  F012         	call	_lcd_repete_n
  2389                           
  2390                           ;iut_lcd.c: 419: space_cnt = 0;
  2391  000C12  0E00               	movlw	0
  2392  000C14  0100               	movlb	0	; () banked
  2393  000C16  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2394  000C18                     l3137:
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;iut_lcd.c: 420: }
  2398                           ;iut_lcd.c: 421: cval = 0;
  2399  000C18  0E00               	movlw	0
  2400  000C1A  0100               	movlb	0	; () banked
  2401  000C1C  6F9A               	movwf	lcd_printf@cval& (0+255),b
  2402  000C1E  D009               	goto	L3
  2403  000C20                     l3141:
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;iut_lcd.c: 423: lcd_putc(c);
  2407  000C20  0100               	movlb	0	; () banked
  2408  000C22  51A2               	movf	lcd_printf@c& (0+255),w,b
  2409  000C24  EC06  F011         	call	_lcd_putc
  2410                           
  2411                           ;iut_lcd.c: 425: ++cval;
  2412  000C28  0100               	movlb	0	; () banked
  2413  000C2A  2B9A               	incf	lcd_printf@cval& (0+255),f,b
  2414                           
  2415                           ; BSR set to: 0
  2416  000C2C  0100               	movlb	0	; () banked
  2417  000C2E  4B84               	infsnz	lcd_printf@romstring& (0+255),f,b
  2418  000C30  2B85               	incf	(lcd_printf@romstring+1)& (0+255),f,b
  2419  000C32                     L3:
  2420  000C32  C084  FFD9         	movff	lcd_printf@romstring,fsr2l
  2421  000C36  C085  FFDA         	movff	lcd_printf@romstring+1,fsr2h
  2422  000C3A  50DF               	movf	indf2,w,c
  2423  000C3C  0100               	movlb	0	; () banked
  2424  000C3E  6FA2               	movwf	lcd_printf@c& (0+255),b
  2425                           
  2426                           ; BSR set to: 0
  2427                           
  2428                           ; BSR set to: 0
  2429  000C40  0100               	movlb	0	; () banked
  2430  000C42  51A2               	movf	lcd_printf@c& (0+255),w,b
  2431  000C44  0100               	movlb	0	; () banked
  2432  000C46  B4D8               	btfsc	status,2,c
  2433  000C48  D006               	goto	l3151
  2434                           
  2435                           ; BSR set to: 0
  2436  000C4A  0100               	movlb	0	; () banked
  2437  000C4C  51A1               	movf	lcd_printf@width& (0+255),w,b
  2438  000C4E  0100               	movlb	0	; () banked
  2439  000C50  5D9A               	subwf	lcd_printf@cval& (0+255),w,b
  2440  000C52  A0D8               	btfss	status,0,c
  2441  000C54  D7E5               	goto	l3141
  2442  000C56                     l3151:
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;iut_lcd.c: 426: }
  2446                           ;iut_lcd.c: 430: lcd_repete_n(space_cnt, ' ');
  2447  000C56  0E20               	movlw	32
  2448  000C58  6E03               	movwf	lcd_repete_n@c,c
  2449  000C5A  0100               	movlb	0	; () banked
  2450  000C5C  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2451  000C5E  EC2F  F012         	call	_lcd_repete_n
  2452                           
  2453                           ;iut_lcd.c: 431: break;
  2454  000C62  EFCC  F00A         	goto	l3499
  2455  000C66                     l3153:
  2456                           
  2457                           ;iut_lcd.c: 433: ramstring = (*(char * *)__va_arg((*(char * **)ap), (char *)0));
  2458  000C66  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2459  000C6A  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2460  000C6E  CFDE F081          	movff	postinc2,lcd_printf@ramstring
  2461  000C72  CFDD F082          	movff	postdec2,lcd_printf@ramstring+1
  2462  000C76  0E02               	movlw	2
  2463  000C78  0100               	movlb	0	; () banked
  2464  000C7A  279D               	addwf	lcd_printf@ap& (0+255),f,b
  2465  000C7C  0E00               	movlw	0
  2466  000C7E  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;iut_lcd.c: 434: for (n = 0; ramstring[n] != 0; n++);
  2470  000C80  0E00               	movlw	0
  2471  000C82  0100               	movlb	0	; () banked
  2472  000C84  6F9C               	movwf	(lcd_printf@n+1)& (0+255),b
  2473  000C86  0E00               	movlw	0
  2474  000C88  6F9B               	movwf	lcd_printf@n& (0+255),b
  2475  000C8A  D003               	goto	l3161
  2476  000C8C                     l3159:
  2477                           
  2478                           ; BSR set to: 0
  2479  000C8C  0100               	movlb	0	; () banked
  2480  000C8E  4B9B               	infsnz	lcd_printf@n& (0+255),f,b
  2481  000C90  2B9C               	incf	(lcd_printf@n+1)& (0+255),f,b
  2482  000C92                     l3161:
  2483                           
  2484                           ; BSR set to: 0
  2485  000C92  0100               	movlb	0	; () banked
  2486  000C94  519B               	movf	lcd_printf@n& (0+255),w,b
  2487  000C96  0100               	movlb	0	; () banked
  2488  000C98  2581               	addwf	lcd_printf@ramstring& (0+255),w,b
  2489  000C9A  6ED9               	movwf	fsr2l,c
  2490  000C9C  0100               	movlb	0	; () banked
  2491  000C9E  519C               	movf	(lcd_printf@n+1)& (0+255),w,b
  2492  000CA0  0100               	movlb	0	; () banked
  2493  000CA2  2182               	addwfc	(lcd_printf@ramstring+1)& (0+255),w,b
  2494  000CA4  6EDA               	movwf	fsr2h,c
  2495  000CA6  50DF               	movf	indf2,w,c
  2496  000CA8  A4D8               	btfss	status,2,c
  2497  000CAA  D7F0               	goto	l3159
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;iut_lcd.c: 437: if (have_precision && precision < (unsigned char) n)
  2501                           
  2502                           ; BSR set to: 0
  2503  000CAC  0100               	movlb	0	; () banked
  2504  000CAE  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2505  000CB0  0100               	movlb	0	; () banked
  2506  000CB2  B4D8               	btfsc	status,2,c
  2507  000CB4  D00A               	goto	l3169
  2508                           
  2509                           ; BSR set to: 0
  2510  000CB6  0100               	movlb	0	; () banked
  2511  000CB8  519B               	movf	lcd_printf@n& (0+255),w,b
  2512  000CBA  0100               	movlb	0	; () banked
  2513  000CBC  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  2514  000CBE  B0D8               	btfsc	status,0,c
  2515  000CC0  D004               	goto	l3169
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;iut_lcd.c: 438: n = precision;
  2519  000CC2  C0A0  F09B         	movff	lcd_printf@precision,lcd_printf@n
  2520  000CC6  0100               	movlb	0	; () banked
  2521  000CC8  6B9C               	clrf	(lcd_printf@n+1)& (0+255),b
  2522  000CCA                     l3169:
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;iut_lcd.c: 439: if (width < (unsigned char) n)
  2526  000CCA  0100               	movlb	0	; () banked
  2527  000CCC  519B               	movf	lcd_printf@n& (0+255),w,b
  2528  000CCE  0100               	movlb	0	; () banked
  2529  000CD0  5DA1               	subwf	lcd_printf@width& (0+255),w,b
  2530  000CD2  A0D8               	btfss	status,0,c
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;iut_lcd.c: 440: width = n;
  2534  000CD4  C09B  F0A1         	movff	lcd_printf@n,lcd_printf@width
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;iut_lcd.c: 441: space_cnt = width - (unsigned char) n;
  2538                           
  2539                           ; BSR set to: 0
  2540  000CD8  0100               	movlb	0	; () banked
  2541  000CDA  519B               	movf	lcd_printf@n& (0+255),w,b
  2542  000CDC  0800               	sublw	0
  2543  000CDE  0100               	movlb	0	; () banked
  2544  000CE0  25A1               	addwf	lcd_printf@width& (0+255),w,b
  2545  000CE2  0100               	movlb	0	; () banked
  2546  000CE4  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;iut_lcd.c: 448: if (have_precision && precision < width)
  2550  000CE6  0100               	movlb	0	; () banked
  2551  000CE8  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2552  000CEA  0100               	movlb	0	; () banked
  2553  000CEC  B4D8               	btfsc	status,2,c
  2554  000CEE  D007               	goto	l205
  2555                           
  2556                           ; BSR set to: 0
  2557  000CF0  0100               	movlb	0	; () banked
  2558  000CF2  51A1               	movf	lcd_printf@width& (0+255),w,b
  2559  000CF4  0100               	movlb	0	; () banked
  2560  000CF6  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  2561  000CF8  A0D8               	btfss	status,0,c
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;iut_lcd.c: 449: width = precision;
  2565  000CFA  C0A0  F0A1         	movff	lcd_printf@precision,lcd_printf@width
  2566  000CFE                     l205:
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;iut_lcd.c: 452: if (!(flags & 0x1)) {
  2570  000CFE  0100               	movlb	0	; () banked
  2571  000D00  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  2572  000D02  D009               	goto	l3185
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;iut_lcd.c: 453: lcd_repete_n(space_cnt, ' ');
  2576  000D04  0E20               	movlw	32
  2577  000D06  6E03               	movwf	lcd_repete_n@c,c
  2578  000D08  0100               	movlb	0	; () banked
  2579  000D0A  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2580  000D0C  EC2F  F012         	call	_lcd_repete_n
  2581                           
  2582                           ;iut_lcd.c: 454: space_cnt = 0;
  2583  000D10  0E00               	movlw	0
  2584  000D12  0100               	movlb	0	; () banked
  2585  000D14  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2586  000D16                     l3185:
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;iut_lcd.c: 455: }
  2590                           ;iut_lcd.c: 456: cval = 0;
  2591  000D16  0E00               	movlw	0
  2592  000D18  0100               	movlb	0	; () banked
  2593  000D1A  6F9A               	movwf	lcd_printf@cval& (0+255),b
  2594  000D1C  D009               	goto	L4
  2595  000D1E                     l3189:
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;iut_lcd.c: 458: lcd_putc(c);
  2599  000D1E  0100               	movlb	0	; () banked
  2600  000D20  51A2               	movf	lcd_printf@c& (0+255),w,b
  2601  000D22  EC06  F011         	call	_lcd_putc
  2602                           
  2603                           ;iut_lcd.c: 460: ++cval;
  2604  000D26  0100               	movlb	0	; () banked
  2605  000D28  2B9A               	incf	lcd_printf@cval& (0+255),f,b
  2606                           
  2607                           ; BSR set to: 0
  2608  000D2A  0100               	movlb	0	; () banked
  2609  000D2C  4B81               	infsnz	lcd_printf@ramstring& (0+255),f,b
  2610  000D2E  2B82               	incf	(lcd_printf@ramstring+1)& (0+255),f,b
  2611  000D30                     L4:
  2612  000D30  C081  FFD9         	movff	lcd_printf@ramstring,fsr2l
  2613  000D34  C082  FFDA         	movff	lcd_printf@ramstring+1,fsr2h
  2614  000D38  50DF               	movf	indf2,w,c
  2615  000D3A  0100               	movlb	0	; () banked
  2616  000D3C  6FA2               	movwf	lcd_printf@c& (0+255),b
  2617                           
  2618                           ; BSR set to: 0
  2619                           
  2620                           ; BSR set to: 0
  2621  000D3E  0100               	movlb	0	; () banked
  2622  000D40  51A2               	movf	lcd_printf@c& (0+255),w,b
  2623  000D42  0100               	movlb	0	; () banked
  2624  000D44  B4D8               	btfsc	status,2,c
  2625  000D46  D006               	goto	l3199
  2626                           
  2627                           ; BSR set to: 0
  2628  000D48  0100               	movlb	0	; () banked
  2629  000D4A  51A1               	movf	lcd_printf@width& (0+255),w,b
  2630  000D4C  0100               	movlb	0	; () banked
  2631  000D4E  5D9A               	subwf	lcd_printf@cval& (0+255),w,b
  2632  000D50  A0D8               	btfss	status,0,c
  2633  000D52  D7E5               	goto	l3189
  2634  000D54                     l3199:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;iut_lcd.c: 461: }
  2638                           ;iut_lcd.c: 465: lcd_repete_n(space_cnt, ' ');
  2639  000D54  0E20               	movlw	32
  2640  000D56  6E03               	movwf	lcd_repete_n@c,c
  2641  000D58  0100               	movlb	0	; () banked
  2642  000D5A  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2643  000D5C  EC2F  F012         	call	_lcd_repete_n
  2644                           
  2645                           ;iut_lcd.c: 466: break;
  2646  000D60  EFCC  F00A         	goto	l3499
  2647  000D64                     l3201:
  2648                           
  2649                           ;iut_lcd.c: 468: case 'i':
  2650                           ;iut_lcd.c: 469: flags |= 0x80;
  2651  000D64  0100               	movlb	0	; () banked
  2652  000D66  8F9F               	bsf	lcd_printf@flags& (0+255),7,b
  2653  000D68                     l3203:
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;iut_lcd.c: 472: case 'u':
  2657                           ;iut_lcd.c: 473: case 'x':
  2658                           ;iut_lcd.c: 474: case 'X':
  2659                           ;iut_lcd.c: 475: case 'b':
  2660                           ;iut_lcd.c: 476: case 'B':
  2661                           ;iut_lcd.c: 483: if (size == 1) {
  2662  000D68  0100               	movlb	0	; () banked
  2663  000D6A  0594               	decf	lcd_printf@size& (0+255),w,b
  2664  000D6C  A4D8               	btfss	status,2,c
  2665  000D6E  D00E               	goto	l3211
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;iut_lcd.c: 484: larg = (*(long int *)__va_arg((*(long int **)ap), (long int)0));
  2669  000D70  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2670  000D74  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2671  000D78  CFDE F090          	movff	postinc2,lcd_printf@larg
  2672  000D7C  CFDE F091          	movff	postinc2,lcd_printf@larg+1
  2673  000D80  CFDE F092          	movff	postinc2,lcd_printf@larg+2
  2674  000D84  CFDE F093          	movff	postinc2,lcd_printf@larg+3
  2675                           
  2676                           ; BSR set to: 0
  2677  000D88  0E04               	movlw	4
  2678  000D8A  D016               	goto	L5
  2679  000D8C                     l3211:
  2680                           
  2681                           ; BSR set to: 0
  2682  000D8C  0E03               	movlw	3
  2683  000D8E  0100               	movlb	0	; () banked
  2684  000D90  1994               	xorwf	lcd_printf@size& (0+255),w,b
  2685  000D92  A4D8               	btfss	status,2,c
  2686  000D94  D021               	goto	l3223
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;iut_lcd.c: 487: if (flags & 0x80)
  2690  000D96  0100               	movlb	0	; () banked
  2691  000D98  AF9F               	btfss	lcd_printf@flags& (0+255),7,b
  2692  000D9A  D013               	goto	l3219
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;iut_lcd.c: 488: larg = (signed char) (*(int *)__va_arg((*(int **)ap), (int)0));
  2696  000D9C  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2697  000DA0  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2698  000DA4  50DF               	movf	indf2,w,c
  2699  000DA6  0100               	movlb	0	; () banked
  2700  000DA8  6F90               	movwf	lcd_printf@larg& (0+255),b
  2701  000DAA  0E00               	movlw	0
  2702  000DAC  BF90               	btfsc	lcd_printf@larg& (0+255),7,b
  2703  000DAE  0EFF               	movlw	-1
  2704  000DB0  6F91               	movwf	(lcd_printf@larg+1)& (0+255),b
  2705  000DB2  6F92               	movwf	(lcd_printf@larg+2)& (0+255),b
  2706  000DB4  6F93               	movwf	(lcd_printf@larg+3)& (0+255),b
  2707  000DB6  D06A               	goto	l3241
  2708  000DB8                     L5:
  2709  000DB8  0100               	movlb	0	; () banked
  2710  000DBA  279D               	addwf	lcd_printf@ap& (0+255),f,b
  2711  000DBC  0E00               	movlw	0
  2712  000DBE  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  2713  000DC0  D067               	goto	l3243
  2714  000DC2                     l3219:
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;iut_lcd.c: 489: else
  2718                           ;iut_lcd.c: 490: larg = (unsigned char) (*(unsigned int *)__va_arg((*(unsigned int **)ap
      +                          ), (unsigned int)0));
  2719  000DC2  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2720  000DC6  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2721  000DCA  50DF               	movf	indf2,w,c
  2722  000DCC  6E44               	movwf	??_lcd_printf& (0+255),c
  2723  000DCE  5044               	movf	??_lcd_printf,w,c
  2724  000DD0  0100               	movlb	0	; () banked
  2725  000DD2  6F90               	movwf	lcd_printf@larg& (0+255),b
  2726  000DD4  6B91               	clrf	(lcd_printf@larg+1)& (0+255),b
  2727  000DD6  D058               	goto	L22
  2728  000DD8                     l3223:
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;iut_lcd.c: 495: case 'P':
  2732                           ;iut_lcd.c: 496: if (size == 2) {
  2733  000DD8  0E02               	movlw	2
  2734  000DDA  0100               	movlb	0	; () banked
  2735  000DDC  1994               	xorwf	lcd_printf@size& (0+255),w,b
  2736  000DDE  A4D8               	btfss	status,2,c
  2737  000DE0  D036               	goto	l228
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;iut_lcd.c: 497: if (flags & 0x80)
  2741  000DE2  0100               	movlb	0	; () banked
  2742  000DE4  AF9F               	btfss	lcd_printf@flags& (0+255),7,b
  2743  000DE6  D01C               	goto	l3231
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;iut_lcd.c: 498: larg = (*(short long int *)__va_arg((*(short long int **)ap), (short lo
      +                          ng int)0));
  2747  000DE8  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2748  000DEC  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2749  000DF0  CFDE F044          	movff	postinc2,??_lcd_printf
  2750  000DF4  CFDE F045          	movff	postinc2,??_lcd_printf+1
  2751  000DF8  CFDE F046          	movff	postinc2,??_lcd_printf+2
  2752  000DFC  C044  F047         	movff	??_lcd_printf,??_lcd_printf+3
  2753  000E00  C045  F048         	movff	??_lcd_printf+1,??_lcd_printf+4
  2754  000E04  C046  F049         	movff	??_lcd_printf+2,??_lcd_printf+5
  2755  000E08  6A4A               	clrf	(??_lcd_printf+6)& (0+255),c
  2756  000E0A  BE49               	btfsc	(??_lcd_printf+5)& (0+255),7,c
  2757  000E0C  684A               	setf	(??_lcd_printf+6)& (0+255),c
  2758  000E0E  C047  F090         	movff	??_lcd_printf+3,lcd_printf@larg
  2759  000E12  C048  F091         	movff	??_lcd_printf+4,lcd_printf@larg+1
  2760  000E16  C049  F092         	movff	??_lcd_printf+5,lcd_printf@larg+2
  2761  000E1A  C04A  F093         	movff	??_lcd_printf+6,lcd_printf@larg+3
  2762  000E1E  D015               	goto	l3233
  2763  000E20                     l3231:
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;iut_lcd.c: 499: else
  2767                           ;iut_lcd.c: 500: larg = (*(unsigned short long int *)__va_arg((*(unsigned short long int
      +                           **)ap), (unsigned short long int)0));
  2768  000E20  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2769  000E24  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2770  000E28  CFDE F044          	movff	postinc2,??_lcd_printf
  2771  000E2C  CFDE F045          	movff	postinc2,??_lcd_printf+1
  2772  000E30  CFDE F046          	movff	postinc2,??_lcd_printf+2
  2773  000E34  5044               	movf	??_lcd_printf,w,c
  2774  000E36  0100               	movlb	0	; () banked
  2775  000E38  6F90               	movwf	lcd_printf@larg& (0+255),b
  2776  000E3A  5045               	movf	??_lcd_printf+1,w,c
  2777  000E3C  0100               	movlb	0	; () banked
  2778  000E3E  6F91               	movwf	(lcd_printf@larg+1)& (0+255),b
  2779  000E40  5046               	movf	??_lcd_printf+2,w,c
  2780  000E42  0100               	movlb	0	; () banked
  2781  000E44  6F92               	movwf	(lcd_printf@larg+2)& (0+255),b
  2782  000E46  0100               	movlb	0	; () banked
  2783  000E48  6B93               	clrf	(lcd_printf@larg+3)& (0+255),b
  2784  000E4A                     l3233:
  2785                           
  2786                           ; BSR set to: 0
  2787  000E4A  0E03               	movlw	3
  2788  000E4C  D7B5               	goto	L5
  2789  000E4E                     l228:
  2790                           
  2791                           ; BSR set to: 0
  2792  000E4E  0100               	movlb	0	; () banked
  2793  000E50  AF9F               	btfss	lcd_printf@flags& (0+255),7,b
  2794  000E52  D00D               	goto	l3239
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;iut_lcd.c: 502: larg = (*(int *)__va_arg((*(int **)ap), (int)0));
  2798  000E54  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2799  000E58  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2800  000E5C  CFDE F090          	movff	postinc2,lcd_printf@larg
  2801  000E60  CFDD F091          	movff	postdec2,lcd_printf@larg+1
  2802  000E64  0100               	movlb	0	; () banked
  2803  000E66  0E00               	movlw	0
  2804  000E68  BF91               	btfsc	(lcd_printf@larg+1)& (0+255),7,b
  2805  000E6A  0EFF               	movlw	-1
  2806  000E6C  D7A2               	goto	L13
  2807  000E6E                     l3239:
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;iut_lcd.c: 503: else
  2811                           ;iut_lcd.c: 504: larg = (*(unsigned int *)__va_arg((*(unsigned int **)ap), (unsigned int
      +                          )0));
  2812  000E6E  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2813  000E72  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2814  000E76  CFDE F044          	movff	postinc2,??_lcd_printf
  2815  000E7A  CFDD F045          	movff	postdec2,??_lcd_printf+1
  2816  000E7E  C044  F090         	movff	??_lcd_printf,lcd_printf@larg
  2817  000E82  C045  F091         	movff	??_lcd_printf+1,lcd_printf@larg+1
  2818  000E86  0100               	movlb	0	; () banked
  2819  000E88                     L22:
  2820  000E88  6B92               	clrf	(lcd_printf@larg+2)& (0+255),b
  2821  000E8A  6B93               	clrf	(lcd_printf@larg+3)& (0+255),b
  2822  000E8C                     l3241:
  2823                           
  2824                           ; BSR set to: 0
  2825  000E8C  0E02               	movlw	2
  2826  000E8E  D794               	goto	L5
  2827  000E90                     l3243:
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;iut_lcd.c: 507: if (!have_precision)
  2831  000E90  0100               	movlb	0	; () banked
  2832  000E92  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2833  000E94  0100               	movlb	0	; () banked
  2834  000E96  A4D8               	btfss	status,2,c
  2835  000E98  D003               	goto	l234
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;iut_lcd.c: 508: precision = 1;
  2839  000E9A  0E01               	movlw	1
  2840  000E9C  0100               	movlb	0	; () banked
  2841  000E9E  6FA0               	movwf	lcd_printf@precision& (0+255),b
  2842  000EA0                     l234:
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;iut_lcd.c: 510: {
  2846                           ;iut_lcd.c: 511: unsigned char digit_cnt = 0;
  2847  000EA0  0E00               	movlw	0
  2848  000EA2  0100               	movlb	0	; () banked
  2849  000EA4  6F8F               	movwf	lcd_printf@digit_cnt& (0+255),b
  2850                           
  2851                           ;iut_lcd.c: 512: unsigned char prefix_cnt = 0;
  2852  000EA6  0E00               	movlw	0
  2853  000EA8  0100               	movlb	0	; () banked
  2854  000EAA  6F8C               	movwf	lcd_printf@prefix_cnt& (0+255),b
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;iut_lcd.c: 513: unsigned char sign_char;
  2858                           ;iut_lcd.c: 516: char buf[33];
  2859                           ;iut_lcd.c: 518: char *q = &buf[31];
  2860  000EAC  0E7F               	movlw	low (lcd_printf@buf+31)
  2861  000EAE  0100               	movlb	0	; () banked
  2862  000EB0  6F86               	movwf	lcd_printf@q& (0+255),b
  2863  000EB2  0E00               	movlw	high (lcd_printf@buf+31)
  2864  000EB4  0100               	movlb	0	; () banked
  2865  000EB6  6F87               	movwf	(lcd_printf@q+1)& (0+255),b
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;iut_lcd.c: 520: buf[32] = '\0';
  2869  000EB8  0E00               	movlw	0
  2870  000EBA  0100               	movlb	0	; () banked
  2871  000EBC  6F80               	movwf	(lcd_printf@buf+32)& (0+255),b
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;iut_lcd.c: 522: space_cnt = 0;
  2875  000EBE  0E00               	movlw	0
  2876  000EC0  0100               	movlb	0	; () banked
  2877  000EC2  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;iut_lcd.c: 523: size = 10;
  2881  000EC4  0E0A               	movlw	10
  2882  000EC6  0100               	movlb	0	; () banked
  2883  000EC8  6F94               	movwf	lcd_printf@size& (0+255),b
  2884                           
  2885                           ;iut_lcd.c: 525: switch (c) {
  2886  000ECA  D00B               	goto	l3265
  2887  000ECC                     l3255:
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;iut_lcd.c: 527: case 'B':
  2891                           ;iut_lcd.c: 528: size = 2;
  2892  000ECC  0E02               	movlw	2
  2893  000ECE  D006               	goto	L7
  2894  000ED0                     l3257:
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;iut_lcd.c: 531: size = 8;
  2898  000ED0  0E08               	movlw	8
  2899  000ED2  D004               	goto	L7
  2900  000ED4                     l3259:
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;iut_lcd.c: 534: case 'P':
  2904                           ;iut_lcd.c: 537: c += 'x' - 'p';
  2905  000ED4  0E08               	movlw	8
  2906  000ED6  0100               	movlb	0	; () banked
  2907  000ED8  27A2               	addwf	lcd_printf@c& (0+255),f,b
  2908  000EDA                     l3261:
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;iut_lcd.c: 540: case 'X':
  2912                           ;iut_lcd.c: 541: size = 16;
  2913  000EDA  0E10               	movlw	16
  2914  000EDC                     L7:
  2915  000EDC  0100               	movlb	0	; () banked
  2916  000EDE  6F94               	movwf	lcd_printf@size& (0+255),b
  2917                           
  2918                           ; BSR set to: 0
  2919                           ;iut_lcd.c: 543: }
  2920                           
  2921                           ;iut_lcd.c: 542: break;
  2922  000EE0  D017               	goto	l238
  2923  000EE2                     l3265:
  2924                           
  2925                           ; BSR set to: 0
  2926  000EE2  0100               	movlb	0	; () banked
  2927  000EE4  51A2               	movf	lcd_printf@c& (0+255),w,b
  2928                           
  2929                           ; Switch size 1, requested type "space"
  2930                           ; Number of cases is 7, Range of values is 66 to 120
  2931                           ; switch strategies available:
  2932                           ; Name         Instructions Cycles
  2933                           ; simple_byte           22    12 (average)
  2934                           ;	Chosen strategy is simple_byte
  2935  000EE6  0A42               	xorlw	66	; case 66
  2936  000EE8  B4D8               	btfsc	status,2,c
  2937  000EEA  D7F0               	goto	l3255
  2938  000EEC  0A12               	xorlw	18	; case 80
  2939  000EEE  B4D8               	btfsc	status,2,c
  2940  000EF0  D7F1               	goto	l3259
  2941  000EF2  0A08               	xorlw	8	; case 88
  2942  000EF4  B4D8               	btfsc	status,2,c
  2943  000EF6  D7F1               	goto	l3261
  2944  000EF8  0A3A               	xorlw	58	; case 98
  2945  000EFA  B4D8               	btfsc	status,2,c
  2946  000EFC  D7E7               	goto	l3255
  2947  000EFE  0A0D               	xorlw	13	; case 111
  2948  000F00  B4D8               	btfsc	status,2,c
  2949  000F02  D7E6               	goto	l3257
  2950  000F04  0A1F               	xorlw	31	; case 112
  2951  000F06  B4D8               	btfsc	status,2,c
  2952  000F08  D7E5               	goto	l3259
  2953  000F0A  0A08               	xorlw	8	; case 120
  2954  000F0C  B4D8               	btfsc	status,2,c
  2955  000F0E  D7E5               	goto	l3261
  2956  000F10                     l238:
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;iut_lcd.c: 547: if (!(flags & 0x80))
  2960  000F10  0100               	movlb	0	; () banked
  2961  000F12  BF9F               	btfsc	lcd_printf@flags& (0+255),7,b
  2962  000F14  D003               	goto	l3269
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;iut_lcd.c: 548: flags &= ~(0x2 | 0x4);
  2966  000F16  0EF9               	movlw	249
  2967  000F18  0100               	movlb	0	; () banked
  2968  000F1A  179F               	andwf	lcd_printf@flags& (0+255),f,b
  2969  000F1C                     l3269:
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;iut_lcd.c: 558: if (flags & 0x80 && ((long) larg < 0)) {
  2973  000F1C  0100               	movlb	0	; () banked
  2974  000F1E  AF9F               	btfss	lcd_printf@flags& (0+255),7,b
  2975  000F20  D011               	goto	l245
  2976                           
  2977                           ; BSR set to: 0
  2978  000F22  0100               	movlb	0	; () banked
  2979  000F24  AF93               	btfss	(lcd_printf@larg+3)& (0+255),7,b
  2980  000F26  D00E               	goto	l245
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;iut_lcd.c: 559: larg = -(long) larg;
  2984  000F28  0100               	movlb	0	; () banked
  2985  000F2A  1F93               	comf	(lcd_printf@larg+3)& (0+255),f,b
  2986  000F2C  1F92               	comf	(lcd_printf@larg+2)& (0+255),f,b
  2987  000F2E  1F91               	comf	(lcd_printf@larg+1)& (0+255),f,b
  2988  000F30  6D90               	negf	lcd_printf@larg& (0+255),b
  2989  000F32  0E00               	movlw	0
  2990  000F34  2391               	addwfc	(lcd_printf@larg+1)& (0+255),f,b
  2991  000F36  2392               	addwfc	(lcd_printf@larg+2)& (0+255),f,b
  2992  000F38  2393               	addwfc	(lcd_printf@larg+3)& (0+255),f,b
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;iut_lcd.c: 560: sign_char = '-';
  2996  000F3A  0E2D               	movlw	45
  2997  000F3C  D00C               	goto	L12
  2998  000F3E                     l3277:
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;iut_lcd.c: 561: ++digit_cnt;
  3002  000F3E  0100               	movlb	0	; () banked
  3003  000F40  2B8F               	incf	lcd_printf@digit_cnt& (0+255),f,b
  3004                           
  3005                           ;iut_lcd.c: 562: } else if (flags & 0x2) {
  3006  000F42  D00F               	goto	l246
  3007  000F44                     l245:
  3008                           
  3009                           ; BSR set to: 0
  3010  000F44  0100               	movlb	0	; () banked
  3011  000F46  A39F               	btfss	lcd_printf@flags& (0+255),1,b
  3012  000F48  D002               	goto	l247
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;iut_lcd.c: 563: sign_char = '+';
  3016  000F4A  0E2B               	movlw	43
  3017  000F4C  D004               	goto	L12
  3018  000F4E                     l247:
  3019                           
  3020                           ; BSR set to: 0
  3021  000F4E  0100               	movlb	0	; () banked
  3022  000F50  A59F               	btfss	lcd_printf@flags& (0+255),2,b
  3023  000F52  D004               	goto	l3287
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;iut_lcd.c: 566: sign_char = ' ';
  3027  000F54  0E20               	movlw	32
  3028  000F56                     L12:
  3029  000F56  0100               	movlb	0	; () banked
  3030  000F58  6F83               	movwf	lcd_printf@sign_char& (0+255),b
  3031  000F5A  D7F1               	goto	l3277
  3032  000F5C                     l3287:
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;iut_lcd.c: 569: sign_char = '\0';
  3036  000F5C  0E00               	movlw	0
  3037  000F5E  0100               	movlb	0	; () banked
  3038  000F60  6F83               	movwf	lcd_printf@sign_char& (0+255),b
  3039  000F62                     l246:
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;iut_lcd.c: 573: if (precision || larg) {
  3043  000F62  0100               	movlb	0	; () banked
  3044  000F64  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3045  000F66  0100               	movlb	0	; () banked
  3046  000F68  A4D8               	btfss	status,2,c
  3047  000F6A  D00A               	goto	l3291
  3048                           
  3049                           ; BSR set to: 0
  3050  000F6C  0100               	movlb	0	; () banked
  3051  000F6E  5190               	movf	lcd_printf@larg& (0+255),w,b
  3052  000F70  0100               	movlb	0	; () banked
  3053  000F72  1191               	iorwf	(lcd_printf@larg+1)& (0+255),w,b
  3054  000F74  0100               	movlb	0	; () banked
  3055  000F76  1192               	iorwf	(lcd_printf@larg+2)& (0+255),w,b
  3056  000F78  0100               	movlb	0	; () banked
  3057  000F7A  1193               	iorwf	(lcd_printf@larg+3)& (0+255),w,b
  3058  000F7C  B4D8               	btfsc	status,2,c
  3059  000F7E  D07E               	goto	l3325
  3060  000F80                     l3291:
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;iut_lcd.c: 575: cval = s_digits[larg % size];
  3064  000F80  C090  F001         	movff	lcd_printf@larg,___llmod@dividend
  3065  000F84  C091  F002         	movff	lcd_printf@larg+1,___llmod@dividend+1
  3066  000F88  C092  F003         	movff	lcd_printf@larg+2,___llmod@dividend+2
  3067  000F8C  C093  F004         	movff	lcd_printf@larg+3,___llmod@dividend+3
  3068  000F90  0100               	movlb	0	; () banked
  3069  000F92  5194               	movf	lcd_printf@size& (0+255),w,b
  3070  000F94  6E05               	movwf	___llmod@divisor,c
  3071  000F96  6A06               	clrf	___llmod@divisor+1,c
  3072  000F98  6A07               	clrf	___llmod@divisor+2,c
  3073  000F9A  6A08               	clrf	___llmod@divisor+3,c
  3074  000F9C  ECD3  F010         	call	___llmod	;wreg free
  3075  000FA0  0E01               	movlw	low _s_digits
  3076  000FA2  2401               	addwf	?___llmod,w,c
  3077  000FA4  6EF6               	movwf	tblptrl,c
  3078  000FA6  0E08               	movlw	high _s_digits
  3079  000FA8  2002               	addwfc	?___llmod+1,w,c
  3080  000FAA  6EF7               	movwf	tblptrh,c
  3081  000FAC                     	if	0	;There are less than 3 active tblptr bytes
  3082  000FAC                     	endif
  3083  000FAC  0008               	tblrd		*
  3084  000FAE  CFF5 F09A          	movff	tablat,lcd_printf@cval
  3085                           
  3086                           ;iut_lcd.c: 576: if (c == 'X' && cval >= 'a')
  3087  000FB2  0E58               	movlw	88
  3088  000FB4  0100               	movlb	0	; () banked
  3089  000FB6  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3090  000FB8  A4D8               	btfss	status,2,c
  3091  000FBA  D007               	goto	l3299
  3092                           
  3093                           ; BSR set to: 0
  3094  000FBC  0E60               	movlw	96
  3095  000FBE  0100               	movlb	0	; () banked
  3096  000FC0  659A               	cpfsgt	lcd_printf@cval& (0+255),b
  3097  000FC2  D003               	goto	l3299
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;iut_lcd.c: 577: cval -= 'a' - 'A';
  3101  000FC4  0E20               	movlw	32
  3102  000FC6  0100               	movlb	0	; () banked
  3103  000FC8  5F9A               	subwf	lcd_printf@cval& (0+255),f,b
  3104  000FCA                     l3299:
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;iut_lcd.c: 578: larg /= size;
  3108  000FCA  C090  F001         	movff	lcd_printf@larg,___lldiv@dividend
  3109  000FCE  C091  F002         	movff	lcd_printf@larg+1,___lldiv@dividend+1
  3110  000FD2  C092  F003         	movff	lcd_printf@larg+2,___lldiv@dividend+2
  3111  000FD6  C093  F004         	movff	lcd_printf@larg+3,___lldiv@dividend+3
  3112  000FDA  0100               	movlb	0	; () banked
  3113  000FDC  5194               	movf	lcd_printf@size& (0+255),w,b
  3114  000FDE  6E05               	movwf	___lldiv@divisor,c
  3115  000FE0  6A06               	clrf	___lldiv@divisor+1,c
  3116  000FE2  6A07               	clrf	___lldiv@divisor+2,c
  3117  000FE4  6A08               	clrf	___lldiv@divisor+3,c
  3118  000FE6  EC92  F010         	call	___lldiv	;wreg free
  3119  000FEA  C001  F090         	movff	?___lldiv,lcd_printf@larg
  3120  000FEE  C002  F091         	movff	?___lldiv+1,lcd_printf@larg+1
  3121  000FF2  C003  F092         	movff	?___lldiv+2,lcd_printf@larg+2
  3122  000FF6  C004  F093         	movff	?___lldiv+3,lcd_printf@larg+3
  3123                           
  3124                           ;iut_lcd.c: 579: *q-- = cval;
  3125  000FFA  C086  FFD9         	movff	lcd_printf@q,fsr2l
  3126  000FFE  C087  FFDA         	movff	lcd_printf@q+1,fsr2h
  3127  001002  C09A  FFDF         	movff	lcd_printf@cval,indf2
  3128  001006  0100               	movlb	0	; () banked
  3129  001008  0786               	decf	lcd_printf@q& (0+255),f,b
  3130  00100A  A0D8               	btfss	status,0,c
  3131  00100C  0787               	decf	(lcd_printf@q+1)& (0+255),f,b
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;iut_lcd.c: 580: ++digit_cnt;
  3135  00100E  0100               	movlb	0	; () banked
  3136  001010  2B8F               	incf	lcd_printf@digit_cnt& (0+255),f,b
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;iut_lcd.c: 581: } while (larg);
  3140  001012  0100               	movlb	0	; () banked
  3141  001014  5190               	movf	lcd_printf@larg& (0+255),w,b
  3142  001016  0100               	movlb	0	; () banked
  3143  001018  1191               	iorwf	(lcd_printf@larg+1)& (0+255),w,b
  3144  00101A  0100               	movlb	0	; () banked
  3145  00101C  1192               	iorwf	(lcd_printf@larg+2)& (0+255),w,b
  3146  00101E  0100               	movlb	0	; () banked
  3147  001020  1193               	iorwf	(lcd_printf@larg+3)& (0+255),w,b
  3148  001022  A4D8               	btfss	status,2,c
  3149  001024  D7AD               	goto	l3291
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;iut_lcd.c: 585: if (flags & 0x8) {
  3153  001026  0100               	movlb	0	; () banked
  3154  001028  A79F               	btfss	lcd_printf@flags& (0+255),3,b
  3155  00102A  D02B               	goto	l3327
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;iut_lcd.c: 586: if (c == 'o') {
  3159  00102C  0E6F               	movlw	111
  3160  00102E  0100               	movlb	0	; () banked
  3161  001030  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3162  001032  A4D8               	btfss	status,2,c
  3163  001034  D00B               	goto	l3315
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;iut_lcd.c: 590: if (precision <= digit_cnt)
  3167  001036  0100               	movlb	0	; () banked
  3168  001038  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3169  00103A  0100               	movlb	0	; () banked
  3170  00103C  5D8F               	subwf	lcd_printf@digit_cnt& (0+255),w,b
  3171  00103E  A0D8               	btfss	status,0,c
  3172  001040  D020               	goto	l3327
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;iut_lcd.c: 591: precision = digit_cnt + 1;
  3176  001042  0100               	movlb	0	; () banked
  3177  001044  298F               	incf	lcd_printf@digit_cnt& (0+255),w,b
  3178  001046  0100               	movlb	0	; () banked
  3179  001048  6FA0               	movwf	lcd_printf@precision& (0+255),b
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;iut_lcd.c: 592: } else if (c == 'x'
  3183  00104A  D01B               	goto	l3327
  3184  00104C                     l3315:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;iut_lcd.c: 593: || c == 'X' || c == 'b' || c == 'B')
  3188  00104C  0E78               	movlw	120
  3189  00104E  0100               	movlb	0	; () banked
  3190  001050  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3191  001052  B4D8               	btfsc	status,2,c
  3192  001054  D00F               	goto	l3323
  3193                           
  3194                           ; BSR set to: 0
  3195  001056  0E58               	movlw	88
  3196  001058  0100               	movlb	0	; () banked
  3197  00105A  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3198  00105C  B4D8               	btfsc	status,2,c
  3199  00105E  D00A               	goto	l3323
  3200                           
  3201                           ; BSR set to: 0
  3202  001060  0E62               	movlw	98
  3203  001062  0100               	movlb	0	; () banked
  3204  001064  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3205  001066  B4D8               	btfsc	status,2,c
  3206  001068  D005               	goto	l3323
  3207                           
  3208                           ; BSR set to: 0
  3209  00106A  0E42               	movlw	66
  3210  00106C  0100               	movlb	0	; () banked
  3211  00106E  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3212  001070  A4D8               	btfss	status,2,c
  3213  001072  D007               	goto	l3327
  3214  001074                     l3323:
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;iut_lcd.c: 594: prefix_cnt = 2;
  3218  001074  0E02               	movlw	2
  3219  001076  0100               	movlb	0	; () banked
  3220  001078  6F8C               	movwf	lcd_printf@prefix_cnt& (0+255),b
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;iut_lcd.c: 595: }
  3224                           ;iut_lcd.c: 596: } else
  3225                           
  3226                           ; BSR set to: 0
  3227                           
  3228                           ; BSR set to: 0
  3229  00107A  D003               	goto	l3327
  3230  00107C                     l3325:
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;iut_lcd.c: 597: digit_cnt = 0;
  3234  00107C  0E00               	movlw	0
  3235  00107E  0100               	movlb	0	; () banked
  3236  001080  6F8F               	movwf	lcd_printf@digit_cnt& (0+255),b
  3237  001082                     l3327:
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;iut_lcd.c: 608: if ((flags & 0x10) && (width > precision)
  3241                           ;iut_lcd.c: 609: && !have_precision)
  3242  001082  0100               	movlb	0	; () banked
  3243  001084  A99F               	btfss	lcd_printf@flags& (0+255),4,b
  3244  001086  D00C               	goto	l3335
  3245                           
  3246                           ; BSR set to: 0
  3247  001088  0100               	movlb	0	; () banked
  3248  00108A  51A1               	movf	lcd_printf@width& (0+255),w,b
  3249  00108C  0100               	movlb	0	; () banked
  3250  00108E  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  3251  001090  B0D8               	btfsc	status,0,c
  3252  001092  D006               	goto	l3335
  3253                           
  3254                           ; BSR set to: 0
  3255  001094  0100               	movlb	0	; () banked
  3256  001096  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  3257  001098  0100               	movlb	0	; () banked
  3258  00109A  B4D8               	btfsc	status,2,c
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;iut_lcd.c: 610: precision = width;
  3262  00109C  C0A1  F0A0         	movff	lcd_printf@width,lcd_printf@precision
  3263  0010A0                     l3335:
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;iut_lcd.c: 613: if (precision > digit_cnt)
  3267  0010A0  0100               	movlb	0	; () banked
  3268  0010A2  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3269  0010A4  0100               	movlb	0	; () banked
  3270  0010A6  5D8F               	subwf	lcd_printf@digit_cnt& (0+255),w,b
  3271  0010A8  B0D8               	btfsc	status,0,c
  3272  0010AA  D005               	goto	l3339
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;iut_lcd.c: 614: precision -= digit_cnt;
  3276  0010AC  0100               	movlb	0	; () banked
  3277  0010AE  518F               	movf	lcd_printf@digit_cnt& (0+255),w,b
  3278  0010B0  0100               	movlb	0	; () banked
  3279  0010B2  5FA0               	subwf	lcd_printf@precision& (0+255),f,b
  3280  0010B4  D003               	goto	l3341
  3281  0010B6                     l3339:
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;iut_lcd.c: 615: else
  3285                           ;iut_lcd.c: 616: precision = 0;
  3286  0010B6  0E00               	movlw	0
  3287  0010B8  0100               	movlb	0	; () banked
  3288  0010BA  6FA0               	movwf	lcd_printf@precision& (0+255),b
  3289  0010BC                     l3341:
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;iut_lcd.c: 622: if (width > precision + digit_cnt + prefix_cnt)
  3293  0010BC  0100               	movlb	0	; () banked
  3294  0010BE  51A1               	movf	lcd_printf@width& (0+255),w,b
  3295  0010C0  6E44               	movwf	??_lcd_printf& (0+255),c
  3296  0010C2  6A45               	clrf	(??_lcd_printf+1)& (0+255),c
  3297  0010C4  0100               	movlb	0	; () banked
  3298  0010C6  518F               	movf	lcd_printf@digit_cnt& (0+255),w,b
  3299  0010C8  C0A0  F046         	movff	lcd_printf@precision,??_lcd_printf+2
  3300  0010CC  6A47               	clrf	(??_lcd_printf+3)& (0+255),c
  3301  0010CE  2646               	addwf	??_lcd_printf+2,f,c
  3302  0010D0  0E00               	movlw	0
  3303  0010D2  2247               	addwfc	??_lcd_printf+3,f,c
  3304  0010D4  0100               	movlb	0	; () banked
  3305  0010D6  518C               	movf	lcd_printf@prefix_cnt& (0+255),w,b
  3306  0010D8  2646               	addwf	??_lcd_printf+2,f,c
  3307  0010DA  0E00               	movlw	0
  3308  0010DC  2247               	addwfc	??_lcd_printf+3,f,c
  3309  0010DE  5044               	movf	??_lcd_printf,w,c
  3310  0010E0  5C46               	subwf	??_lcd_printf+2,w,c
  3311  0010E2  5047               	movf	??_lcd_printf+3,w,c
  3312  0010E4  0A80               	xorlw	128
  3313  0010E6  6E48               	movwf	(??_lcd_printf+4)& (0+255),c
  3314  0010E8  5045               	movf	??_lcd_printf+1,w,c
  3315  0010EA  0A80               	xorlw	128
  3316  0010EC  5848               	subwfb	(??_lcd_printf+4)& (0+255),w,c
  3317  0010EE  B0D8               	btfsc	status,0,c
  3318  0010F0  D00B               	goto	l3345
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;iut_lcd.c: 623: space_cnt =
  3322                           ;iut_lcd.c: 624: width - precision - digit_cnt - prefix_cnt;
  3323  0010F2  0100               	movlb	0	; () banked
  3324  0010F4  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3325  0010F6  0100               	movlb	0	; () banked
  3326  0010F8  258F               	addwf	lcd_printf@digit_cnt& (0+255),w,b
  3327  0010FA  0100               	movlb	0	; () banked
  3328  0010FC  258C               	addwf	lcd_printf@prefix_cnt& (0+255),w,b
  3329  0010FE  0800               	sublw	0
  3330  001100  0100               	movlb	0	; () banked
  3331  001102  25A1               	addwf	lcd_printf@width& (0+255),w,b
  3332  001104  0100               	movlb	0	; () banked
  3333  001106  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  3334  001108                     l3345:
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;iut_lcd.c: 629: if (!(flags & 0x1) && space_cnt) {
  3338  001108  0100               	movlb	0	; () banked
  3339  00110A  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  3340  00110C  D00E               	goto	l3353
  3341                           
  3342                           ; BSR set to: 0
  3343  00110E  0100               	movlb	0	; () banked
  3344  001110  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  3345  001112  0100               	movlb	0	; () banked
  3346  001114  B4D8               	btfsc	status,2,c
  3347  001116  D009               	goto	l3353
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;iut_lcd.c: 630: lcd_repete_n(space_cnt, ' ');
  3351  001118  0E20               	movlw	32
  3352  00111A  6E03               	movwf	lcd_repete_n@c,c
  3353  00111C  0100               	movlb	0	; () banked
  3354  00111E  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  3355  001120  EC2F  F012         	call	_lcd_repete_n
  3356                           
  3357                           ;iut_lcd.c: 632: space_cnt = 0;
  3358  001124  0E00               	movlw	0
  3359  001126  0100               	movlb	0	; () banked
  3360  001128  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  3361  00112A                     l3353:
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;iut_lcd.c: 633: }
  3365                           ;iut_lcd.c: 636: if (sign_char) {
  3366  00112A  0100               	movlb	0	; () banked
  3367  00112C  5183               	movf	lcd_printf@sign_char& (0+255),w,b
  3368  00112E  0100               	movlb	0	; () banked
  3369  001130  B4D8               	btfsc	status,2,c
  3370  001132  D004               	goto	l3357
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;iut_lcd.c: 637: lcd_write_data_busy(sign_char);
  3374  001134  0100               	movlb	0	; () banked
  3375  001136  5183               	movf	lcd_printf@sign_char& (0+255),w,b
  3376  001138  EC19  F012         	call	_lcd_write_data_busy
  3377  00113C                     l3357:
  3378                           
  3379                           ;iut_lcd.c: 638: }
  3380                           ;iut_lcd.c: 640: if (prefix_cnt) {
  3381  00113C  0100               	movlb	0	; () banked
  3382  00113E  518C               	movf	lcd_printf@prefix_cnt& (0+255),w,b
  3383  001140  0100               	movlb	0	; () banked
  3384  001142  B4D8               	btfsc	status,2,c
  3385  001144  D007               	goto	l3361
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;iut_lcd.c: 641: lcd_write_data_busy('0');
  3389  001146  0E30               	movlw	48
  3390  001148  EC19  F012         	call	_lcd_write_data_busy
  3391                           
  3392                           ;iut_lcd.c: 642: lcd_write_data_busy(c);
  3393  00114C  0100               	movlb	0	; () banked
  3394  00114E  51A2               	movf	lcd_printf@c& (0+255),w,b
  3395  001150  EC19  F012         	call	_lcd_write_data_busy
  3396  001154                     l3361:
  3397                           
  3398                           ;iut_lcd.c: 643: }
  3399                           ;iut_lcd.c: 647: if (precision > prefix_cnt)
  3400  001154  0100               	movlb	0	; () banked
  3401  001156  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3402  001158  0100               	movlb	0	; () banked
  3403  00115A  5D8C               	subwf	lcd_printf@prefix_cnt& (0+255),w,b
  3404  00115C  B0D8               	btfsc	status,0,c
  3405  00115E  D004               	goto	l3365
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;iut_lcd.c: 648: precision -= prefix_cnt;
  3409  001160  0100               	movlb	0	; () banked
  3410  001162  518C               	movf	lcd_printf@prefix_cnt& (0+255),w,b
  3411  001164  0100               	movlb	0	; () banked
  3412  001166  5FA0               	subwf	lcd_printf@precision& (0+255),f,b
  3413  001168                     l3365:
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;iut_lcd.c: 649: lcd_repete_n(precision, '0');
  3417  001168  0E30               	movlw	48
  3418  00116A  6E03               	movwf	lcd_repete_n@c,c
  3419  00116C  0100               	movlb	0	; () banked
  3420  00116E  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3421  001170  EC2F  F012         	call	_lcd_repete_n
  3422  001174  D004               	goto	l3371
  3423  001176                     l3369:
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;iut_lcd.c: 652: lcd_write_data_busy(cval);
  3427  001176  0100               	movlb	0	; () banked
  3428  001178  519A               	movf	lcd_printf@cval& (0+255),w,b
  3429  00117A  EC19  F012         	call	_lcd_write_data_busy
  3430  00117E                     l3371:
  3431  00117E  0100               	movlb	0	; () banked
  3432  001180  4B86               	infsnz	lcd_printf@q& (0+255),f,b
  3433  001182  2B87               	incf	(lcd_printf@q+1)& (0+255),f,b
  3434  001184  C086  FFD9         	movff	lcd_printf@q,fsr2l
  3435  001188  C087  FFDA         	movff	lcd_printf@q+1,fsr2h
  3436  00118C  50DF               	movf	indf2,w,c
  3437  00118E  0100               	movlb	0	; () banked
  3438  001190  6F9A               	movwf	lcd_printf@cval& (0+255),b
  3439                           
  3440                           ; BSR set to: 0
  3441                           
  3442                           ; BSR set to: 0
  3443  001192  0100               	movlb	0	; () banked
  3444  001194  519A               	movf	lcd_printf@cval& (0+255),w,b
  3445  001196  0100               	movlb	0	; () banked
  3446  001198  A4D8               	btfss	status,2,c
  3447  00119A  D7ED               	goto	l3369
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;iut_lcd.c: 653: }
  3451                           ;iut_lcd.c: 656: lcd_repete_n(space_cnt, ' ');
  3452                           
  3453                           ; BSR set to: 0
  3454  00119C  0E20               	movlw	32
  3455  00119E  6E03               	movwf	lcd_repete_n@c,c
  3456  0011A0  0100               	movlb	0	; () banked
  3457  0011A2  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  3458  0011A4  EC2F  F012         	call	_lcd_repete_n
  3459                           
  3460                           ;iut_lcd.c: 659: }
  3461                           ;iut_lcd.c: 660: break;
  3462  0011A8  D1F7               	goto	l3499
  3463  0011AA                     l3377:
  3464                           
  3465                           ;iut_lcd.c: 662: {
  3466                           ;iut_lcd.c: 663: float x;
  3467                           ;iut_lcd.c: 664: unsigned char i, w;
  3468                           ;iut_lcd.c: 665: unsigned int k;
  3469                           ;iut_lcd.c: 666: unsigned char sign, have_sign = 0;
  3470  0011AA  0E00               	movlw	0
  3471  0011AC  0100               	movlb	0	; () banked
  3472  0011AE  6F8B               	movwf	lcd_printf@have_sign& (0+255),b
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;iut_lcd.c: 667: x = (*(float *)__va_arg((*(float **)ap), (float)0));
  3476  0011B0  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  3477  0011B4  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  3478  0011B8  CFDE F096          	movff	postinc2,lcd_printf@x
  3479  0011BC  CFDE F097          	movff	postinc2,lcd_printf@x+1
  3480  0011C0  CFDD F098          	movff	postdec2,lcd_printf@x+2
  3481                           
  3482                           ; BSR set to: 0
  3483  0011C4  0E03               	movlw	3
  3484  0011C6  0100               	movlb	0	; () banked
  3485  0011C8  279D               	addwf	lcd_printf@ap& (0+255),f,b
  3486  0011CA  0E00               	movlw	0
  3487  0011CC  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;iut_lcd.c: 668: if (x < 0.0) {
  3491  0011CE  0100               	movlb	0	; () banked
  3492  0011D0  AF98               	btfss	(lcd_printf@x+2)& (0+255),7,b
  3493  0011D2  D012               	goto	l277
  3494                           
  3495                           ; BSR set to: 0
  3496                           ;iut_lcd.c: 669: sign = '-';
  3497  0011D4  0E2D               	movlw	45
  3498  0011D6  0100               	movlb	0	; () banked
  3499  0011D8  6F88               	movwf	lcd_printf@sign& (0+255),b
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;iut_lcd.c: 670: x = -x;
  3503  0011DA  C096  F00D         	movff	lcd_printf@x,___ftneg@f1
  3504  0011DE  C097  F00E         	movff	lcd_printf@x+1,___ftneg@f1+1
  3505  0011E2  C098  F00F         	movff	lcd_printf@x+2,___ftneg@f1+2
  3506  0011E6  ECE8  F011         	call	___ftneg	;wreg free
  3507  0011EA  C00D  F096         	movff	?___ftneg,lcd_printf@x
  3508  0011EE  C00E  F097         	movff	?___ftneg+1,lcd_printf@x+1
  3509  0011F2  C00F  F098         	movff	?___ftneg+2,lcd_printf@x+2
  3510  0011F6  D005               	goto	L9
  3511  0011F8                     l277:
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;iut_lcd.c: 673: if (flags & 0x2) {
  3515  0011F8  0100               	movlb	0	; () banked
  3516  0011FA  A39F               	btfss	lcd_printf@flags& (0+255),1,b
  3517  0011FC  D006               	goto	l279
  3518                           
  3519                           ; BSR set to: 0
  3520                           ;iut_lcd.c: 674: sign = '+';
  3521  0011FE  0E2B               	movlw	43
  3522  001200  D008               	goto	L10
  3523  001202                     L9:
  3524                           
  3525                           ;iut_lcd.c: 675: have_sign = 1;
  3526  001202  0E01               	movlw	1
  3527  001204  0100               	movlb	0	; () banked
  3528  001206  6F8B               	movwf	lcd_printf@have_sign& (0+255),b
  3529                           
  3530                           ;iut_lcd.c: 676: } else if (flags & 0x4) {
  3531  001208  D007               	goto	l278
  3532  00120A                     l279:
  3533                           
  3534                           ; BSR set to: 0
  3535  00120A  0100               	movlb	0	; () banked
  3536  00120C  A59F               	btfss	lcd_printf@flags& (0+255),2,b
  3537  00120E  D004               	goto	l278
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;iut_lcd.c: 677: sign = ' ';
  3541  001210  0E20               	movlw	32
  3542  001212                     L10:
  3543  001212  0100               	movlb	0	; () banked
  3544  001214  6F88               	movwf	lcd_printf@sign& (0+255),b
  3545  001216  D7F5               	goto	L9
  3546  001218                     l278:
  3547                           
  3548                           ; BSR set to: 0
  3549                           ;iut_lcd.c: 679: }
  3550                           ;iut_lcd.c: 680: }
  3551                           ;iut_lcd.c: 681: for (i = 0; x >= 1; i++) x /= 10;
  3552  001218  0E00               	movlw	0
  3553  00121A  0100               	movlb	0	; () banked
  3554  00121C  6F8D               	movwf	lcd_printf@i& (0+255),b
  3555                           
  3556                           ; BSR set to: 0
  3557  00121E  C096  F001         	movff	lcd_printf@x,___ftge@ff1
  3558  001222  C097  F002         	movff	lcd_printf@x+1,___ftge@ff1+1
  3559  001226  C098  F003         	movff	lcd_printf@x+2,___ftge@ff1+2
  3560  00122A  0E00               	movlw	0
  3561  00122C  6E04               	movwf	___ftge@ff2,c
  3562  00122E  0E80               	movlw	128
  3563  001230  6E05               	movwf	___ftge@ff2+1,c
  3564  001232  0E3F               	movlw	63
  3565  001234  6E06               	movwf	___ftge@ff2+2,c
  3566  001236  EC4A  F010         	call	___ftge	;wreg free
  3567  00123A  A0D8               	btfss	status,0,c
  3568  00123C  D025               	goto	l3405
  3569  00123E  C096  F02B         	movff	lcd_printf@x,___ftdiv@f1
  3570  001242  C097  F02C         	movff	lcd_printf@x+1,___ftdiv@f1+1
  3571  001246  C098  F02D         	movff	lcd_printf@x+2,___ftdiv@f1+2
  3572  00124A  0E00               	movlw	0
  3573  00124C  6E2E               	movwf	___ftdiv@f2,c
  3574  00124E  0E20               	movlw	32
  3575  001250  6E2F               	movwf	___ftdiv@f2+1,c
  3576  001252  0E41               	movlw	65
  3577  001254  6E30               	movwf	___ftdiv@f2+2,c
  3578  001256  ECE1  F00E         	call	___ftdiv	;wreg free
  3579  00125A  C02B  F096         	movff	?___ftdiv,lcd_printf@x
  3580  00125E  C02C  F097         	movff	?___ftdiv+1,lcd_printf@x+1
  3581  001262  C02D  F098         	movff	?___ftdiv+2,lcd_printf@x+2
  3582  001266  0100               	movlb	0	; () banked
  3583  001268  2B8D               	incf	lcd_printf@i& (0+255),f,b
  3584                           
  3585                           ; BSR set to: 0
  3586  00126A  C096  F001         	movff	lcd_printf@x,___ftge@ff1
  3587  00126E  C097  F002         	movff	lcd_printf@x+1,___ftge@ff1+1
  3588  001272  C098  F003         	movff	lcd_printf@x+2,___ftge@ff1+2
  3589  001276  0E00               	movlw	0
  3590  001278  6E04               	movwf	___ftge@ff2,c
  3591  00127A  0E80               	movlw	128
  3592  00127C  6E05               	movwf	___ftge@ff2+1,c
  3593  00127E  0E3F               	movlw	63
  3594  001280  6E06               	movwf	___ftge@ff2+2,c
  3595  001282  EC4A  F010         	call	___ftge	;wreg free
  3596  001286  D7D9               	goto	L11
  3597  001288                     l3405:
  3598                           
  3599                           ;iut_lcd.c: 682: if ((!have_precision) && (width == 0)) {
  3600  001288  0100               	movlb	0	; () banked
  3601  00128A  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  3602  00128C  0100               	movlb	0	; () banked
  3603  00128E  A4D8               	btfss	status,2,c
  3604  001290  D00B               	goto	l3411
  3605                           
  3606                           ; BSR set to: 0
  3607  001292  0100               	movlb	0	; () banked
  3608  001294  51A1               	movf	lcd_printf@width& (0+255),w,b
  3609  001296  0100               	movlb	0	; () banked
  3610  001298  A4D8               	btfss	status,2,c
  3611  00129A  D006               	goto	l3411
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;iut_lcd.c: 683: precision = 3;
  3615  00129C  0E03               	movlw	3
  3616  00129E  0100               	movlb	0	; () banked
  3617  0012A0  6FA0               	movwf	lcd_printf@precision& (0+255),b
  3618                           
  3619                           ;iut_lcd.c: 684: have_precision = 1;
  3620  0012A2  0E01               	movlw	1
  3621  0012A4  0100               	movlb	0	; () banked
  3622  0012A6  6F95               	movwf	lcd_printf@have_precision& (0+255),b
  3623  0012A8                     l3411:
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;iut_lcd.c: 685: }
  3627                           ;iut_lcd.c: 686: w = precision + i;
  3628  0012A8  0100               	movlb	0	; () banked
  3629  0012AA  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3630  0012AC  0100               	movlb	0	; () banked
  3631  0012AE  258D               	addwf	lcd_printf@i& (0+255),w,b
  3632  0012B0  0100               	movlb	0	; () banked
  3633  0012B2  6F8E               	movwf	lcd_printf@w& (0+255),b
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;iut_lcd.c: 687: if (precision > 0) w++;
  3637  0012B4  0100               	movlb	0	; () banked
  3638  0012B6  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3639  0012B8  0100               	movlb	0	; () banked
  3640  0012BA  B4D8               	btfsc	status,2,c
  3641  0012BC  D002               	goto	l3417
  3642                           
  3643                           ; BSR set to: 0
  3644  0012BE  0100               	movlb	0	; () banked
  3645  0012C0  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3646  0012C2                     l3417:
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;iut_lcd.c: 688: if (have_sign) w++;
  3650  0012C2  0100               	movlb	0	; () banked
  3651  0012C4  518B               	movf	lcd_printf@have_sign& (0+255),w,b
  3652  0012C6  0100               	movlb	0	; () banked
  3653  0012C8  B4D8               	btfsc	status,2,c
  3654  0012CA  D002               	goto	l3421
  3655                           
  3656                           ; BSR set to: 0
  3657  0012CC  0100               	movlb	0	; () banked
  3658  0012CE  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3659  0012D0                     l3421:
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;iut_lcd.c: 689: if (i == 0) w++;
  3663  0012D0  0100               	movlb	0	; () banked
  3664  0012D2  518D               	movf	lcd_printf@i& (0+255),w,b
  3665  0012D4  0100               	movlb	0	; () banked
  3666  0012D6  A4D8               	btfss	status,2,c
  3667  0012D8  D002               	goto	l3425
  3668                           
  3669                           ; BSR set to: 0
  3670  0012DA  0100               	movlb	0	; () banked
  3671  0012DC  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3672  0012DE                     l3425:
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;iut_lcd.c: 690: if (!have_precision) {
  3676  0012DE  0100               	movlb	0	; () banked
  3677  0012E0  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  3678  0012E2  0100               	movlb	0	; () banked
  3679  0012E4  A4D8               	btfss	status,2,c
  3680  0012E6  D01F               	goto	l3433
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;iut_lcd.c: 691: if (width > w + 1) {
  3684  0012E8  0100               	movlb	0	; () banked
  3685  0012EA  51A1               	movf	lcd_printf@width& (0+255),w,b
  3686  0012EC  6E44               	movwf	??_lcd_printf& (0+255),c
  3687  0012EE  6A45               	clrf	(??_lcd_printf+1)& (0+255),c
  3688  0012F0  0100               	movlb	0	; () banked
  3689  0012F2  518E               	movf	lcd_printf@w& (0+255),w,b
  3690  0012F4  6E46               	movwf	(??_lcd_printf+2)& (0+255),c
  3691  0012F6  6A47               	clrf	(??_lcd_printf+3)& (0+255),c
  3692  0012F8  0E01               	movlw	1
  3693  0012FA  2646               	addwf	??_lcd_printf+2,f,c
  3694  0012FC  0E00               	movlw	0
  3695  0012FE  2247               	addwfc	??_lcd_printf+3,f,c
  3696  001300  5044               	movf	??_lcd_printf,w,c
  3697  001302  5C46               	subwf	??_lcd_printf+2,w,c
  3698  001304  5047               	movf	??_lcd_printf+3,w,c
  3699  001306  0A80               	xorlw	128
  3700  001308  6E48               	movwf	(??_lcd_printf+4)& (0+255),c
  3701  00130A  5045               	movf	??_lcd_printf+1,w,c
  3702  00130C  0A80               	xorlw	128
  3703  00130E  5848               	subwfb	(??_lcd_printf+4)& (0+255),w,c
  3704  001310  B0D8               	btfsc	status,0,c
  3705  001312  D009               	goto	l3433
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;iut_lcd.c: 692: precision = width - (w + 1);
  3709  001314  0100               	movlb	0	; () banked
  3710  001316  298E               	incf	lcd_printf@w& (0+255),w,b
  3711  001318  0800               	sublw	0
  3712  00131A  0100               	movlb	0	; () banked
  3713  00131C  25A1               	addwf	lcd_printf@width& (0+255),w,b
  3714  00131E  0100               	movlb	0	; () banked
  3715  001320  6FA0               	movwf	lcd_printf@precision& (0+255),b
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;iut_lcd.c: 693: w = width;
  3719  001322  C0A1  F08E         	movff	lcd_printf@width,lcd_printf@w
  3720  001326                     l3433:
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;iut_lcd.c: 694: }
  3724                           ;iut_lcd.c: 695: }
  3725                           ;iut_lcd.c: 696: if (!(flags & 0x1)) {
  3726  001326  0100               	movlb	0	; () banked
  3727  001328  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  3728  00132A  D02E               	goto	l3457
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;iut_lcd.c: 697: if (flags & 0x10) {
  3732  00132C  0100               	movlb	0	; () banked
  3733  00132E  A99F               	btfss	lcd_printf@flags& (0+255),4,b
  3734  001330  D01B               	goto	l3451
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;iut_lcd.c: 698: if (have_sign) lcd_write_data_busy(sign);
  3738  001332  0100               	movlb	0	; () banked
  3739  001334  518B               	movf	lcd_printf@have_sign& (0+255),w,b
  3740  001336  0100               	movlb	0	; () banked
  3741  001338  B4D8               	btfsc	status,2,c
  3742  00133A  D00A               	goto	l3445
  3743                           
  3744                           ; BSR set to: 0
  3745  00133C  0100               	movlb	0	; () banked
  3746  00133E  5188               	movf	lcd_printf@sign& (0+255),w,b
  3747  001340  EC19  F012         	call	_lcd_write_data_busy
  3748                           
  3749                           ;iut_lcd.c: 699: for (; width > w; w++) lcd_write_data_busy('0');
  3750  001344  D005               	goto	l3445
  3751  001346                     l3441:
  3752  001346  0E30               	movlw	48
  3753  001348  EC19  F012         	call	_lcd_write_data_busy
  3754  00134C  0100               	movlb	0	; () banked
  3755  00134E  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3756  001350                     l3445:
  3757  001350  0100               	movlb	0	; () banked
  3758  001352  51A1               	movf	lcd_printf@width& (0+255),w,b
  3759  001354  0100               	movlb	0	; () banked
  3760  001356  5D8E               	subwf	lcd_printf@w& (0+255),w,b
  3761  001358  B0D8               	btfsc	status,0,c
  3762  00135A  D01F               	goto	l3461
  3763  00135C  D7F4               	goto	l3441
  3764  00135E                     l3447:
  3765                           
  3766                           ; BSR set to: 0
  3767  00135E  0E20               	movlw	32
  3768  001360  EC19  F012         	call	_lcd_write_data_busy
  3769  001364  0100               	movlb	0	; () banked
  3770  001366  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3771  001368                     l3451:
  3772                           
  3773                           ; BSR set to: 0
  3774  001368  0100               	movlb	0	; () banked
  3775  00136A  51A1               	movf	lcd_printf@width& (0+255),w,b
  3776  00136C  0100               	movlb	0	; () banked
  3777  00136E  5D8E               	subwf	lcd_printf@w& (0+255),w,b
  3778  001370  A0D8               	btfss	status,0,c
  3779  001372  D7F5               	goto	l3447
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;iut_lcd.c: 702: if (have_sign) lcd_write_data_busy(sign);
  3783                           
  3784                           ; BSR set to: 0
  3785  001374  0100               	movlb	0	; () banked
  3786  001376  518B               	movf	lcd_printf@have_sign& (0+255),w,b
  3787  001378  0100               	movlb	0	; () banked
  3788  00137A  B4D8               	btfsc	status,2,c
  3789  00137C  D00E               	goto	l3461
  3790                           
  3791                           ; BSR set to: 0
  3792  00137E  0100               	movlb	0	; () banked
  3793  001380  5188               	movf	lcd_printf@sign& (0+255),w,b
  3794  001382  EC19  F012         	call	_lcd_write_data_busy
  3795                           
  3796                           ;iut_lcd.c: 703: }
  3797                           ;iut_lcd.c: 704: } else {
  3798  001386  D009               	goto	l3461
  3799  001388                     l3457:
  3800                           
  3801                           ;iut_lcd.c: 705: if (have_sign) lcd_write_data_busy(sign);
  3802  001388  0100               	movlb	0	; () banked
  3803  00138A  518B               	movf	lcd_printf@have_sign& (0+255),w,b
  3804  00138C  0100               	movlb	0	; () banked
  3805  00138E  B4D8               	btfsc	status,2,c
  3806  001390  D004               	goto	l3461
  3807                           
  3808                           ; BSR set to: 0
  3809  001392  0100               	movlb	0	; () banked
  3810  001394  5188               	movf	lcd_printf@sign& (0+255),w,b
  3811  001396  EC19  F012         	call	_lcd_write_data_busy
  3812  00139A                     l3461:
  3813                           
  3814                           ;iut_lcd.c: 706: }
  3815                           ;iut_lcd.c: 707: if (i == 0) {
  3816  00139A  0100               	movlb	0	; () banked
  3817  00139C  518D               	movf	lcd_printf@i& (0+255),w,b
  3818  00139E  0100               	movlb	0	; () banked
  3819  0013A0  A4D8               	btfss	status,2,c
  3820  0013A2  D003               	goto	l3465
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;iut_lcd.c: 708: lcd_write_data_busy('0');
  3824  0013A4  0E30               	movlw	48
  3825  0013A6  EC19  F012         	call	_lcd_write_data_busy
  3826  0013AA                     l3465:
  3827                           
  3828                           ;iut_lcd.c: 709: }
  3829                           ;iut_lcd.c: 710: for (; i > 0; i--) {
  3830  0013AA  0100               	movlb	0	; () banked
  3831  0013AC  518D               	movf	lcd_printf@i& (0+255),w,b
  3832  0013AE  0100               	movlb	0	; () banked
  3833  0013B0  B4D8               	btfsc	status,2,c
  3834  0013B2  D04A               	goto	l3475
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;iut_lcd.c: 711: x *= 10;
  3838                           
  3839                           ; BSR set to: 0
  3840                           
  3841                           ; BSR set to: 0
  3842  0013B4  C096  F01C         	movff	lcd_printf@x,___ftmul@f1
  3843  0013B8  C097  F01D         	movff	lcd_printf@x+1,___ftmul@f1+1
  3844  0013BC  C098  F01E         	movff	lcd_printf@x+2,___ftmul@f1+2
  3845  0013C0  0E00               	movlw	0
  3846  0013C2  6E1F               	movwf	___ftmul@f2,c
  3847  0013C4  0E20               	movlw	32
  3848  0013C6  6E20               	movwf	___ftmul@f2+1,c
  3849  0013C8  0E41               	movlw	65
  3850  0013CA  6E21               	movwf	___ftmul@f2+2,c
  3851  0013CC  EC67  F00E         	call	___ftmul	;wreg free
  3852  0013D0  C01C  F096         	movff	?___ftmul,lcd_printf@x
  3853  0013D4  C01D  F097         	movff	?___ftmul+1,lcd_printf@x+1
  3854  0013D8  C01E  F098         	movff	?___ftmul+2,lcd_printf@x+2
  3855                           
  3856                           ;iut_lcd.c: 712: k = (unsigned int)x;
  3857  0013DC  C096  F001         	movff	lcd_printf@x,___fttol@f1
  3858  0013E0  C097  F002         	movff	lcd_printf@x+1,___fttol@f1+1
  3859  0013E4  C098  F003         	movff	lcd_printf@x+2,___fttol@f1+2
  3860  0013E8  ECED  F00D         	call	___fttol	;wreg free
  3861  0013EC  C001  F089         	movff	?___fttol,lcd_printf@k
  3862  0013F0  C002  F08A         	movff	?___fttol+1,lcd_printf@k+1
  3863                           
  3864                           ;iut_lcd.c: 713: x = x - k;
  3865  0013F4  C089  F009         	movff	lcd_printf@k,___lwtoft@c
  3866  0013F8  C08A  F00A         	movff	lcd_printf@k+1,___lwtoft@c+1
  3867  0013FC  ECD6  F011         	call	___lwtoft	;wreg free
  3868  001400  C009  F00D         	movff	?___lwtoft,___ftneg@f1
  3869  001404  C00A  F00E         	movff	?___lwtoft+1,___ftneg@f1+1
  3870  001408  C00B  F00F         	movff	?___lwtoft+2,___ftneg@f1+2
  3871  00140C  ECE8  F011         	call	___ftneg	;wreg free
  3872  001410  C00D  F010         	movff	?___ftneg,___ftadd@f1
  3873  001414  C00E  F011         	movff	?___ftneg+1,___ftadd@f1+1
  3874  001418  C00F  F012         	movff	?___ftneg+2,___ftadd@f1+2
  3875  00141C  C096  F013         	movff	lcd_printf@x,___ftadd@f2
  3876  001420  C097  F014         	movff	lcd_printf@x+1,___ftadd@f2+1
  3877  001424  C098  F015         	movff	lcd_printf@x+2,___ftadd@f2+2
  3878  001428  EC17  F00D         	call	___ftadd	;wreg free
  3879  00142C  C010  F096         	movff	?___ftadd,lcd_printf@x
  3880  001430  C011  F097         	movff	?___ftadd+1,lcd_printf@x+1
  3881  001434  C012  F098         	movff	?___ftadd+2,lcd_printf@x+2
  3882                           
  3883                           ;iut_lcd.c: 714: lcd_write_data_busy(k + '0');
  3884  001438  0100               	movlb	0	; () banked
  3885  00143A  5189               	movf	lcd_printf@k& (0+255),w,b
  3886  00143C  0F30               	addlw	48
  3887  00143E  EC19  F012         	call	_lcd_write_data_busy
  3888  001442  0100               	movlb	0	; () banked
  3889  001444  078D               	decf	lcd_printf@i& (0+255),f,b
  3890  001446  D7B1               	goto	l3465
  3891  001448                     l3475:
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;iut_lcd.c: 715: }
  3895                           ;iut_lcd.c: 716: if (precision > 0) lcd_write_data_busy('.');
  3896  001448  0100               	movlb	0	; () banked
  3897  00144A  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3898  00144C  0100               	movlb	0	; () banked
  3899  00144E  B4D8               	btfsc	status,2,c
  3900  001450  D04D               	goto	l3483
  3901                           
  3902                           ; BSR set to: 0
  3903  001452  0E2E               	movlw	46
  3904  001454  EC19  F012         	call	_lcd_write_data_busy
  3905                           
  3906                           ;iut_lcd.c: 717: for (; i < precision; i++) {
  3907  001458  D049               	goto	l3483
  3908  00145A                     l3479:
  3909                           
  3910                           ;iut_lcd.c: 718: x *= 10;
  3911  00145A  C096  F01C         	movff	lcd_printf@x,___ftmul@f1
  3912  00145E  C097  F01D         	movff	lcd_printf@x+1,___ftmul@f1+1
  3913  001462  C098  F01E         	movff	lcd_printf@x+2,___ftmul@f1+2
  3914  001466  0E00               	movlw	0
  3915  001468  6E1F               	movwf	___ftmul@f2,c
  3916  00146A  0E20               	movlw	32
  3917  00146C  6E20               	movwf	___ftmul@f2+1,c
  3918  00146E  0E41               	movlw	65
  3919  001470  6E21               	movwf	___ftmul@f2+2,c
  3920  001472  EC67  F00E         	call	___ftmul	;wreg free
  3921  001476  C01C  F096         	movff	?___ftmul,lcd_printf@x
  3922  00147A  C01D  F097         	movff	?___ftmul+1,lcd_printf@x+1
  3923  00147E  C01E  F098         	movff	?___ftmul+2,lcd_printf@x+2
  3924                           
  3925                           ;iut_lcd.c: 719: k = (unsigned int)x;
  3926  001482  C096  F001         	movff	lcd_printf@x,___fttol@f1
  3927  001486  C097  F002         	movff	lcd_printf@x+1,___fttol@f1+1
  3928  00148A  C098  F003         	movff	lcd_printf@x+2,___fttol@f1+2
  3929  00148E  ECED  F00D         	call	___fttol	;wreg free
  3930  001492  C001  F089         	movff	?___fttol,lcd_printf@k
  3931  001496  C002  F08A         	movff	?___fttol+1,lcd_printf@k+1
  3932                           
  3933                           ;iut_lcd.c: 720: x = x - k;
  3934  00149A  C089  F009         	movff	lcd_printf@k,___lwtoft@c
  3935  00149E  C08A  F00A         	movff	lcd_printf@k+1,___lwtoft@c+1
  3936  0014A2  ECD6  F011         	call	___lwtoft	;wreg free
  3937  0014A6  C009  F00D         	movff	?___lwtoft,___ftneg@f1
  3938  0014AA  C00A  F00E         	movff	?___lwtoft+1,___ftneg@f1+1
  3939  0014AE  C00B  F00F         	movff	?___lwtoft+2,___ftneg@f1+2
  3940  0014B2  ECE8  F011         	call	___ftneg	;wreg free
  3941  0014B6  C00D  F010         	movff	?___ftneg,___ftadd@f1
  3942  0014BA  C00E  F011         	movff	?___ftneg+1,___ftadd@f1+1
  3943  0014BE  C00F  F012         	movff	?___ftneg+2,___ftadd@f1+2
  3944  0014C2  C096  F013         	movff	lcd_printf@x,___ftadd@f2
  3945  0014C6  C097  F014         	movff	lcd_printf@x+1,___ftadd@f2+1
  3946  0014CA  C098  F015         	movff	lcd_printf@x+2,___ftadd@f2+2
  3947  0014CE  EC17  F00D         	call	___ftadd	;wreg free
  3948  0014D2  C010  F096         	movff	?___ftadd,lcd_printf@x
  3949  0014D6  C011  F097         	movff	?___ftadd+1,lcd_printf@x+1
  3950  0014DA  C012  F098         	movff	?___ftadd+2,lcd_printf@x+2
  3951                           
  3952                           ;iut_lcd.c: 721: lcd_write_data_busy(k + '0');
  3953  0014DE  0100               	movlb	0	; () banked
  3954  0014E0  5189               	movf	lcd_printf@k& (0+255),w,b
  3955  0014E2  0F30               	addlw	48
  3956  0014E4  EC19  F012         	call	_lcd_write_data_busy
  3957  0014E8  0100               	movlb	0	; () banked
  3958  0014EA  2B8D               	incf	lcd_printf@i& (0+255),f,b
  3959  0014EC                     l3483:
  3960  0014EC  0100               	movlb	0	; () banked
  3961  0014EE  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3962  0014F0  0100               	movlb	0	; () banked
  3963  0014F2  5D8D               	subwf	lcd_printf@i& (0+255),w,b
  3964  0014F4  A0D8               	btfss	status,0,c
  3965  0014F6  D7B1               	goto	l3479
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;iut_lcd.c: 722: }
  3969                           ;iut_lcd.c: 723: if (flags & 0x1) {
  3970  0014F8  0100               	movlb	0	; () banked
  3971  0014FA  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  3972  0014FC  D006               	goto	l3491
  3973  0014FE  D04C               	goto	l3499
  3974  001500                     l3487:
  3975                           
  3976                           ; BSR set to: 0
  3977  001500  0E20               	movlw	32
  3978  001502  EC19  F012         	call	_lcd_write_data_busy
  3979  001506  0100               	movlb	0	; () banked
  3980  001508  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3981  00150A                     l3491:
  3982                           
  3983                           ; BSR set to: 0
  3984  00150A  0100               	movlb	0	; () banked
  3985  00150C  51A1               	movf	lcd_printf@width& (0+255),w,b
  3986  00150E  0100               	movlb	0	; () banked
  3987  001510  5D8E               	subwf	lcd_printf@w& (0+255),w,b
  3988  001512  B0D8               	btfsc	status,0,c
  3989  001514  D041               	goto	l3499
  3990  001516  D7F4               	goto	l3487
  3991  001518                     l3495:
  3992                           
  3993                           ; BSR set to: 0
  3994  001518  0100               	movlb	0	; () banked
  3995  00151A  51A2               	movf	lcd_printf@c& (0+255),w,b
  3996                           
  3997                           ; Switch size 1, requested type "space"
  3998                           ; Number of cases is 16, Range of values is 0 to 120
  3999                           ; switch strategies available:
  4000                           ; Name         Instructions Cycles
  4001                           ; simple_byte           49    25 (average)
  4002                           ;	Chosen strategy is simple_byte
  4003  00151C  0A00               	xorlw	0	; case 0
  4004  00151E  B4D8               	btfsc	status,2,c
  4005  001520  EF70  F005         	goto	l3073
  4006  001524  0A25               	xorlw	37	; case 37
  4007  001526  B4D8               	btfsc	status,2,c
  4008  001528  EF73  F005         	goto	l3075
  4009  00152C  0A67               	xorlw	103	; case 66
  4010  00152E  B4D8               	btfsc	status,2,c
  4011  001530  D41B               	goto	l3203
  4012  001532  0A12               	xorlw	18	; case 80
  4013  001534  B4D8               	btfsc	status,2,c
  4014  001536  D450               	goto	l3223
  4015  001538  0A03               	xorlw	3	; case 83
  4016  00153A  B4D8               	btfsc	status,2,c
  4017  00153C  EFAC  F005         	goto	l3099
  4018  001540  0A0B               	xorlw	11	; case 88
  4019  001542  B4D8               	btfsc	status,2,c
  4020  001544  D411               	goto	l3203
  4021  001546  0A3A               	xorlw	58	; case 98
  4022  001548  B4D8               	btfsc	status,2,c
  4023  00154A  D40E               	goto	l3203
  4024  00154C  0A01               	xorlw	1	; case 99
  4025  00154E  B4D8               	btfsc	status,2,c
  4026  001550  EF78  F005         	goto	l3077
  4027  001554  0A07               	xorlw	7	; case 100
  4028  001556  B4D8               	btfsc	status,2,c
  4029  001558  D405               	goto	l3201
  4030  00155A  0A02               	xorlw	2	; case 102
  4031  00155C  B4D8               	btfsc	status,2,c
  4032  00155E  D625               	goto	l3377
  4033  001560  0A0F               	xorlw	15	; case 105
  4034  001562  B4D8               	btfsc	status,2,c
  4035  001564  EFB2  F006         	goto	l3201
  4036  001568  0A06               	xorlw	6	; case 111
  4037  00156A  B4D8               	btfsc	status,2,c
  4038  00156C  EFB4  F006         	goto	l3203
  4039  001570  0A1F               	xorlw	31	; case 112
  4040  001572  B4D8               	btfsc	status,2,c
  4041  001574  D431               	goto	l3223
  4042  001576  0A03               	xorlw	3	; case 115
  4043  001578  B4D8               	btfsc	status,2,c
  4044  00157A  EF33  F006         	goto	l3153
  4045  00157E  0A06               	xorlw	6	; case 117
  4046  001580  B4D8               	btfsc	status,2,c
  4047  001582  EFB4  F006         	goto	l3203
  4048  001586  0A0D               	xorlw	13	; case 120
  4049  001588  B4D8               	btfsc	status,2,c
  4050  00158A  EFB4  F006         	goto	l3203
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;iut_lcd.c: 732: } else {
  4054  00158E  D004               	goto	l3499
  4055  001590                     l3497:
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;iut_lcd.c: 733: lcd_putc(c);
  4059  001590  0100               	movlb	0	; () banked
  4060  001592  51A2               	movf	lcd_printf@c& (0+255),w,b
  4061  001594  EC06  F011         	call	_lcd_putc
  4062  001598                     l3499:
  4063  001598  4A3A               	infsnz	lcd_printf@f,f,c
  4064  00159A  2A3B               	incf	lcd_printf@f+1,f,c
  4065  00159C                     L1:
  4066  00159C  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  4067  0015A0  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  4068  0015A4                     	if	0	;tblptru may be non-zero
  4069  0015A4                     	endif
  4070  0015A4                     	if	0	;tblptru may be non-zero
  4071  0015A4                     	endif
  4072  0015A4  0008               	tblrd		*
  4073  0015A6  CFF5 F0A2          	movff	tablat,lcd_printf@c
  4074  0015AA  0100               	movlb	0	; () banked
  4075  0015AC  51A2               	movf	lcd_printf@c& (0+255),w,b
  4076  0015AE  0100               	movlb	0	; () banked
  4077  0015B0  B4D8               	btfsc	status,2,c
  4078  0015B2  0012               	return	
  4079  0015B4  EF2A  F004         	goto	l2951
  4080  0015B8                     __end_of_lcd_printf:
  4081                           	opt stack 0
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           prodl	equ	0xFF3
  4087                           indf2	equ	0xFDF
  4088                           postinc2	equ	0xFDE
  4089                           postdec2	equ	0xFDD
  4090                           fsr2h	equ	0xFDA
  4091                           fsr2l	equ	0xFD9
  4092                           status	equ	0xFD8
  4093                           
  4094 ;; *************** function _lcd_repete_n *****************
  4095 ;; Defined at:
  4096 ;;		line 798 in file "iut_lcd.c"
  4097 ;; Parameters:    Size  Location     Type
  4098 ;;  n               1    wreg     unsigned char 
  4099 ;;  c               1    2[COMRAM] unsigned char 
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;  n               1    3[COMRAM] unsigned char 
  4102 ;; Return value:  Size  Location     Type
  4103 ;;                  1    wreg      void 
  4104 ;; Registers used:
  4105 ;;		wreg, status,2, status,0, cstack
  4106 ;; Tracked objects:
  4107 ;;		On entry : 0/0
  4108 ;;		On exit  : 0/0
  4109 ;;		Unchanged: 0/0
  4110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4111 ;;      Params:         1       0       0       0       0       0       0       0       0
  4112 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4113 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4114 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4115 ;;Total ram usage:        2 bytes
  4116 ;; Hardware stack levels used:    1
  4117 ;; Hardware stack levels required when called:    3
  4118 ;; This function calls:
  4119 ;;		_lcd_write_data_busy
  4120 ;; This function is called by:
  4121 ;;		_lcd_printf
  4122 ;; This function uses a non-reentrant model
  4123 ;;
  4124                           
  4125                           	psect	text5
  4126  00245E                     __ptext5:
  4127                           	opt stack 0
  4128  00245E                     _lcd_repete_n:
  4129                           	opt stack 26
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;incstack = 0
  4133                           ;lcd_repete_n@n stored from wreg
  4134  00245E  6E04               	movwf	lcd_repete_n@n,c
  4135                           
  4136                           ;iut_lcd.c: 799: while (n--) lcd_write_data_busy(c);
  4137  002460  D003               	goto	l2523
  4138  002462                     l2521:
  4139  002462  5003               	movf	lcd_repete_n@c,w,c
  4140  002464  EC19  F012         	call	_lcd_write_data_busy
  4141  002468                     l2523:
  4142  002468  0604               	decf	lcd_repete_n@n,f,c
  4143  00246A  2804               	incf	lcd_repete_n@n,w,c
  4144  00246C  B4D8               	btfsc	status,2,c
  4145  00246E  0012               	return	
  4146  002470  D7F8               	goto	l2521
  4147  002472                     __end_of_lcd_repete_n:
  4148                           	opt stack 0
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           prodl	equ	0xFF3
  4154                           indf2	equ	0xFDF
  4155                           postinc2	equ	0xFDE
  4156                           postdec2	equ	0xFDD
  4157                           fsr2h	equ	0xFDA
  4158                           fsr2l	equ	0xFD9
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function _lcd_putc *****************
  4162 ;; Defined at:
  4163 ;;		line 180 in file "iut_lcd.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;  lettre          1    wreg     unsigned char 
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;  lettre          1    5[COMRAM] unsigned char 
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		wreg, status,2, status,0, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4177 ;;      Params:         0       0       0       0       0       0       0       0       0
  4178 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4179 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4180 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4181 ;;Total ram usage:        1 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    4
  4184 ;; This function calls:
  4185 ;;		_lcd_position
  4186 ;;		_lcd_write_cmd_busy
  4187 ;;		_lcd_write_data_busy
  4188 ;; This function is called by:
  4189 ;;		_lcd_printf
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           	psect	text6
  4194  00220C                     __ptext6:
  4195                           	opt stack 0
  4196  00220C                     _lcd_putc:
  4197                           	opt stack 25
  4198                           
  4199                           ;incstack = 0
  4200                           ;lcd_putc@lettre stored from wreg
  4201  00220C  6E06               	movwf	lcd_putc@lettre,c
  4202                           
  4203                           ;iut_lcd.c: 181: if (lettre >= 0x20) {
  4204  00220E  0E1F               	movlw	31
  4205  002210  6406               	cpfsgt	lcd_putc@lettre,c
  4206  002212  D004               	goto	l2505
  4207                           
  4208                           ;iut_lcd.c: 182: lcd_write_data_busy(lettre);
  4209  002214  5006               	movf	lcd_putc@lettre,w,c
  4210  002216  EC19  F012         	call	_lcd_write_data_busy
  4211                           
  4212                           ;iut_lcd.c: 183: } else if (lettre == '\f') {
  4213  00221A  0012               	return	
  4214  00221C                     l2505:
  4215  00221C  0E0C               	movlw	12
  4216  00221E  1806               	xorwf	lcd_putc@lettre,w,c
  4217  002220  A4D8               	btfss	status,2,c
  4218  002222  D004               	goto	l2509
  4219                           
  4220                           ;iut_lcd.c: 184: lcd_write_cmd_busy(0x01);
  4221  002224  0E01               	movlw	1
  4222  002226  EC24  F012         	call	_lcd_write_cmd_busy
  4223                           
  4224                           ;iut_lcd.c: 185: } else if (lettre == '\n') {
  4225  00222A  0012               	return	
  4226  00222C                     l2509:
  4227  00222C  0E0A               	movlw	10
  4228  00222E  1806               	xorwf	lcd_putc@lettre,w,c
  4229  002230  A4D8               	btfss	status,2,c
  4230  002232  D006               	goto	l2513
  4231                           
  4232                           ;iut_lcd.c: 186: lcd_position(1, 0);
  4233  002234  0E00               	movlw	0
  4234  002236  6E03               	movwf	lcd_position@colonne,c
  4235  002238  0E01               	movlw	1
  4236  00223A  EC0A  F012         	call	_lcd_position
  4237                           
  4238                           ;iut_lcd.c: 187: } else if (lettre == '\b') {
  4239  00223E  0012               	return	
  4240  002240                     l2513:
  4241  002240  0E08               	movlw	8
  4242  002242  1806               	xorwf	lcd_putc@lettre,w,c
  4243  002244  A4D8               	btfss	status,2,c
  4244  002246  D004               	goto	l2517
  4245                           
  4246                           ;iut_lcd.c: 188: lcd_write_cmd_busy(0x10);
  4247  002248  0E10               	movlw	16
  4248  00224A  EC24  F012         	call	_lcd_write_cmd_busy
  4249                           
  4250                           ;iut_lcd.c: 189: } else {
  4251  00224E  0012               	return	
  4252  002250                     l2517:
  4253                           
  4254                           ;iut_lcd.c: 190: lcd_write_data_busy(lettre);
  4255  002250  5006               	movf	lcd_putc@lettre,w,c
  4256  002252  EC19  F012         	call	_lcd_write_data_busy
  4257  002256  0012               	return	
  4258  002258                     __end_of_lcd_putc:
  4259                           	opt stack 0
  4260                           tblptru	equ	0xFF8
  4261                           tblptrh	equ	0xFF7
  4262                           tblptrl	equ	0xFF6
  4263                           tablat	equ	0xFF5
  4264                           prodl	equ	0xFF3
  4265                           indf2	equ	0xFDF
  4266                           postinc2	equ	0xFDE
  4267                           postdec2	equ	0xFDD
  4268                           fsr2h	equ	0xFDA
  4269                           fsr2l	equ	0xFD9
  4270                           status	equ	0xFD8
  4271                           
  4272 ;; *************** function _lcd_write_data_busy *****************
  4273 ;; Defined at:
  4274 ;;		line 758 in file "iut_lcd.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;  c               1    wreg     unsigned char 
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;  c               1    1[COMRAM] unsigned char 
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  1    wreg      void 
  4281 ;; Registers used:
  4282 ;;		wreg, status,2, status,0, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4288 ;;      Params:         0       0       0       0       0       0       0       0       0
  4289 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4290 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4291 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4292 ;;Total ram usage:        1 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    2
  4295 ;; This function calls:
  4296 ;;		_lcd_busy
  4297 ;;		_lcd_write_cmd_data
  4298 ;; This function is called by:
  4299 ;;		_lcd_putc
  4300 ;;		_lcd_printf
  4301 ;;		_lcd_repete_n
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text7
  4306  002432                     __ptext7:
  4307                           	opt stack 0
  4308  002432                     _lcd_write_data_busy:
  4309                           	opt stack 27
  4310                           
  4311                           ;incstack = 0
  4312                           ;lcd_write_data_busy@c stored from wreg
  4313  002432  6E02               	movwf	lcd_write_data_busy@c,c
  4314  002434                     l2459:
  4315  002434  EC2C  F011         	call	_lcd_busy	;wreg free
  4316  002438  0900               	iorlw	0
  4317  00243A  A4D8               	btfss	status,2,c
  4318  00243C  D7FB               	goto	l2459
  4319                           
  4320                           ;iut_lcd.c: 760: PORTDbits.RD1 = 1;
  4321  00243E  8283               	bsf	3971,1,c	;volatile
  4322                           
  4323                           ;iut_lcd.c: 761: lcd_write_cmd_data(c);
  4324  002440  5002               	movf	lcd_write_data_busy@c,w,c
  4325  002442  EC81  F011         	call	_lcd_write_cmd_data
  4326  002446  0012               	return		;funcret
  4327  002448                     __end_of_lcd_write_data_busy:
  4328                           	opt stack 0
  4329                           tblptru	equ	0xFF8
  4330                           tblptrh	equ	0xFF7
  4331                           tblptrl	equ	0xFF6
  4332                           tablat	equ	0xFF5
  4333                           prodl	equ	0xFF3
  4334                           indf2	equ	0xFDF
  4335                           postinc2	equ	0xFDE
  4336                           postdec2	equ	0xFDD
  4337                           fsr2h	equ	0xFDA
  4338                           fsr2l	equ	0xFD9
  4339                           status	equ	0xFD8
  4340                           
  4341 ;; *************** function _lcd_position *****************
  4342 ;; Defined at:
  4343 ;;		line 159 in file "iut_lcd.c"
  4344 ;; Parameters:    Size  Location     Type
  4345 ;;  ligne           1    wreg     unsigned char 
  4346 ;;  colonne         1    2[COMRAM] unsigned char 
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;  ligne           1    3[COMRAM] unsigned char 
  4349 ;;  address         1    4[COMRAM] unsigned char 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  1    wreg      void 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2, status,0, cstack
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4359 ;;      Params:         1       0       0       0       0       0       0       0       0
  4360 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4361 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4362 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4363 ;;Total ram usage:        3 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; Hardware stack levels required when called:    3
  4366 ;; This function calls:
  4367 ;;		_lcd_write_cmd_busy
  4368 ;; This function is called by:
  4369 ;;		_main
  4370 ;;		_lcd_putc
  4371 ;;		_lcd_gotoyx
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text8
  4376  002414                     __ptext8:
  4377                           	opt stack 0
  4378  002414                     _lcd_position:
  4379                           	opt stack 25
  4380                           
  4381                           ;incstack = 0
  4382                           ;lcd_position@ligne stored from wreg
  4383  002414  6E04               	movwf	lcd_position@ligne,c
  4384                           
  4385                           ;iut_lcd.c: 160: char address;
  4386                           ;iut_lcd.c: 162: if (ligne != 0) {
  4387  002416  5004               	movf	lcd_position@ligne,w,c
  4388  002418  B4D8               	btfsc	status,2,c
  4389  00241A  D002               	goto	l2451
  4390                           
  4391                           ;iut_lcd.c: 163: address = 0x40;
  4392  00241C  0E40               	movlw	64
  4393  00241E  D001               	goto	L14
  4394  002420                     l2451:
  4395                           
  4396                           ;iut_lcd.c: 165: address = 0;
  4397  002420  0E00               	movlw	0
  4398  002422                     L14:
  4399  002422  6E05               	movwf	lcd_position@address,c
  4400                           
  4401                           ;iut_lcd.c: 166: }
  4402                           ;iut_lcd.c: 167: address += colonne;
  4403  002424  5003               	movf	lcd_position@colonne,w,c
  4404  002426  2605               	addwf	lcd_position@address,f,c
  4405                           
  4406                           ;iut_lcd.c: 168: lcd_write_cmd_busy(0x80 | address);
  4407  002428  5005               	movf	lcd_position@address,w,c
  4408  00242A  0980               	iorlw	128
  4409  00242C  EC24  F012         	call	_lcd_write_cmd_busy
  4410  002430  0012               	return		;funcret
  4411  002432                     __end_of_lcd_position:
  4412                           	opt stack 0
  4413                           tblptru	equ	0xFF8
  4414                           tblptrh	equ	0xFF7
  4415                           tblptrl	equ	0xFF6
  4416                           tablat	equ	0xFF5
  4417                           prodl	equ	0xFF3
  4418                           indf2	equ	0xFDF
  4419                           postinc2	equ	0xFDE
  4420                           postdec2	equ	0xFDD
  4421                           fsr2h	equ	0xFDA
  4422                           fsr2l	equ	0xFD9
  4423                           status	equ	0xFD8
  4424                           
  4425 ;; *************** function ___lwtoft *****************
  4426 ;; Defined at:
  4427 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;  c               2    8[COMRAM] unsigned int 
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;		None
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  3    8[COMRAM] float 
  4434 ;; Registers used:
  4435 ;;		wreg, status,2, status,0, cstack
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4441 ;;      Params:         3       0       0       0       0       0       0       0       0
  4442 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4443 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4444 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4445 ;;Total ram usage:        3 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    1
  4448 ;; This function calls:
  4449 ;;		___ftpack
  4450 ;; This function is called by:
  4451 ;;		_lcd_printf
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           	psect	text9
  4456  0023AC                     __ptext9:
  4457                           	opt stack 0
  4458  0023AC                     ___lwtoft:
  4459                           	opt stack 28
  4460                           
  4461                           ;incstack = 0
  4462  0023AC  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  4463  0023B0  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  4464  0023B4  6A03               	clrf	___ftpack@arg+2,c
  4465  0023B6  0E8E               	movlw	142
  4466  0023B8  6E04               	movwf	___ftpack@exp,c
  4467  0023BA  0E00               	movlw	0
  4468  0023BC  6E05               	movwf	___ftpack@sign,c
  4469  0023BE  EC54  F00F         	call	___ftpack	;wreg free
  4470  0023C2  C001  F009         	movff	?___ftpack,?___lwtoft
  4471  0023C6  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  4472  0023CA  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  4473  0023CE  0012               	return	
  4474  0023D0                     __end_of___lwtoft:
  4475                           	opt stack 0
  4476                           tblptru	equ	0xFF8
  4477                           tblptrh	equ	0xFF7
  4478                           tblptrl	equ	0xFF6
  4479                           tablat	equ	0xFF5
  4480                           prodl	equ	0xFF3
  4481                           indf2	equ	0xFDF
  4482                           postinc2	equ	0xFDE
  4483                           postdec2	equ	0xFDD
  4484                           fsr2h	equ	0xFDA
  4485                           fsr2l	equ	0xFD9
  4486                           status	equ	0xFD8
  4487                           
  4488 ;; *************** function ___llmod *****************
  4489 ;; Defined at:
  4490 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  4491 ;; Parameters:    Size  Location     Type
  4492 ;;  dividend        4    0[COMRAM] unsigned long 
  4493 ;;  divisor         4    4[COMRAM] unsigned long 
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;  counter         1    8[COMRAM] unsigned char 
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  4    0[COMRAM] unsigned long 
  4498 ;; Registers used:
  4499 ;;		wreg, status,2, status,0
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4505 ;;      Params:         8       0       0       0       0       0       0       0       0
  4506 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4508 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4509 ;;Total ram usage:        9 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; This function calls:
  4512 ;;		Nothing
  4513 ;; This function is called by:
  4514 ;;		_lcd_printf
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text10
  4519  0021A6                     __ptext10:
  4520                           	opt stack 0
  4521  0021A6                     ___llmod:
  4522                           	opt stack 29
  4523                           
  4524                           ;incstack = 0
  4525  0021A6  5005               	movf	___llmod@divisor,w,c
  4526  0021A8  1006               	iorwf	___llmod@divisor+1,w,c
  4527  0021AA  1007               	iorwf	___llmod@divisor+2,w,c
  4528  0021AC  1008               	iorwf	___llmod@divisor+3,w,c
  4529  0021AE  B4D8               	btfsc	status,2,c
  4530  0021B0  D024               	goto	l853
  4531  0021B2  0E01               	movlw	1
  4532  0021B4  6E09               	movwf	___llmod@counter,c
  4533  0021B6  D006               	goto	l2785
  4534  0021B8                     l2783:
  4535  0021B8  90D8               	bcf	status,0,c
  4536  0021BA  3605               	rlcf	___llmod@divisor,f,c
  4537  0021BC  3606               	rlcf	___llmod@divisor+1,f,c
  4538  0021BE  3607               	rlcf	___llmod@divisor+2,f,c
  4539  0021C0  3608               	rlcf	___llmod@divisor+3,f,c
  4540  0021C2  2A09               	incf	___llmod@counter,f,c
  4541  0021C4                     l2785:
  4542  0021C4  AE08               	btfss	___llmod@divisor+3,7,c
  4543  0021C6  D7F8               	goto	l2783
  4544  0021C8                     l2787:
  4545  0021C8  5005               	movf	___llmod@divisor,w,c
  4546  0021CA  5C01               	subwf	___llmod@dividend,w,c
  4547  0021CC  5006               	movf	___llmod@divisor+1,w,c
  4548  0021CE  5802               	subwfb	___llmod@dividend+1,w,c
  4549  0021D0  5007               	movf	___llmod@divisor+2,w,c
  4550  0021D2  5803               	subwfb	___llmod@dividend+2,w,c
  4551  0021D4  5008               	movf	___llmod@divisor+3,w,c
  4552  0021D6  5804               	subwfb	___llmod@dividend+3,w,c
  4553  0021D8  A0D8               	btfss	status,0,c
  4554  0021DA  D008               	goto	l2791
  4555  0021DC  5005               	movf	___llmod@divisor,w,c
  4556  0021DE  5E01               	subwf	___llmod@dividend,f,c
  4557  0021E0  5006               	movf	___llmod@divisor+1,w,c
  4558  0021E2  5A02               	subwfb	___llmod@dividend+1,f,c
  4559  0021E4  5007               	movf	___llmod@divisor+2,w,c
  4560  0021E6  5A03               	subwfb	___llmod@dividend+2,f,c
  4561  0021E8  5008               	movf	___llmod@divisor+3,w,c
  4562  0021EA  5A04               	subwfb	___llmod@dividend+3,f,c
  4563  0021EC                     l2791:
  4564  0021EC  90D8               	bcf	status,0,c
  4565  0021EE  3208               	rrcf	___llmod@divisor+3,f,c
  4566  0021F0  3207               	rrcf	___llmod@divisor+2,f,c
  4567  0021F2  3206               	rrcf	___llmod@divisor+1,f,c
  4568  0021F4  3205               	rrcf	___llmod@divisor,f,c
  4569  0021F6  2E09               	decfsz	___llmod@counter,f,c
  4570  0021F8  D7E7               	goto	l2787
  4571  0021FA                     l853:
  4572  0021FA  C001  F001         	movff	___llmod@dividend,?___llmod
  4573  0021FE  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4574  002202  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4575  002206  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4576  00220A  0012               	return		;funcret
  4577  00220C                     __end_of___llmod:
  4578                           	opt stack 0
  4579                           tblptru	equ	0xFF8
  4580                           tblptrh	equ	0xFF7
  4581                           tblptrl	equ	0xFF6
  4582                           tablat	equ	0xFF5
  4583                           prodl	equ	0xFF3
  4584                           indf2	equ	0xFDF
  4585                           postinc2	equ	0xFDE
  4586                           postdec2	equ	0xFDD
  4587                           fsr2h	equ	0xFDA
  4588                           fsr2l	equ	0xFD9
  4589                           status	equ	0xFD8
  4590                           
  4591 ;; *************** function ___lldiv *****************
  4592 ;; Defined at:
  4593 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;  dividend        4    0[COMRAM] unsigned long 
  4596 ;;  divisor         4    4[COMRAM] unsigned long 
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;  quotient        4    8[COMRAM] unsigned long 
  4599 ;;  counter         1   12[COMRAM] unsigned char 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  4    0[COMRAM] unsigned long 
  4602 ;; Registers used:
  4603 ;;		wreg, status,2, status,0
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4609 ;;      Params:         8       0       0       0       0       0       0       0       0
  4610 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4611 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4612 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4613 ;;Total ram usage:       13 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; This function calls:
  4616 ;;		Nothing
  4617 ;; This function is called by:
  4618 ;;		_lcd_printf
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text11
  4623  002124                     __ptext11:
  4624                           	opt stack 0
  4625  002124                     ___lldiv:
  4626                           	opt stack 29
  4627                           
  4628                           ;incstack = 0
  4629  002124  0E00               	movlw	0
  4630  002126  6E09               	movwf	___lldiv@quotient,c
  4631  002128  0E00               	movlw	0
  4632  00212A  6E0A               	movwf	___lldiv@quotient+1,c
  4633  00212C  0E00               	movlw	0
  4634  00212E  6E0B               	movwf	___lldiv@quotient+2,c
  4635  002130  0E00               	movlw	0
  4636  002132  6E0C               	movwf	___lldiv@quotient+3,c
  4637  002134  5005               	movf	___lldiv@divisor,w,c
  4638  002136  1006               	iorwf	___lldiv@divisor+1,w,c
  4639  002138  1007               	iorwf	___lldiv@divisor+2,w,c
  4640  00213A  1008               	iorwf	___lldiv@divisor+3,w,c
  4641  00213C  B4D8               	btfsc	status,2,c
  4642  00213E  D02A               	goto	l843
  4643  002140  0E01               	movlw	1
  4644  002142  6E0D               	movwf	___lldiv@counter,c
  4645  002144  D006               	goto	l2765
  4646  002146                     l2763:
  4647  002146  90D8               	bcf	status,0,c
  4648  002148  3605               	rlcf	___lldiv@divisor,f,c
  4649  00214A  3606               	rlcf	___lldiv@divisor+1,f,c
  4650  00214C  3607               	rlcf	___lldiv@divisor+2,f,c
  4651  00214E  3608               	rlcf	___lldiv@divisor+3,f,c
  4652  002150  2A0D               	incf	___lldiv@counter,f,c
  4653  002152                     l2765:
  4654  002152  AE08               	btfss	___lldiv@divisor+3,7,c
  4655  002154  D7F8               	goto	l2763
  4656  002156                     l2767:
  4657  002156  90D8               	bcf	status,0,c
  4658  002158  3609               	rlcf	___lldiv@quotient,f,c
  4659  00215A  360A               	rlcf	___lldiv@quotient+1,f,c
  4660  00215C  360B               	rlcf	___lldiv@quotient+2,f,c
  4661  00215E  360C               	rlcf	___lldiv@quotient+3,f,c
  4662  002160  5005               	movf	___lldiv@divisor,w,c
  4663  002162  5C01               	subwf	___lldiv@dividend,w,c
  4664  002164  5006               	movf	___lldiv@divisor+1,w,c
  4665  002166  5802               	subwfb	___lldiv@dividend+1,w,c
  4666  002168  5007               	movf	___lldiv@divisor+2,w,c
  4667  00216A  5803               	subwfb	___lldiv@dividend+2,w,c
  4668  00216C  5008               	movf	___lldiv@divisor+3,w,c
  4669  00216E  5804               	subwfb	___lldiv@dividend+3,w,c
  4670  002170  A0D8               	btfss	status,0,c
  4671  002172  D009               	goto	l2775
  4672  002174  5005               	movf	___lldiv@divisor,w,c
  4673  002176  5E01               	subwf	___lldiv@dividend,f,c
  4674  002178  5006               	movf	___lldiv@divisor+1,w,c
  4675  00217A  5A02               	subwfb	___lldiv@dividend+1,f,c
  4676  00217C  5007               	movf	___lldiv@divisor+2,w,c
  4677  00217E  5A03               	subwfb	___lldiv@dividend+2,f,c
  4678  002180  5008               	movf	___lldiv@divisor+3,w,c
  4679  002182  5A04               	subwfb	___lldiv@dividend+3,f,c
  4680  002184  8009               	bsf	___lldiv@quotient,0,c
  4681  002186                     l2775:
  4682  002186  90D8               	bcf	status,0,c
  4683  002188  3208               	rrcf	___lldiv@divisor+3,f,c
  4684  00218A  3207               	rrcf	___lldiv@divisor+2,f,c
  4685  00218C  3206               	rrcf	___lldiv@divisor+1,f,c
  4686  00218E  3205               	rrcf	___lldiv@divisor,f,c
  4687  002190  2E0D               	decfsz	___lldiv@counter,f,c
  4688  002192  D7E1               	goto	l2767
  4689  002194                     l843:
  4690  002194  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4691  002198  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4692  00219C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4693  0021A0  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4694  0021A4  0012               	return		;funcret
  4695  0021A6                     __end_of___lldiv:
  4696                           	opt stack 0
  4697                           tblptru	equ	0xFF8
  4698                           tblptrh	equ	0xFF7
  4699                           tblptrl	equ	0xFF6
  4700                           tablat	equ	0xFF5
  4701                           prodl	equ	0xFF3
  4702                           indf2	equ	0xFDF
  4703                           postinc2	equ	0xFDE
  4704                           postdec2	equ	0xFDD
  4705                           fsr2h	equ	0xFDA
  4706                           fsr2l	equ	0xFD9
  4707                           status	equ	0xFD8
  4708                           
  4709 ;; *************** function ___fttol *****************
  4710 ;; Defined at:
  4711 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  f1              3    0[COMRAM] float 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  lval            4   10[COMRAM] unsigned long 
  4716 ;;  exp1            1   14[COMRAM] unsigned char 
  4717 ;;  sign1           1    9[COMRAM] unsigned char 
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  4    0[COMRAM] long 
  4720 ;; Registers used:
  4721 ;;		wreg, status,2, status,0
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4727 ;;      Params:         4       0       0       0       0       0       0       0       0
  4728 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4729 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4730 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4731 ;;Total ram usage:       15 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; This function calls:
  4734 ;;		Nothing
  4735 ;; This function is called by:
  4736 ;;		_main
  4737 ;;		_lcd_printf
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text12
  4742  001BDA                     __ptext12:
  4743                           	opt stack 0
  4744  001BDA                     ___fttol:
  4745                           	opt stack 29
  4746                           
  4747                           ;incstack = 0
  4748  001BDA  C003  F005         	movff	___fttol@f1+2,??___fttol
  4749  001BDE  6A06               	clrf	(??___fttol+1)& (0+255),c
  4750  001BE0  6A07               	clrf	(??___fttol+2)& (0+255),c
  4751  001BE2  3402               	rlcf	___fttol@f1+1,w,c
  4752  001BE4  3605               	rlcf	??___fttol& (0+255),f,c
  4753  001BE6  E301               	bnc	u2511
  4754  001BE8  8006               	bsf	(??___fttol+1)& (0+255),0,c
  4755  001BEA                     u2511:
  4756  001BEA  5005               	movf	??___fttol,w,c
  4757  001BEC  6E0F               	movwf	___fttol@exp1,c
  4758  001BEE  500F               	movf	___fttol@exp1,w,c
  4759  001BF0  A4D8               	btfss	status,2,c
  4760  001BF2  D009               	goto	l2717
  4761  001BF4  0E00               	movlw	0
  4762  001BF6  6E01               	movwf	?___fttol,c
  4763  001BF8  0E00               	movlw	0
  4764  001BFA  6E02               	movwf	?___fttol+1,c
  4765  001BFC  0E00               	movlw	0
  4766  001BFE  6E03               	movwf	?___fttol+2,c
  4767  001C00  0E00               	movlw	0
  4768  001C02  6E04               	movwf	?___fttol+3,c
  4769  001C04  0012               	return	
  4770  001C06                     l2717:
  4771  001C06  0E17               	movlw	23
  4772  001C08  6E05               	movwf	??___fttol& (0+255),c
  4773  001C0A  C001  F006         	movff	___fttol@f1,??___fttol+1
  4774  001C0E  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  4775  001C12  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  4776  001C16  2805               	incf	??___fttol,w,c
  4777  001C18  6E09               	movwf	(??___fttol+4)& (0+255),c
  4778  001C1A  D004               	goto	u2530
  4779  001C1C                     u2535:
  4780  001C1C  90D8               	bcf	status,0,c
  4781  001C1E  3208               	rrcf	??___fttol+3,f,c
  4782  001C20  3207               	rrcf	??___fttol+2,f,c
  4783  001C22  3206               	rrcf	??___fttol+1,f,c
  4784  001C24                     u2530:
  4785  001C24  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  4786  001C26  D7FA               	goto	u2535
  4787  001C28  5006               	movf	??___fttol+1,w,c
  4788  001C2A  6E0A               	movwf	___fttol@sign1,c
  4789  001C2C  8E02               	bsf	___fttol@f1+1,7,c
  4790  001C2E  0EFF               	movlw	255
  4791  001C30  1601               	andwf	___fttol@f1,f,c
  4792  001C32  0EFF               	movlw	255
  4793  001C34  1602               	andwf	___fttol@f1+1,f,c
  4794  001C36  0E00               	movlw	0
  4795  001C38  1603               	andwf	___fttol@f1+2,f,c
  4796  001C3A  5001               	movf	___fttol@f1,w,c
  4797  001C3C  6E0B               	movwf	___fttol@lval,c
  4798  001C3E  5002               	movf	___fttol@f1+1,w,c
  4799  001C40  6E0C               	movwf	___fttol@lval+1,c
  4800  001C42  5003               	movf	___fttol@f1+2,w,c
  4801  001C44  6E0D               	movwf	___fttol@lval+2,c
  4802  001C46  6A0E               	clrf	___fttol@lval+3,c
  4803  001C48  0E8E               	movlw	142
  4804  001C4A  5E0F               	subwf	___fttol@exp1,f,c
  4805  001C4C  AE0F               	btfss	___fttol@exp1,7,c
  4806  001C4E  D016               	goto	l2739
  4807  001C50  500F               	movf	___fttol@exp1,w,c
  4808  001C52  0A80               	xorlw	128
  4809  001C54  0F8F               	addlw	143
  4810  001C56  B0D8               	btfsc	status,0,c
  4811  001C58  D009               	goto	l2735
  4812  001C5A  0E00               	movlw	0
  4813  001C5C  6E01               	movwf	?___fttol,c
  4814  001C5E  0E00               	movlw	0
  4815  001C60  6E02               	movwf	?___fttol+1,c
  4816  001C62  0E00               	movlw	0
  4817  001C64  6E03               	movwf	?___fttol+2,c
  4818  001C66  0E00               	movlw	0
  4819  001C68  6E04               	movwf	?___fttol+3,c
  4820  001C6A  0012               	return	
  4821  001C6C                     l2735:
  4822  001C6C  90D8               	bcf	status,0,c
  4823  001C6E  320E               	rrcf	___fttol@lval+3,f,c
  4824  001C70  320D               	rrcf	___fttol@lval+2,f,c
  4825  001C72  320C               	rrcf	___fttol@lval+1,f,c
  4826  001C74  320B               	rrcf	___fttol@lval,f,c
  4827  001C76  3E0F               	incfsz	___fttol@exp1,f,c
  4828  001C78  D7F9               	goto	l2735
  4829  001C7A  D015               	goto	l2749
  4830  001C7C                     l2739:
  4831  001C7C  0E17               	movlw	23
  4832  001C7E  640F               	cpfsgt	___fttol@exp1,c
  4833  001C80  D00F               	goto	l2747
  4834  001C82  0E00               	movlw	0
  4835  001C84  6E01               	movwf	?___fttol,c
  4836  001C86  0E00               	movlw	0
  4837  001C88  6E02               	movwf	?___fttol+1,c
  4838  001C8A  0E00               	movlw	0
  4839  001C8C  6E03               	movwf	?___fttol+2,c
  4840  001C8E  0E00               	movlw	0
  4841  001C90  6E04               	movwf	?___fttol+3,c
  4842  001C92  0012               	return	
  4843  001C94                     l2745:
  4844  001C94  90D8               	bcf	status,0,c
  4845  001C96  360B               	rlcf	___fttol@lval,f,c
  4846  001C98  360C               	rlcf	___fttol@lval+1,f,c
  4847  001C9A  360D               	rlcf	___fttol@lval+2,f,c
  4848  001C9C  360E               	rlcf	___fttol@lval+3,f,c
  4849  001C9E  060F               	decf	___fttol@exp1,f,c
  4850  001CA0                     l2747:
  4851  001CA0  500F               	movf	___fttol@exp1,w,c
  4852  001CA2  A4D8               	btfss	status,2,c
  4853  001CA4  D7F7               	goto	l2745
  4854  001CA6                     l2749:
  4855  001CA6  500A               	movf	___fttol@sign1,w,c
  4856  001CA8  B4D8               	btfsc	status,2,c
  4857  001CAA  D008               	goto	l2753
  4858  001CAC  1E0E               	comf	___fttol@lval+3,f,c
  4859  001CAE  1E0D               	comf	___fttol@lval+2,f,c
  4860  001CB0  1E0C               	comf	___fttol@lval+1,f,c
  4861  001CB2  6C0B               	negf	___fttol@lval,c
  4862  001CB4  0E00               	movlw	0
  4863  001CB6  220C               	addwfc	___fttol@lval+1,f,c
  4864  001CB8  220D               	addwfc	___fttol@lval+2,f,c
  4865  001CBA  220E               	addwfc	___fttol@lval+3,f,c
  4866  001CBC                     l2753:
  4867  001CBC  C00B  F001         	movff	___fttol@lval,?___fttol
  4868  001CC0  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  4869  001CC4  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  4870  001CC8  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  4871  001CCC  0012               	return	
  4872  001CCE                     __end_of___fttol:
  4873                           	opt stack 0
  4874                           tblptru	equ	0xFF8
  4875                           tblptrh	equ	0xFF7
  4876                           tblptrl	equ	0xFF6
  4877                           tablat	equ	0xFF5
  4878                           prodl	equ	0xFF3
  4879                           indf2	equ	0xFDF
  4880                           postinc2	equ	0xFDE
  4881                           postdec2	equ	0xFDD
  4882                           fsr2h	equ	0xFDA
  4883                           fsr2l	equ	0xFD9
  4884                           status	equ	0xFD8
  4885                           
  4886 ;; *************** function ___ftneg *****************
  4887 ;; Defined at:
  4888 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  4889 ;; Parameters:    Size  Location     Type
  4890 ;;  f1              3   12[COMRAM] float 
  4891 ;; Auto vars:     Size  Location     Type
  4892 ;;		None
  4893 ;; Return value:  Size  Location     Type
  4894 ;;                  3   12[COMRAM] float 
  4895 ;; Registers used:
  4896 ;;		wreg, status,2, status,0
  4897 ;; Tracked objects:
  4898 ;;		On entry : 0/0
  4899 ;;		On exit  : 0/0
  4900 ;;		Unchanged: 0/0
  4901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4902 ;;      Params:         3       0       0       0       0       0       0       0       0
  4903 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4905 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4906 ;;Total ram usage:        3 bytes
  4907 ;; Hardware stack levels used:    1
  4908 ;; This function calls:
  4909 ;;		Nothing
  4910 ;; This function is called by:
  4911 ;;		_main
  4912 ;;		_lcd_printf
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           	psect	text13
  4917  0023D0                     __ptext13:
  4918                           	opt stack 0
  4919  0023D0                     ___ftneg:
  4920                           	opt stack 29
  4921                           
  4922                           ;incstack = 0
  4923  0023D0  500D               	movf	___ftneg@f1,w,c
  4924  0023D2  100E               	iorwf	___ftneg@f1+1,w,c
  4925  0023D4  100F               	iorwf	___ftneg@f1+2,w,c
  4926  0023D6  B4D8               	btfsc	status,2,c
  4927  0023D8  D006               	goto	l798
  4928  0023DA  0E00               	movlw	0
  4929  0023DC  1A0D               	xorwf	___ftneg@f1,f,c
  4930  0023DE  0E00               	movlw	0
  4931  0023E0  1A0E               	xorwf	___ftneg@f1+1,f,c
  4932  0023E2  0E80               	movlw	128
  4933  0023E4  1A0F               	xorwf	___ftneg@f1+2,f,c
  4934  0023E6                     l798:
  4935  0023E6  C00D  F00D         	movff	___ftneg@f1,?___ftneg
  4936  0023EA  C00E  F00E         	movff	___ftneg@f1+1,?___ftneg+1
  4937  0023EE  C00F  F00F         	movff	___ftneg@f1+2,?___ftneg+2
  4938  0023F2  0012               	return		;funcret
  4939  0023F4                     __end_of___ftneg:
  4940                           	opt stack 0
  4941                           tblptru	equ	0xFF8
  4942                           tblptrh	equ	0xFF7
  4943                           tblptrl	equ	0xFF6
  4944                           tablat	equ	0xFF5
  4945                           prodl	equ	0xFF3
  4946                           indf2	equ	0xFDF
  4947                           postinc2	equ	0xFDE
  4948                           postdec2	equ	0xFDD
  4949                           fsr2h	equ	0xFDA
  4950                           fsr2l	equ	0xFD9
  4951                           status	equ	0xFD8
  4952                           
  4953 ;; *************** function ___ftmul *****************
  4954 ;; Defined at:
  4955 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;  f1              3   27[COMRAM] float 
  4958 ;;  f2              3   30[COMRAM] float 
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  4961 ;;  sign            1   41[COMRAM] unsigned char 
  4962 ;;  cntr            1   40[COMRAM] unsigned char 
  4963 ;;  exp             1   36[COMRAM] unsigned char 
  4964 ;; Return value:  Size  Location     Type
  4965 ;;                  3   27[COMRAM] float 
  4966 ;; Registers used:
  4967 ;;		wreg, status,2, status,0, cstack
  4968 ;; Tracked objects:
  4969 ;;		On entry : 0/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4973 ;;      Params:         6       0       0       0       0       0       0       0       0
  4974 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4975 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4976 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4977 ;;Total ram usage:       15 bytes
  4978 ;; Hardware stack levels used:    1
  4979 ;; Hardware stack levels required when called:    1
  4980 ;; This function calls:
  4981 ;;		___ftpack
  4982 ;; This function is called by:
  4983 ;;		_main
  4984 ;;		_lcd_printf
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           	psect	text14
  4989  001CCE                     __ptext14:
  4990                           	opt stack 0
  4991  001CCE                     ___ftmul:
  4992                           	opt stack 28
  4993                           
  4994                           ;incstack = 0
  4995  001CCE  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  4996  001CD2  6A23               	clrf	(??___ftmul+1)& (0+255),c
  4997  001CD4  6A24               	clrf	(??___ftmul+2)& (0+255),c
  4998  001CD6  341D               	rlcf	___ftmul@f1+1,w,c
  4999  001CD8  3622               	rlcf	??___ftmul& (0+255),f,c
  5000  001CDA  E301               	bnc	u2411
  5001  001CDC  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  5002  001CDE                     u2411:
  5003  001CDE  5022               	movf	??___ftmul,w,c
  5004  001CE0  6E25               	movwf	___ftmul@exp,c
  5005  001CE2  5025               	movf	___ftmul@exp,w,c
  5006  001CE4  A4D8               	btfss	status,2,c
  5007  001CE6  D007               	goto	l2647
  5008  001CE8  0E00               	movlw	0
  5009  001CEA  6E1C               	movwf	?___ftmul,c
  5010  001CEC  0E00               	movlw	0
  5011  001CEE  6E1D               	movwf	?___ftmul+1,c
  5012  001CF0  0E00               	movlw	0
  5013  001CF2  6E1E               	movwf	?___ftmul+2,c
  5014  001CF4  0012               	return	
  5015  001CF6                     l2647:
  5016  001CF6  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  5017  001CFA  6A23               	clrf	(??___ftmul+1)& (0+255),c
  5018  001CFC  6A24               	clrf	(??___ftmul+2)& (0+255),c
  5019  001CFE  3420               	rlcf	___ftmul@f2+1,w,c
  5020  001D00  3622               	rlcf	??___ftmul& (0+255),f,c
  5021  001D02  E301               	bnc	u2431
  5022  001D04  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  5023  001D06                     u2431:
  5024  001D06  5022               	movf	??___ftmul,w,c
  5025  001D08  6E2A               	movwf	___ftmul@sign,c
  5026  001D0A  502A               	movf	___ftmul@sign,w,c
  5027  001D0C  A4D8               	btfss	status,2,c
  5028  001D0E  D007               	goto	l2653
  5029  001D10  0E00               	movlw	0
  5030  001D12  6E1C               	movwf	?___ftmul,c
  5031  001D14  0E00               	movlw	0
  5032  001D16  6E1D               	movwf	?___ftmul+1,c
  5033  001D18  0E00               	movlw	0
  5034  001D1A  6E1E               	movwf	?___ftmul+2,c
  5035  001D1C  0012               	return	
  5036  001D1E                     l2653:
  5037  001D1E  502A               	movf	___ftmul@sign,w,c
  5038  001D20  0F7B               	addlw	123
  5039  001D22  2625               	addwf	___ftmul@exp,f,c
  5040  001D24  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  5041  001D28  5021               	movf	___ftmul@f2+2,w,c
  5042  001D2A  1A2A               	xorwf	___ftmul@sign,f,c
  5043  001D2C  0E80               	movlw	128
  5044  001D2E  162A               	andwf	___ftmul@sign,f,c
  5045  001D30  8E1D               	bsf	___ftmul@f1+1,7,c
  5046  001D32  8E20               	bsf	___ftmul@f2+1,7,c
  5047  001D34  0EFF               	movlw	255
  5048  001D36  161F               	andwf	___ftmul@f2,f,c
  5049  001D38  0EFF               	movlw	255
  5050  001D3A  1620               	andwf	___ftmul@f2+1,f,c
  5051  001D3C  0E00               	movlw	0
  5052  001D3E  1621               	andwf	___ftmul@f2+2,f,c
  5053  001D40  0E00               	movlw	0
  5054  001D42  6E26               	movwf	___ftmul@f3_as_product,c
  5055  001D44  0E00               	movlw	0
  5056  001D46  6E27               	movwf	___ftmul@f3_as_product+1,c
  5057  001D48  0E00               	movlw	0
  5058  001D4A  6E28               	movwf	___ftmul@f3_as_product+2,c
  5059  001D4C  0E07               	movlw	7
  5060  001D4E  6E29               	movwf	___ftmul@cntr,c
  5061  001D50                     l2667:
  5062  001D50  A01C               	btfss	___ftmul@f1,0,c
  5063  001D52  D006               	goto	l2671
  5064  001D54  501F               	movf	___ftmul@f2,w,c
  5065  001D56  2626               	addwf	___ftmul@f3_as_product,f,c
  5066  001D58  5020               	movf	___ftmul@f2+1,w,c
  5067  001D5A  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  5068  001D5C  5021               	movf	___ftmul@f2+2,w,c
  5069  001D5E  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5070  001D60                     l2671:
  5071  001D60  90D8               	bcf	status,0,c
  5072  001D62  321E               	rrcf	___ftmul@f1+2,f,c
  5073  001D64  321D               	rrcf	___ftmul@f1+1,f,c
  5074  001D66  321C               	rrcf	___ftmul@f1,f,c
  5075  001D68  90D8               	bcf	status,0,c
  5076  001D6A  361F               	rlcf	___ftmul@f2,f,c
  5077  001D6C  3620               	rlcf	___ftmul@f2+1,f,c
  5078  001D6E  3621               	rlcf	___ftmul@f2+2,f,c
  5079  001D70  2E29               	decfsz	___ftmul@cntr,f,c
  5080  001D72  D7EE               	goto	l2667
  5081  001D74  0E09               	movlw	9
  5082  001D76  6E29               	movwf	___ftmul@cntr,c
  5083  001D78                     l2677:
  5084  001D78  A01C               	btfss	___ftmul@f1,0,c
  5085  001D7A  D006               	goto	l2681
  5086  001D7C  501F               	movf	___ftmul@f2,w,c
  5087  001D7E  2626               	addwf	___ftmul@f3_as_product,f,c
  5088  001D80  5020               	movf	___ftmul@f2+1,w,c
  5089  001D82  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  5090  001D84  5021               	movf	___ftmul@f2+2,w,c
  5091  001D86  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5092  001D88                     l2681:
  5093  001D88  90D8               	bcf	status,0,c
  5094  001D8A  321E               	rrcf	___ftmul@f1+2,f,c
  5095  001D8C  321D               	rrcf	___ftmul@f1+1,f,c
  5096  001D8E  321C               	rrcf	___ftmul@f1,f,c
  5097  001D90  90D8               	bcf	status,0,c
  5098  001D92  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  5099  001D94  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  5100  001D96  3226               	rrcf	___ftmul@f3_as_product,f,c
  5101  001D98  2E29               	decfsz	___ftmul@cntr,f,c
  5102  001D9A  D7EE               	goto	l2677
  5103  001D9C  C026  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5104  001DA0  C027  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5105  001DA4  C028  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5106  001DA8  C025  F004         	movff	___ftmul@exp,___ftpack@exp
  5107  001DAC  C02A  F005         	movff	___ftmul@sign,___ftpack@sign
  5108  001DB0  EC54  F00F         	call	___ftpack	;wreg free
  5109  001DB4  C001  F01C         	movff	?___ftpack,?___ftmul
  5110  001DB8  C002  F01D         	movff	?___ftpack+1,?___ftmul+1
  5111  001DBC  C003  F01E         	movff	?___ftpack+2,?___ftmul+2
  5112  001DC0  0012               	return	
  5113  001DC2                     __end_of___ftmul:
  5114                           	opt stack 0
  5115                           tblptru	equ	0xFF8
  5116                           tblptrh	equ	0xFF7
  5117                           tblptrl	equ	0xFF6
  5118                           tablat	equ	0xFF5
  5119                           prodl	equ	0xFF3
  5120                           indf2	equ	0xFDF
  5121                           postinc2	equ	0xFDE
  5122                           postdec2	equ	0xFDD
  5123                           fsr2h	equ	0xFDA
  5124                           fsr2l	equ	0xFD9
  5125                           status	equ	0xFD8
  5126                           
  5127 ;; *************** function ___ftge *****************
  5128 ;; Defined at:
  5129 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  5130 ;; Parameters:    Size  Location     Type
  5131 ;;  ff1             3    0[COMRAM] float 
  5132 ;;  ff2             3    3[COMRAM] float 
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;		None
  5135 ;; Return value:  Size  Location     Type
  5136 ;;		None               void
  5137 ;; Registers used:
  5138 ;;		wreg, status,2, status,0
  5139 ;; Tracked objects:
  5140 ;;		On entry : 0/0
  5141 ;;		On exit  : 0/0
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5144 ;;      Params:         6       0       0       0       0       0       0       0       0
  5145 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5146 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5147 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5148 ;;Total ram usage:        9 bytes
  5149 ;; Hardware stack levels used:    1
  5150 ;; This function calls:
  5151 ;;		Nothing
  5152 ;; This function is called by:
  5153 ;;		_lcd_printf
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           	psect	text15
  5158  002094                     __ptext15:
  5159                           	opt stack 0
  5160  002094                     ___ftge:
  5161                           	opt stack 29
  5162                           
  5163                           ;incstack = 0
  5164  002094  AE03               	btfss	___ftge@ff1+2,7,c
  5165  002096  D016               	goto	l2693
  5166  002098  C001  F007         	movff	___ftge@ff1,??___ftge
  5167  00209C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5168  0020A0  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5169  0020A4  1E07               	comf	??___ftge,f,c
  5170  0020A6  1E08               	comf	??___ftge+1,f,c
  5171  0020A8  1E09               	comf	??___ftge+2,f,c
  5172  0020AA  2A07               	incf	??___ftge,f,c
  5173  0020AC  0E00               	movlw	0
  5174  0020AE  2208               	addwfc	??___ftge+1,f,c
  5175  0020B0  2209               	addwfc	??___ftge+2,f,c
  5176  0020B2  0E00               	movlw	0
  5177  0020B4  2407               	addwf	??___ftge,w,c
  5178  0020B6  6E01               	movwf	___ftge@ff1,c
  5179  0020B8  0E00               	movlw	0
  5180  0020BA  2008               	addwfc	??___ftge+1,w,c
  5181  0020BC  6E02               	movwf	___ftge@ff1+1,c
  5182  0020BE  0E80               	movlw	128
  5183  0020C0  2009               	addwfc	??___ftge+2,w,c
  5184  0020C2  6E03               	movwf	___ftge@ff1+2,c
  5185  0020C4                     l2693:
  5186  0020C4  AE06               	btfss	___ftge@ff2+2,7,c
  5187  0020C6  D016               	goto	l2697
  5188  0020C8  C004  F007         	movff	___ftge@ff2,??___ftge
  5189  0020CC  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5190  0020D0  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5191  0020D4  1E07               	comf	??___ftge,f,c
  5192  0020D6  1E08               	comf	??___ftge+1,f,c
  5193  0020D8  1E09               	comf	??___ftge+2,f,c
  5194  0020DA  2A07               	incf	??___ftge,f,c
  5195  0020DC  0E00               	movlw	0
  5196  0020DE  2208               	addwfc	??___ftge+1,f,c
  5197  0020E0  2209               	addwfc	??___ftge+2,f,c
  5198  0020E2  0E00               	movlw	0
  5199  0020E4  2407               	addwf	??___ftge,w,c
  5200  0020E6  6E04               	movwf	___ftge@ff2,c
  5201  0020E8  0E00               	movlw	0
  5202  0020EA  2008               	addwfc	??___ftge+1,w,c
  5203  0020EC  6E05               	movwf	___ftge@ff2+1,c
  5204  0020EE  0E80               	movlw	128
  5205  0020F0  2009               	addwfc	??___ftge+2,w,c
  5206  0020F2  6E06               	movwf	___ftge@ff2+2,c
  5207  0020F4                     l2697:
  5208  0020F4  0E00               	movlw	0
  5209  0020F6  1A01               	xorwf	___ftge@ff1,f,c
  5210  0020F8  0E00               	movlw	0
  5211  0020FA  1A02               	xorwf	___ftge@ff1+1,f,c
  5212  0020FC  0E80               	movlw	128
  5213  0020FE  1A03               	xorwf	___ftge@ff1+2,f,c
  5214  002100  0E00               	movlw	0
  5215  002102  1A04               	xorwf	___ftge@ff2,f,c
  5216  002104  0E00               	movlw	0
  5217  002106  1A05               	xorwf	___ftge@ff2+1,f,c
  5218  002108  0E80               	movlw	128
  5219  00210A  1A06               	xorwf	___ftge@ff2+2,f,c
  5220  00210C  5004               	movf	___ftge@ff2,w,c
  5221  00210E  5C01               	subwf	___ftge@ff1,w,c
  5222  002110  5005               	movf	___ftge@ff2+1,w,c
  5223  002112  5802               	subwfb	___ftge@ff1+1,w,c
  5224  002114  5006               	movf	___ftge@ff2+2,w,c
  5225  002116  5803               	subwfb	___ftge@ff1+2,w,c
  5226  002118  B0D8               	btfsc	status,0,c
  5227  00211A  D002               	goto	l2703
  5228  00211C  90D8               	bcf	status,0,c
  5229  00211E  0012               	return	
  5230  002120                     l2703:
  5231  002120  80D8               	bsf	status,0,c
  5232  002122  0012               	return	
  5233  002124                     __end_of___ftge:
  5234                           	opt stack 0
  5235                           tblptru	equ	0xFF8
  5236                           tblptrh	equ	0xFF7
  5237                           tblptrl	equ	0xFF6
  5238                           tablat	equ	0xFF5
  5239                           prodl	equ	0xFF3
  5240                           indf2	equ	0xFDF
  5241                           postinc2	equ	0xFDE
  5242                           postdec2	equ	0xFDD
  5243                           fsr2h	equ	0xFDA
  5244                           fsr2l	equ	0xFD9
  5245                           status	equ	0xFD8
  5246                           
  5247 ;; *************** function ___ftdiv *****************
  5248 ;; Defined at:
  5249 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  5250 ;; Parameters:    Size  Location     Type
  5251 ;;  f1              3   42[COMRAM] float 
  5252 ;;  f2              3   45[COMRAM] float 
  5253 ;; Auto vars:     Size  Location     Type
  5254 ;;  f3              3   52[COMRAM] float 
  5255 ;;  sign            1   56[COMRAM] unsigned char 
  5256 ;;  exp             1   55[COMRAM] unsigned char 
  5257 ;;  cntr            1   51[COMRAM] unsigned char 
  5258 ;; Return value:  Size  Location     Type
  5259 ;;                  3   42[COMRAM] float 
  5260 ;; Registers used:
  5261 ;;		wreg, status,2, status,0, cstack
  5262 ;; Tracked objects:
  5263 ;;		On entry : 0/0
  5264 ;;		On exit  : 0/0
  5265 ;;		Unchanged: 0/0
  5266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5267 ;;      Params:         6       0       0       0       0       0       0       0       0
  5268 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5269 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5270 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5271 ;;Total ram usage:       15 bytes
  5272 ;; Hardware stack levels used:    1
  5273 ;; Hardware stack levels required when called:    1
  5274 ;; This function calls:
  5275 ;;		___ftpack
  5276 ;; This function is called by:
  5277 ;;		_main
  5278 ;;		_lcd_printf
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           	psect	text16
  5283  001DC2                     __ptext16:
  5284                           	opt stack 0
  5285  001DC2                     ___ftdiv:
  5286                           	opt stack 28
  5287                           
  5288                           ;incstack = 0
  5289  001DC2  C02D  F031         	movff	___ftdiv@f1+2,??___ftdiv
  5290  001DC6  6A32               	clrf	(??___ftdiv+1)& (0+255),c
  5291  001DC8  6A33               	clrf	(??___ftdiv+2)& (0+255),c
  5292  001DCA  342C               	rlcf	___ftdiv@f1+1,w,c
  5293  001DCC  3631               	rlcf	??___ftdiv& (0+255),f,c
  5294  001DCE  E301               	bnc	u2361
  5295  001DD0  8032               	bsf	(??___ftdiv+1)& (0+255),0,c
  5296  001DD2                     u2361:
  5297  001DD2  5031               	movf	??___ftdiv,w,c
  5298  001DD4  6E38               	movwf	___ftdiv@exp,c
  5299  001DD6  5038               	movf	___ftdiv@exp,w,c
  5300  001DD8  A4D8               	btfss	status,2,c
  5301  001DDA  D007               	goto	l2601
  5302  001DDC  0E00               	movlw	0
  5303  001DDE  6E2B               	movwf	?___ftdiv,c
  5304  001DE0  0E00               	movlw	0
  5305  001DE2  6E2C               	movwf	?___ftdiv+1,c
  5306  001DE4  0E00               	movlw	0
  5307  001DE6  6E2D               	movwf	?___ftdiv+2,c
  5308  001DE8  0012               	return	
  5309  001DEA                     l2601:
  5310  001DEA  C030  F031         	movff	___ftdiv@f2+2,??___ftdiv
  5311  001DEE  6A32               	clrf	(??___ftdiv+1)& (0+255),c
  5312  001DF0  6A33               	clrf	(??___ftdiv+2)& (0+255),c
  5313  001DF2  342F               	rlcf	___ftdiv@f2+1,w,c
  5314  001DF4  3631               	rlcf	??___ftdiv& (0+255),f,c
  5315  001DF6  E301               	bnc	u2381
  5316  001DF8  8032               	bsf	(??___ftdiv+1)& (0+255),0,c
  5317  001DFA                     u2381:
  5318  001DFA  5031               	movf	??___ftdiv,w,c
  5319  001DFC  6E39               	movwf	___ftdiv@sign,c
  5320  001DFE  5039               	movf	___ftdiv@sign,w,c
  5321  001E00  A4D8               	btfss	status,2,c
  5322  001E02  D007               	goto	l2607
  5323  001E04  0E00               	movlw	0
  5324  001E06  6E2B               	movwf	?___ftdiv,c
  5325  001E08  0E00               	movlw	0
  5326  001E0A  6E2C               	movwf	?___ftdiv+1,c
  5327  001E0C  0E00               	movlw	0
  5328  001E0E  6E2D               	movwf	?___ftdiv+2,c
  5329  001E10  0012               	return	
  5330  001E12                     l2607:
  5331  001E12  0E00               	movlw	0
  5332  001E14  6E35               	movwf	___ftdiv@f3,c
  5333  001E16  0E00               	movlw	0
  5334  001E18  6E36               	movwf	___ftdiv@f3+1,c
  5335  001E1A  0E00               	movlw	0
  5336  001E1C  6E37               	movwf	___ftdiv@f3+2,c
  5337  001E1E  5039               	movf	___ftdiv@sign,w,c
  5338  001E20  0F89               	addlw	137
  5339  001E22  5E38               	subwf	___ftdiv@exp,f,c
  5340  001E24  C02D  F039         	movff	___ftdiv@f1+2,___ftdiv@sign
  5341  001E28  5030               	movf	___ftdiv@f2+2,w,c
  5342  001E2A  1A39               	xorwf	___ftdiv@sign,f,c
  5343  001E2C  0E80               	movlw	128
  5344  001E2E  1639               	andwf	___ftdiv@sign,f,c
  5345  001E30  8E2C               	bsf	___ftdiv@f1+1,7,c
  5346  001E32  0EFF               	movlw	255
  5347  001E34  162B               	andwf	___ftdiv@f1,f,c
  5348  001E36  0EFF               	movlw	255
  5349  001E38  162C               	andwf	___ftdiv@f1+1,f,c
  5350  001E3A  0E00               	movlw	0
  5351  001E3C  162D               	andwf	___ftdiv@f1+2,f,c
  5352  001E3E  8E2F               	bsf	___ftdiv@f2+1,7,c
  5353  001E40  0EFF               	movlw	255
  5354  001E42  162E               	andwf	___ftdiv@f2,f,c
  5355  001E44  0EFF               	movlw	255
  5356  001E46  162F               	andwf	___ftdiv@f2+1,f,c
  5357  001E48  0E00               	movlw	0
  5358  001E4A  1630               	andwf	___ftdiv@f2+2,f,c
  5359  001E4C  0E18               	movlw	24
  5360  001E4E  6E34               	movwf	___ftdiv@cntr,c
  5361  001E50                     l2627:
  5362  001E50  90D8               	bcf	status,0,c
  5363  001E52  3635               	rlcf	___ftdiv@f3,f,c
  5364  001E54  3636               	rlcf	___ftdiv@f3+1,f,c
  5365  001E56  3637               	rlcf	___ftdiv@f3+2,f,c
  5366  001E58  502E               	movf	___ftdiv@f2,w,c
  5367  001E5A  5C2B               	subwf	___ftdiv@f1,w,c
  5368  001E5C  502F               	movf	___ftdiv@f2+1,w,c
  5369  001E5E  582C               	subwfb	___ftdiv@f1+1,w,c
  5370  001E60  5030               	movf	___ftdiv@f2+2,w,c
  5371  001E62  582D               	subwfb	___ftdiv@f1+2,w,c
  5372  001E64  A0D8               	btfss	status,0,c
  5373  001E66  D007               	goto	l776
  5374  001E68  502E               	movf	___ftdiv@f2,w,c
  5375  001E6A  5E2B               	subwf	___ftdiv@f1,f,c
  5376  001E6C  502F               	movf	___ftdiv@f2+1,w,c
  5377  001E6E  5A2C               	subwfb	___ftdiv@f1+1,f,c
  5378  001E70  5030               	movf	___ftdiv@f2+2,w,c
  5379  001E72  5A2D               	subwfb	___ftdiv@f1+2,f,c
  5380  001E74  8035               	bsf	___ftdiv@f3,0,c
  5381  001E76                     l776:
  5382  001E76  90D8               	bcf	status,0,c
  5383  001E78  362B               	rlcf	___ftdiv@f1,f,c
  5384  001E7A  362C               	rlcf	___ftdiv@f1+1,f,c
  5385  001E7C  362D               	rlcf	___ftdiv@f1+2,f,c
  5386  001E7E  2E34               	decfsz	___ftdiv@cntr,f,c
  5387  001E80  D7E7               	goto	l2627
  5388  001E82  C035  F001         	movff	___ftdiv@f3,___ftpack@arg
  5389  001E86  C036  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5390  001E8A  C037  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5391  001E8E  C038  F004         	movff	___ftdiv@exp,___ftpack@exp
  5392  001E92  C039  F005         	movff	___ftdiv@sign,___ftpack@sign
  5393  001E96  EC54  F00F         	call	___ftpack	;wreg free
  5394  001E9A  C001  F02B         	movff	?___ftpack,?___ftdiv
  5395  001E9E  C002  F02C         	movff	?___ftpack+1,?___ftdiv+1
  5396  001EA2  C003  F02D         	movff	?___ftpack+2,?___ftdiv+2
  5397  001EA6  0012               	return	
  5398  001EA8                     __end_of___ftdiv:
  5399                           	opt stack 0
  5400                           tblptru	equ	0xFF8
  5401                           tblptrh	equ	0xFF7
  5402                           tblptrl	equ	0xFF6
  5403                           tablat	equ	0xFF5
  5404                           prodl	equ	0xFF3
  5405                           indf2	equ	0xFDF
  5406                           postinc2	equ	0xFDE
  5407                           postdec2	equ	0xFDD
  5408                           fsr2h	equ	0xFDA
  5409                           fsr2l	equ	0xFD9
  5410                           status	equ	0xFD8
  5411                           
  5412 ;; *************** function ___ftadd *****************
  5413 ;; Defined at:
  5414 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;  f1              3   15[COMRAM] float 
  5417 ;;  f2              3   18[COMRAM] float 
  5418 ;; Auto vars:     Size  Location     Type
  5419 ;;  exp1            1   26[COMRAM] unsigned char 
  5420 ;;  exp2            1   25[COMRAM] unsigned char 
  5421 ;;  sign            1   24[COMRAM] unsigned char 
  5422 ;; Return value:  Size  Location     Type
  5423 ;;                  3   15[COMRAM] float 
  5424 ;; Registers used:
  5425 ;;		wreg, status,2, status,0, cstack
  5426 ;; Tracked objects:
  5427 ;;		On entry : 0/0
  5428 ;;		On exit  : 0/0
  5429 ;;		Unchanged: 0/0
  5430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5431 ;;      Params:         6       0       0       0       0       0       0       0       0
  5432 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5433 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5434 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5435 ;;Total ram usage:       12 bytes
  5436 ;; Hardware stack levels used:    1
  5437 ;; Hardware stack levels required when called:    1
  5438 ;; This function calls:
  5439 ;;		___ftpack
  5440 ;; This function is called by:
  5441 ;;		_main
  5442 ;;		_lcd_printf
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           	psect	text17
  5447  001A2E                     __ptext17:
  5448                           	opt stack 0
  5449  001A2E                     ___ftadd:
  5450                           	opt stack 28
  5451                           
  5452                           ;incstack = 0
  5453  001A2E  C012  F016         	movff	___ftadd@f1+2,??___ftadd
  5454  001A32  6A17               	clrf	(??___ftadd+1)& (0+255),c
  5455  001A34  6A18               	clrf	(??___ftadd+2)& (0+255),c
  5456  001A36  3411               	rlcf	___ftadd@f1+1,w,c
  5457  001A38  3616               	rlcf	??___ftadd& (0+255),f,c
  5458  001A3A  E301               	bnc	u2151
  5459  001A3C  8017               	bsf	(??___ftadd+1)& (0+255),0,c
  5460  001A3E                     u2151:
  5461  001A3E  5016               	movf	??___ftadd,w,c
  5462  001A40  6E1B               	movwf	___ftadd@exp1,c
  5463  001A42  C015  F016         	movff	___ftadd@f2+2,??___ftadd
  5464  001A46  6A17               	clrf	(??___ftadd+1)& (0+255),c
  5465  001A48  6A18               	clrf	(??___ftadd+2)& (0+255),c
  5466  001A4A  3414               	rlcf	___ftadd@f2+1,w,c
  5467  001A4C  3616               	rlcf	??___ftadd& (0+255),f,c
  5468  001A4E  E301               	bnc	u2161
  5469  001A50  8017               	bsf	(??___ftadd+1)& (0+255),0,c
  5470  001A52                     u2161:
  5471  001A52  5016               	movf	??___ftadd,w,c
  5472  001A54  6E1A               	movwf	___ftadd@exp2,c
  5473  001A56  501B               	movf	___ftadd@exp1,w,c
  5474  001A58  B4D8               	btfsc	status,2,c
  5475  001A5A  D00B               	goto	l741
  5476  001A5C  501A               	movf	___ftadd@exp2,w,c
  5477  001A5E  5C1B               	subwf	___ftadd@exp1,w,c
  5478  001A60  B0D8               	btfsc	status,0,c
  5479  001A62  D00E               	goto	l2533
  5480  001A64  501B               	movf	___ftadd@exp1,w,c
  5481  001A66  0800               	sublw	0
  5482  001A68  241A               	addwf	___ftadd@exp2,w,c
  5483  001A6A  6E16               	movwf	??___ftadd& (0+255),c
  5484  001A6C  0E18               	movlw	24
  5485  001A6E  6416               	cpfsgt	??___ftadd,c
  5486  001A70  D007               	goto	l2533
  5487  001A72                     l741:
  5488  001A72  C013  F010         	movff	___ftadd@f2,?___ftadd
  5489  001A76  C014  F011         	movff	___ftadd@f2+1,?___ftadd+1
  5490  001A7A  C015  F012         	movff	___ftadd@f2+2,?___ftadd+2
  5491  001A7E  0012               	return	
  5492  001A80                     l2533:
  5493  001A80  501A               	movf	___ftadd@exp2,w,c
  5494  001A82  B4D8               	btfsc	status,2,c
  5495  001A84  D00B               	goto	l745
  5496  001A86  501B               	movf	___ftadd@exp1,w,c
  5497  001A88  5C1A               	subwf	___ftadd@exp2,w,c
  5498  001A8A  B0D8               	btfsc	status,0,c
  5499  001A8C  D00E               	goto	l2539
  5500  001A8E  501A               	movf	___ftadd@exp2,w,c
  5501  001A90  0800               	sublw	0
  5502  001A92  241B               	addwf	___ftadd@exp1,w,c
  5503  001A94  6E16               	movwf	??___ftadd& (0+255),c
  5504  001A96  0E18               	movlw	24
  5505  001A98  6416               	cpfsgt	??___ftadd,c
  5506  001A9A  D007               	goto	l2539
  5507  001A9C                     l745:
  5508  001A9C  C010  F010         	movff	___ftadd@f1,?___ftadd
  5509  001AA0  C011  F011         	movff	___ftadd@f1+1,?___ftadd+1
  5510  001AA4  C012  F012         	movff	___ftadd@f1+2,?___ftadd+2
  5511  001AA8  0012               	return	
  5512  001AAA                     l2539:
  5513  001AAA  0E06               	movlw	6
  5514  001AAC  6E19               	movwf	___ftadd@sign,c
  5515  001AAE  BE12               	btfsc	___ftadd@f1+2,7,c
  5516  001AB0  8E19               	bsf	___ftadd@sign,7,c
  5517  001AB2  BE15               	btfsc	___ftadd@f2+2,7,c
  5518  001AB4  8C19               	bsf	___ftadd@sign,6,c
  5519  001AB6  8E11               	bsf	___ftadd@f1+1,7,c
  5520  001AB8  0EFF               	movlw	255
  5521  001ABA  1610               	andwf	___ftadd@f1,f,c
  5522  001ABC  0EFF               	movlw	255
  5523  001ABE  1611               	andwf	___ftadd@f1+1,f,c
  5524  001AC0  0E00               	movlw	0
  5525  001AC2  1612               	andwf	___ftadd@f1+2,f,c
  5526  001AC4  8E14               	bsf	___ftadd@f2+1,7,c
  5527  001AC6  0EFF               	movlw	255
  5528  001AC8  1613               	andwf	___ftadd@f2,f,c
  5529  001ACA  0EFF               	movlw	255
  5530  001ACC  1614               	andwf	___ftadd@f2+1,f,c
  5531  001ACE  0E00               	movlw	0
  5532  001AD0  1615               	andwf	___ftadd@f2+2,f,c
  5533  001AD2  501A               	movf	___ftadd@exp2,w,c
  5534  001AD4  5C1B               	subwf	___ftadd@exp1,w,c
  5535  001AD6  B0D8               	btfsc	status,0,c
  5536  001AD8  D01B               	goto	l2565
  5537  001ADA                     l2555:
  5538  001ADA  90D8               	bcf	status,0,c
  5539  001ADC  3613               	rlcf	___ftadd@f2,f,c
  5540  001ADE  3614               	rlcf	___ftadd@f2+1,f,c
  5541  001AE0  3615               	rlcf	___ftadd@f2+2,f,c
  5542  001AE2  061A               	decf	___ftadd@exp2,f,c
  5543  001AE4  501B               	movf	___ftadd@exp1,w,c
  5544  001AE6  181A               	xorwf	___ftadd@exp2,w,c
  5545  001AE8  B4D8               	btfsc	status,2,c
  5546  001AEA  D00D               	goto	l2563
  5547  001AEC  0619               	decf	___ftadd@sign,f,c
  5548  001AEE  C019  F016         	movff	___ftadd@sign,??___ftadd
  5549  001AF2  0E07               	movlw	7
  5550  001AF4  1616               	andwf	??___ftadd,f,c
  5551  001AF6  B4D8               	btfsc	status,2,c
  5552  001AF8  D006               	goto	l2563
  5553  001AFA  D7EF               	goto	l2555
  5554  001AFC                     l2561:
  5555  001AFC  90D8               	bcf	status,0,c
  5556  001AFE  3212               	rrcf	___ftadd@f1+2,f,c
  5557  001B00  3211               	rrcf	___ftadd@f1+1,f,c
  5558  001B02  3210               	rrcf	___ftadd@f1,f,c
  5559  001B04  2A1B               	incf	___ftadd@exp1,f,c
  5560  001B06                     l2563:
  5561  001B06  501A               	movf	___ftadd@exp2,w,c
  5562  001B08  181B               	xorwf	___ftadd@exp1,w,c
  5563  001B0A  B4D8               	btfsc	status,2,c
  5564  001B0C  D01F               	goto	l756
  5565  001B0E  D7F6               	goto	l2561
  5566  001B10                     l2565:
  5567  001B10  501B               	movf	___ftadd@exp1,w,c
  5568  001B12  5C1A               	subwf	___ftadd@exp2,w,c
  5569  001B14  B0D8               	btfsc	status,0,c
  5570  001B16  D01A               	goto	l756
  5571  001B18                     l2567:
  5572  001B18  90D8               	bcf	status,0,c
  5573  001B1A  3610               	rlcf	___ftadd@f1,f,c
  5574  001B1C  3611               	rlcf	___ftadd@f1+1,f,c
  5575  001B1E  3612               	rlcf	___ftadd@f1+2,f,c
  5576  001B20  061B               	decf	___ftadd@exp1,f,c
  5577  001B22  501B               	movf	___ftadd@exp1,w,c
  5578  001B24  181A               	xorwf	___ftadd@exp2,w,c
  5579  001B26  B4D8               	btfsc	status,2,c
  5580  001B28  D00D               	goto	l2575
  5581  001B2A  0619               	decf	___ftadd@sign,f,c
  5582  001B2C  C019  F016         	movff	___ftadd@sign,??___ftadd
  5583  001B30  0E07               	movlw	7
  5584  001B32  1616               	andwf	??___ftadd,f,c
  5585  001B34  B4D8               	btfsc	status,2,c
  5586  001B36  D006               	goto	l2575
  5587  001B38  D7EF               	goto	l2567
  5588  001B3A                     l2573:
  5589  001B3A  90D8               	bcf	status,0,c
  5590  001B3C  3215               	rrcf	___ftadd@f2+2,f,c
  5591  001B3E  3214               	rrcf	___ftadd@f2+1,f,c
  5592  001B40  3213               	rrcf	___ftadd@f2,f,c
  5593  001B42  2A1A               	incf	___ftadd@exp2,f,c
  5594  001B44                     l2575:
  5595  001B44  501A               	movf	___ftadd@exp2,w,c
  5596  001B46  181B               	xorwf	___ftadd@exp1,w,c
  5597  001B48  A4D8               	btfss	status,2,c
  5598  001B4A  D7F7               	goto	l2573
  5599  001B4C                     l756:
  5600  001B4C  AE19               	btfss	___ftadd@sign,7,c
  5601  001B4E  D00C               	goto	l765
  5602  001B50  0EFF               	movlw	255
  5603  001B52  1A10               	xorwf	___ftadd@f1,f,c
  5604  001B54  0EFF               	movlw	255
  5605  001B56  1A11               	xorwf	___ftadd@f1+1,f,c
  5606  001B58  0EFF               	movlw	255
  5607  001B5A  1A12               	xorwf	___ftadd@f1+2,f,c
  5608  001B5C  0E01               	movlw	1
  5609  001B5E  2610               	addwf	___ftadd@f1,f,c
  5610  001B60  0E00               	movlw	0
  5611  001B62  2211               	addwfc	___ftadd@f1+1,f,c
  5612  001B64  0E00               	movlw	0
  5613  001B66  2212               	addwfc	___ftadd@f1+2,f,c
  5614  001B68                     l765:
  5615  001B68  AC19               	btfss	___ftadd@sign,6,c
  5616  001B6A  D00C               	goto	l2581
  5617  001B6C  0EFF               	movlw	255
  5618  001B6E  1A13               	xorwf	___ftadd@f2,f,c
  5619  001B70  0EFF               	movlw	255
  5620  001B72  1A14               	xorwf	___ftadd@f2+1,f,c
  5621  001B74  0EFF               	movlw	255
  5622  001B76  1A15               	xorwf	___ftadd@f2+2,f,c
  5623  001B78  0E01               	movlw	1
  5624  001B7A  2613               	addwf	___ftadd@f2,f,c
  5625  001B7C  0E00               	movlw	0
  5626  001B7E  2214               	addwfc	___ftadd@f2+1,f,c
  5627  001B80  0E00               	movlw	0
  5628  001B82  2215               	addwfc	___ftadd@f2+2,f,c
  5629  001B84                     l2581:
  5630  001B84  0E00               	movlw	0
  5631  001B86  6E19               	movwf	___ftadd@sign,c
  5632  001B88  5010               	movf	___ftadd@f1,w,c
  5633  001B8A  2613               	addwf	___ftadd@f2,f,c
  5634  001B8C  5011               	movf	___ftadd@f1+1,w,c
  5635  001B8E  2214               	addwfc	___ftadd@f2+1,f,c
  5636  001B90  5012               	movf	___ftadd@f1+2,w,c
  5637  001B92  2215               	addwfc	___ftadd@f2+2,f,c
  5638  001B94  AE15               	btfss	___ftadd@f2+2,7,c
  5639  001B96  D00E               	goto	l2591
  5640  001B98  0EFF               	movlw	255
  5641  001B9A  1A13               	xorwf	___ftadd@f2,f,c
  5642  001B9C  0EFF               	movlw	255
  5643  001B9E  1A14               	xorwf	___ftadd@f2+1,f,c
  5644  001BA0  0EFF               	movlw	255
  5645  001BA2  1A15               	xorwf	___ftadd@f2+2,f,c
  5646  001BA4  0E01               	movlw	1
  5647  001BA6  2613               	addwf	___ftadd@f2,f,c
  5648  001BA8  0E00               	movlw	0
  5649  001BAA  2214               	addwfc	___ftadd@f2+1,f,c
  5650  001BAC  0E00               	movlw	0
  5651  001BAE  2215               	addwfc	___ftadd@f2+2,f,c
  5652  001BB0  0E01               	movlw	1
  5653  001BB2  6E19               	movwf	___ftadd@sign,c
  5654  001BB4                     l2591:
  5655  001BB4  C013  F001         	movff	___ftadd@f2,___ftpack@arg
  5656  001BB8  C014  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5657  001BBC  C015  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5658  001BC0  C01B  F004         	movff	___ftadd@exp1,___ftpack@exp
  5659  001BC4  C019  F005         	movff	___ftadd@sign,___ftpack@sign
  5660  001BC8  EC54  F00F         	call	___ftpack	;wreg free
  5661  001BCC  C001  F010         	movff	?___ftpack,?___ftadd
  5662  001BD0  C002  F011         	movff	?___ftpack+1,?___ftadd+1
  5663  001BD4  C003  F012         	movff	?___ftpack+2,?___ftadd+2
  5664  001BD8  0012               	return	
  5665  001BDA                     __end_of___ftadd:
  5666                           	opt stack 0
  5667                           tblptru	equ	0xFF8
  5668                           tblptrh	equ	0xFF7
  5669                           tblptrl	equ	0xFF6
  5670                           tablat	equ	0xFF5
  5671                           prodl	equ	0xFF3
  5672                           indf2	equ	0xFDF
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           fsr2h	equ	0xFDA
  5676                           fsr2l	equ	0xFD9
  5677                           status	equ	0xFD8
  5678                           
  5679 ;; *************** function _lcd_init *****************
  5680 ;; Defined at:
  5681 ;;		line 101 in file "iut_lcd.c"
  5682 ;; Parameters:    Size  Location     Type
  5683 ;;		None
  5684 ;; Auto vars:     Size  Location     Type
  5685 ;;		None
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg, status,2, status,0, cstack
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5695 ;;      Params:         0       0       0       0       0       0       0       0       0
  5696 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5697 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5698 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5699 ;;Total ram usage:        1 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    4
  5702 ;; This function calls:
  5703 ;;		_lcd_clear
  5704 ;;		_lcd_clock_e
  5705 ;;		_lcd_write_cmd_busy
  5706 ;; This function is called by:
  5707 ;;		_main
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text18
  5712  001FFC                     __ptext18:
  5713                           	opt stack 0
  5714  001FFC                     _lcd_init:
  5715                           	opt stack 26
  5716                           
  5717                           ;iut_lcd.c: 102: TRISD &= ~0x07;
  5718                           
  5719                           ;incstack = 0
  5720  001FFC  0EF8               	movlw	248
  5721  001FFE  1695               	andwf	3989,f,c	;volatile
  5722                           
  5723                           ;iut_lcd.c: 103: TRISD |= 0xF0;
  5724  002000  0EF0               	movlw	240
  5725  002002  1295               	iorwf	3989,f,c	;volatile
  5726                           
  5727                           ;iut_lcd.c: 104: PORTD &= 0x08;
  5728  002004  0E08               	movlw	8
  5729  002006  1683               	andwf	3971,f,c	;volatile
  5730                           
  5731                           ;iut_lcd.c: 105: _delay(180000);
  5732  002008  0EEA               	movlw	234
  5733  00200A  6E03               	movwf	??_lcd_init& (0+255),c
  5734  00200C  0EC3               	movlw	195
  5735  00200E                     u3897:
  5736  00200E  2EE8               	decfsz	wreg,f,c
  5737  002010  D7FE               	bra	u3897
  5738  002012  2E03               	decfsz	??_lcd_init& (0+255),f,c
  5739  002014  D7FC               	bra	u3897
  5740  002016  F000               	nop	
  5741                           
  5742                           ;iut_lcd.c: 107: TRISD &= 0x0f;
  5743  002018  0E0F               	movlw	15
  5744  00201A  1695               	andwf	3989,f,c	;volatile
  5745                           
  5746                           ;iut_lcd.c: 109: PORTD &= 0x0f;
  5747  00201C  0E0F               	movlw	15
  5748  00201E  1683               	andwf	3971,f,c	;volatile
  5749                           
  5750                           ;iut_lcd.c: 110: PORTD |= 0b00110000;
  5751  002020  0E30               	movlw	48
  5752  002022  1283               	iorwf	3971,f,c	;volatile
  5753                           
  5754                           ;iut_lcd.c: 111: lcd_clock_e();
  5755  002024  EC39  F012         	call	_lcd_clock_e	;wreg free
  5756                           
  5757                           ;iut_lcd.c: 112: _delay(60000);
  5758  002028  0E4E               	movlw	78
  5759  00202A  6E03               	movwf	??_lcd_init& (0+255),c
  5760  00202C  0EEB               	movlw	235
  5761  00202E                     u3907:
  5762  00202E  2EE8               	decfsz	wreg,f,c
  5763  002030  D7FE               	bra	u3907
  5764  002032  2E03               	decfsz	??_lcd_init& (0+255),f,c
  5765  002034  D7FC               	bra	u3907
  5766  002036  F000               	nop	
  5767                           
  5768                           ;iut_lcd.c: 114: PORTD &= 0x0f;
  5769  002038  0E0F               	movlw	15
  5770  00203A  1683               	andwf	3971,f,c	;volatile
  5771                           
  5772                           ;iut_lcd.c: 115: PORTD |= 0b00110000;
  5773  00203C  0E30               	movlw	48
  5774  00203E  1283               	iorwf	3971,f,c	;volatile
  5775                           
  5776                           ;iut_lcd.c: 116: lcd_clock_e();
  5777  002040  EC39  F012         	call	_lcd_clock_e	;wreg free
  5778                           
  5779                           ;iut_lcd.c: 117: _delay(1200);
  5780  002044  0EF0               	movlw	240
  5781  002046                     u3917:
  5782  002046  D000               	nop2	
  5783  002048  2EE8               	decfsz	wreg,f,c
  5784  00204A  D7FD               	bra	u3917
  5785                           
  5786                           ;iut_lcd.c: 119: PORTD &= 0x0f;
  5787  00204C  0E0F               	movlw	15
  5788  00204E  1683               	andwf	3971,f,c	;volatile
  5789                           
  5790                           ;iut_lcd.c: 120: PORTD |= 0b00110000;
  5791  002050  0E30               	movlw	48
  5792  002052  1283               	iorwf	3971,f,c	;volatile
  5793                           
  5794                           ;iut_lcd.c: 121: lcd_clock_e();
  5795  002054  EC39  F012         	call	_lcd_clock_e	;wreg free
  5796                           
  5797                           ;iut_lcd.c: 122: _delay(1200);
  5798  002058  0EF0               	movlw	240
  5799  00205A                     u3927:
  5800  00205A  D000               	nop2	
  5801  00205C  2EE8               	decfsz	wreg,f,c
  5802  00205E  D7FD               	bra	u3927
  5803                           
  5804                           ;iut_lcd.c: 124: PORTD &= 0x0f;
  5805  002060  0E0F               	movlw	15
  5806  002062  1683               	andwf	3971,f,c	;volatile
  5807                           
  5808                           ;iut_lcd.c: 125: PORTD |= 0b00100000;
  5809  002064  8A83               	bsf	3971,5,c	;volatile
  5810                           
  5811                           ;iut_lcd.c: 126: lcd_clock_e();
  5812  002066  EC39  F012         	call	_lcd_clock_e	;wreg free
  5813                           
  5814                           ;iut_lcd.c: 127: _delay(1200);
  5815  00206A  0EF0               	movlw	240
  5816  00206C                     u3937:
  5817  00206C  D000               	nop2	
  5818  00206E  2EE8               	decfsz	wreg,f,c
  5819  002070  D7FD               	bra	u3937
  5820                           
  5821                           ;iut_lcd.c: 129: TRISD |= 0xf0;
  5822  002072  0EF0               	movlw	240
  5823  002074  1295               	iorwf	3989,f,c	;volatile
  5824                           
  5825                           ;iut_lcd.c: 131: lcd_write_cmd_busy(0x28);
  5826  002076  0E28               	movlw	40
  5827  002078  EC24  F012         	call	_lcd_write_cmd_busy
  5828                           
  5829                           ;iut_lcd.c: 132: lcd_write_cmd_busy(0x08);
  5830  00207C  0E08               	movlw	8
  5831  00207E  EC24  F012         	call	_lcd_write_cmd_busy
  5832                           
  5833                           ;iut_lcd.c: 133: lcd_clear();
  5834  002082  EC50  F012         	call	_lcd_clear	;wreg free
  5835                           
  5836                           ;iut_lcd.c: 134: lcd_write_cmd_busy(0x06);
  5837  002086  0E06               	movlw	6
  5838  002088  EC24  F012         	call	_lcd_write_cmd_busy
  5839                           
  5840                           ;iut_lcd.c: 135: lcd_write_cmd_busy(0x0C);
  5841  00208C  0E0C               	movlw	12
  5842  00208E  EC24  F012         	call	_lcd_write_cmd_busy
  5843  002092  0012               	return		;funcret
  5844  002094                     __end_of_lcd_init:
  5845                           	opt stack 0
  5846                           tblptru	equ	0xFF8
  5847                           tblptrh	equ	0xFF7
  5848                           tblptrl	equ	0xFF6
  5849                           tablat	equ	0xFF5
  5850                           prodl	equ	0xFF3
  5851                           wreg	equ	0xFE8
  5852                           indf2	equ	0xFDF
  5853                           postinc2	equ	0xFDE
  5854                           postdec2	equ	0xFDD
  5855                           fsr2h	equ	0xFDA
  5856                           fsr2l	equ	0xFD9
  5857                           status	equ	0xFD8
  5858                           
  5859 ;; *************** function _lcd_clear *****************
  5860 ;; Defined at:
  5861 ;;		line 145 in file "iut_lcd.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;		None
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;		None
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  1    wreg      void 
  5868 ;; Registers used:
  5869 ;;		wreg, status,2, status,0, cstack
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5875 ;;      Params:         0       0       0       0       0       0       0       0       0
  5876 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5877 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5878 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5879 ;;Total ram usage:        0 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    3
  5882 ;; This function calls:
  5883 ;;		_lcd_write_cmd_busy
  5884 ;; This function is called by:
  5885 ;;		_lcd_init
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           	psect	text19
  5890  0024A0                     __ptext19:
  5891                           	opt stack 0
  5892  0024A0                     _lcd_clear:
  5893                           	opt stack 26
  5894                           
  5895                           ;iut_lcd.c: 146: lcd_write_cmd_busy(0x01);
  5896                           
  5897                           ;incstack = 0
  5898  0024A0  0E01               	movlw	1
  5899  0024A2  EC24  F012         	call	_lcd_write_cmd_busy
  5900  0024A6  0012               	return		;funcret
  5901  0024A8                     __end_of_lcd_clear:
  5902                           	opt stack 0
  5903                           tblptru	equ	0xFF8
  5904                           tblptrh	equ	0xFF7
  5905                           tblptrl	equ	0xFF6
  5906                           tablat	equ	0xFF5
  5907                           prodl	equ	0xFF3
  5908                           wreg	equ	0xFE8
  5909                           indf2	equ	0xFDF
  5910                           postinc2	equ	0xFDE
  5911                           postdec2	equ	0xFDD
  5912                           fsr2h	equ	0xFDA
  5913                           fsr2l	equ	0xFD9
  5914                           status	equ	0xFD8
  5915                           
  5916 ;; *************** function _lcd_write_cmd_busy *****************
  5917 ;; Defined at:
  5918 ;;		line 764 in file "iut_lcd.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;  c               1    wreg     unsigned char 
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;  c               1    1[COMRAM] unsigned char 
  5923 ;; Return value:  Size  Location     Type
  5924 ;;                  1    wreg      void 
  5925 ;; Registers used:
  5926 ;;		wreg, status,2, status,0, cstack
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5932 ;;      Params:         0       0       0       0       0       0       0       0       0
  5933 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5934 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5935 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5936 ;;Total ram usage:        1 bytes
  5937 ;; Hardware stack levels used:    1
  5938 ;; Hardware stack levels required when called:    2
  5939 ;; This function calls:
  5940 ;;		_lcd_busy
  5941 ;;		_lcd_write_cmd_data
  5942 ;; This function is called by:
  5943 ;;		_lcd_init
  5944 ;;		_lcd_clear
  5945 ;;		_lcd_position
  5946 ;;		_lcd_putc
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text20
  5951  002448                     __ptext20:
  5952                           	opt stack 0
  5953  002448                     _lcd_write_cmd_busy:
  5954                           	opt stack 26
  5955                           
  5956                           ;incstack = 0
  5957                           ;lcd_write_cmd_busy@c stored from wreg
  5958  002448  6E02               	movwf	lcd_write_cmd_busy@c,c
  5959  00244A                     l2443:
  5960  00244A  EC2C  F011         	call	_lcd_busy	;wreg free
  5961  00244E  0900               	iorlw	0
  5962  002450  A4D8               	btfss	status,2,c
  5963  002452  D7FB               	goto	l2443
  5964                           
  5965                           ;iut_lcd.c: 766: PORTDbits.RD1 = 0;
  5966  002454  9283               	bcf	3971,1,c	;volatile
  5967                           
  5968                           ;iut_lcd.c: 767: lcd_write_cmd_data(c);
  5969  002456  5002               	movf	lcd_write_cmd_busy@c,w,c
  5970  002458  EC81  F011         	call	_lcd_write_cmd_data
  5971  00245C  0012               	return		;funcret
  5972  00245E                     __end_of_lcd_write_cmd_busy:
  5973                           	opt stack 0
  5974                           tblptru	equ	0xFF8
  5975                           tblptrh	equ	0xFF7
  5976                           tblptrl	equ	0xFF6
  5977                           tablat	equ	0xFF5
  5978                           prodl	equ	0xFF3
  5979                           wreg	equ	0xFE8
  5980                           indf2	equ	0xFDF
  5981                           postinc2	equ	0xFDE
  5982                           postdec2	equ	0xFDD
  5983                           fsr2h	equ	0xFDA
  5984                           fsr2l	equ	0xFD9
  5985                           status	equ	0xFD8
  5986                           
  5987 ;; *************** function _lcd_write_cmd_data *****************
  5988 ;; Defined at:
  5989 ;;		line 746 in file "iut_lcd.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;  c               1    wreg     unsigned char 
  5992 ;; Auto vars:     Size  Location     Type
  5993 ;;  c               1    0[COMRAM] unsigned char 
  5994 ;; Return value:  Size  Location     Type
  5995 ;;                  1    wreg      void 
  5996 ;; Registers used:
  5997 ;;		wreg, status,2, status,0, cstack
  5998 ;; Tracked objects:
  5999 ;;		On entry : 0/0
  6000 ;;		On exit  : 0/0
  6001 ;;		Unchanged: 0/0
  6002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6003 ;;      Params:         0       0       0       0       0       0       0       0       0
  6004 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6005 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6006 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6007 ;;Total ram usage:        1 bytes
  6008 ;; Hardware stack levels used:    1
  6009 ;; Hardware stack levels required when called:    1
  6010 ;; This function calls:
  6011 ;;		_lcd_clock_e
  6012 ;; This function is called by:
  6013 ;;		_lcd_write_data_busy
  6014 ;;		_lcd_write_cmd_busy
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017                           
  6018                           	psect	text21
  6019  002302                     __ptext21:
  6020                           	opt stack 0
  6021  002302                     _lcd_write_cmd_data:
  6022                           	opt stack 27
  6023                           
  6024                           ;incstack = 0
  6025                           ;lcd_write_cmd_data@c stored from wreg
  6026  002302  6E01               	movwf	lcd_write_cmd_data@c,c
  6027                           
  6028                           ;iut_lcd.c: 747: PORTDbits.RD2 = 0;
  6029  002304  9483               	bcf	3971,2,c	;volatile
  6030                           
  6031                           ;iut_lcd.c: 748: TRISD &= 0x0f;
  6032  002306  0E0F               	movlw	15
  6033  002308  1695               	andwf	3989,f,c	;volatile
  6034                           
  6035                           ;iut_lcd.c: 749: PORTD &= 0x0f;
  6036  00230A  0E0F               	movlw	15
  6037  00230C  1683               	andwf	3971,f,c	;volatile
  6038                           
  6039                           ;iut_lcd.c: 750: PORTD |= (c & 0xf0);
  6040  00230E  5001               	movf	lcd_write_cmd_data@c,w,c
  6041  002310  0BF0               	andlw	240
  6042  002312  1283               	iorwf	3971,f,c	;volatile
  6043                           
  6044                           ;iut_lcd.c: 751: lcd_clock_e();
  6045  002314  EC39  F012         	call	_lcd_clock_e	;wreg free
  6046                           
  6047                           ;iut_lcd.c: 752: PORTD &= 0x0f;
  6048  002318  0E0F               	movlw	15
  6049  00231A  1683               	andwf	3971,f,c	;volatile
  6050                           
  6051                           ;iut_lcd.c: 753: PORTD |= ((c << 4)&0xf0);
  6052  00231C  3801               	swapf	lcd_write_cmd_data@c,w,c
  6053  00231E  0BF0               	andlw	240
  6054  002320  0BF0               	andlw	240
  6055  002322  1283               	iorwf	3971,f,c	;volatile
  6056                           
  6057                           ;iut_lcd.c: 754: lcd_clock_e();
  6058  002324  EC39  F012         	call	_lcd_clock_e	;wreg free
  6059                           
  6060                           ;iut_lcd.c: 755: TRISD |= 0xf0;
  6061  002328  0EF0               	movlw	240
  6062  00232A  1295               	iorwf	3989,f,c	;volatile
  6063  00232C  0012               	return		;funcret
  6064  00232E                     __end_of_lcd_write_cmd_data:
  6065                           	opt stack 0
  6066                           tblptru	equ	0xFF8
  6067                           tblptrh	equ	0xFF7
  6068                           tblptrl	equ	0xFF6
  6069                           tablat	equ	0xFF5
  6070                           prodl	equ	0xFF3
  6071                           wreg	equ	0xFE8
  6072                           indf2	equ	0xFDF
  6073                           postinc2	equ	0xFDE
  6074                           postdec2	equ	0xFDD
  6075                           fsr2h	equ	0xFDA
  6076                           fsr2l	equ	0xFD9
  6077                           status	equ	0xFD8
  6078                           
  6079 ;; *************** function _lcd_busy *****************
  6080 ;; Defined at:
  6081 ;;		line 770 in file "iut_lcd.c"
  6082 ;; Parameters:    Size  Location     Type
  6083 ;;		None
  6084 ;; Auto vars:     Size  Location     Type
  6085 ;;		None
  6086 ;; Return value:  Size  Location     Type
  6087 ;;                  1    wreg      unsigned char 
  6088 ;; Registers used:
  6089 ;;		wreg, cstack
  6090 ;; Tracked objects:
  6091 ;;		On entry : 0/0
  6092 ;;		On exit  : 0/0
  6093 ;;		Unchanged: 0/0
  6094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6095 ;;      Params:         0       0       0       0       0       0       0       0       0
  6096 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6097 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6098 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6099 ;;Total ram usage:        0 bytes
  6100 ;; Hardware stack levels used:    1
  6101 ;; Hardware stack levels required when called:    1
  6102 ;; This function calls:
  6103 ;;		_lcd_clock_e
  6104 ;; This function is called by:
  6105 ;;		_lcd_write_data_busy
  6106 ;;		_lcd_write_cmd_busy
  6107 ;; This function uses a non-reentrant model
  6108 ;;
  6109                           
  6110                           	psect	text22
  6111  002258                     __ptext22:
  6112                           	opt stack 0
  6113  002258                     _lcd_busy:
  6114                           	opt stack 27
  6115                           
  6116                           ;iut_lcd.c: 771: PORTDbits.RD2 = 1;
  6117                           
  6118                           ;incstack = 0
  6119  002258  8483               	bsf	3971,2,c	;volatile
  6120                           
  6121                           ;iut_lcd.c: 772: PORTDbits.RD1 = 0;
  6122  00225A  9283               	bcf	3971,1,c	;volatile
  6123                           
  6124                           ;iut_lcd.c: 773: __nop(); __nop(); __nop();;
  6125  00225C  F000               	nop	
  6126  00225E  F000               	nop	
  6127  002260  F000               	nop	
  6128                           
  6129                           ;iut_lcd.c: 774: PORTDbits.RD0 = 1;
  6130  002262  8083               	bsf	3971,0,c	;volatile
  6131                           
  6132                           ;iut_lcd.c: 775: __nop(); __nop(); __nop();;
  6133  002264  F000               	nop	
  6134  002266  F000               	nop	
  6135  002268  F000               	nop	
  6136                           
  6137                           ;iut_lcd.c: 776: if (PORTD & 0x80) {
  6138  00226A  AE83               	btfss	3971,7,c	;volatile
  6139  00226C  D009               	goto	l335
  6140                           
  6141                           ;iut_lcd.c: 777: PORTDbits.RD0 = 0;
  6142  00226E  9083               	bcf	3971,0,c	;volatile
  6143                           
  6144                           ;iut_lcd.c: 778: __nop(); __nop(); __nop();;
  6145  002270  F000               	nop	
  6146  002272  F000               	nop	
  6147  002274  F000               	nop	
  6148                           
  6149                           ;iut_lcd.c: 779: lcd_clock_e();
  6150  002276  EC39  F012         	call	_lcd_clock_e	;wreg free
  6151                           
  6152                           ;iut_lcd.c: 780: PORTDbits.RD2 = 0;
  6153  00227A  9483               	bcf	3971,2,c	;volatile
  6154                           
  6155                           ;iut_lcd.c: 781: return 1;
  6156  00227C  0E01               	movlw	1
  6157                           
  6158                           ;iut_lcd.c: 782: } else {
  6159  00227E  0012               	return	
  6160  002280                     l335:
  6161                           
  6162                           ;iut_lcd.c: 783: PORTDbits.RD0 = 0;
  6163  002280  9083               	bcf	3971,0,c	;volatile
  6164                           
  6165                           ;iut_lcd.c: 784: __nop(); __nop(); __nop();;
  6166  002282  F000               	nop	
  6167  002284  F000               	nop	
  6168  002286  F000               	nop	
  6169                           
  6170                           ;iut_lcd.c: 785: lcd_clock_e();
  6171  002288  EC39  F012         	call	_lcd_clock_e	;wreg free
  6172                           
  6173                           ;iut_lcd.c: 786: PORTDbits.RD2 = 0;
  6174  00228C  9483               	bcf	3971,2,c	;volatile
  6175                           
  6176                           ;iut_lcd.c: 787: return 0;
  6177  00228E  0E00               	movlw	0
  6178  002290  0012               	return	
  6179  002292                     __end_of_lcd_busy:
  6180                           	opt stack 0
  6181                           tblptru	equ	0xFF8
  6182                           tblptrh	equ	0xFF7
  6183                           tblptrl	equ	0xFF6
  6184                           tablat	equ	0xFF5
  6185                           prodl	equ	0xFF3
  6186                           wreg	equ	0xFE8
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function _lcd_clock_e *****************
  6195 ;; Defined at:
  6196 ;;		line 791 in file "iut_lcd.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;		None
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;		None
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      void 
  6203 ;; Registers used:
  6204 ;;		None
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6210 ;;      Params:         0       0       0       0       0       0       0       0       0
  6211 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6213 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6214 ;;Total ram usage:        0 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; This function calls:
  6217 ;;		Nothing
  6218 ;; This function is called by:
  6219 ;;		_lcd_init
  6220 ;;		_lcd_write_cmd_data
  6221 ;;		_lcd_busy
  6222 ;; This function uses a non-reentrant model
  6223 ;;
  6224                           
  6225                           	psect	text23
  6226  002472                     __ptext23:
  6227                           	opt stack 0
  6228  002472                     _lcd_clock_e:
  6229                           	opt stack 27
  6230                           
  6231                           ;iut_lcd.c: 792: PORTDbits.RD0 = 1;
  6232                           
  6233                           ;incstack = 0
  6234  002472  8083               	bsf	3971,0,c	;volatile
  6235                           
  6236                           ;iut_lcd.c: 793: __nop(); __nop(); __nop();;
  6237  002474  F000               	nop	
  6238  002476  F000               	nop	
  6239  002478  F000               	nop	
  6240                           
  6241                           ;iut_lcd.c: 794: PORTDbits.RD0 = 0;
  6242  00247A  9083               	bcf	3971,0,c	;volatile
  6243                           
  6244                           ;iut_lcd.c: 795: __nop(); __nop(); __nop();;
  6245  00247C  F000               	nop	
  6246  00247E  F000               	nop	
  6247  002480  F000               	nop	
  6248  002482  0012               	return		;funcret
  6249  002484                     __end_of_lcd_clock_e:
  6250                           	opt stack 0
  6251                           tblptru	equ	0xFF8
  6252                           tblptrh	equ	0xFF7
  6253                           tblptrl	equ	0xFF6
  6254                           tablat	equ	0xFF5
  6255                           prodl	equ	0xFF3
  6256                           wreg	equ	0xFE8
  6257                           indf2	equ	0xFDF
  6258                           postinc2	equ	0xFDE
  6259                           postdec2	equ	0xFDD
  6260                           fsr2h	equ	0xFDA
  6261                           fsr2l	equ	0xFD9
  6262                           status	equ	0xFD8
  6263                           
  6264 ;; *************** function _adc_read *****************
  6265 ;; Defined at:
  6266 ;;		line 113 in file "iut_adc.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  numero_canal    1    wreg     unsigned char 
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;  numero_canal    1    4[COMRAM] unsigned char 
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  2    0[COMRAM] int 
  6273 ;; Registers used:
  6274 ;;		wreg, status,2, status,0
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6280 ;;      Params:         2       0       0       0       0       0       0       0       0
  6281 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6282 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6283 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6284 ;;Total ram usage:        5 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; This function calls:
  6287 ;;		Nothing
  6288 ;; This function is called by:
  6289 ;;		_main
  6290 ;; This function uses a non-reentrant model
  6291 ;;
  6292                           
  6293                           	psect	text24
  6294  002382                     __ptext24:
  6295                           	opt stack 0
  6296  002382                     _adc_read:
  6297                           	opt stack 30
  6298                           
  6299                           ;incstack = 0
  6300                           ;adc_read@numero_canal stored from wreg
  6301  002382  6E05               	movwf	adc_read@numero_canal,c
  6302                           
  6303                           ;iut_adc.c: 115: ADCON0 = ((numero_canal & 0x07) << 2) | 0x01;
  6304  002384  C005  F003         	movff	adc_read@numero_canal,??_adc_read
  6305  002388  0E07               	movlw	7
  6306  00238A  1603               	andwf	??_adc_read,f,c
  6307  00238C  90D8               	bcf	status,0,c
  6308  00238E  3603               	rlcf	??_adc_read,f,c
  6309  002390  90D8               	bcf	status,0,c
  6310  002392  3403               	rlcf	??_adc_read,w,c
  6311  002394  0901               	iorlw	1
  6312  002396  6EC2               	movwf	4034,c	;volatile
  6313                           
  6314                           ;iut_adc.c: 118: ADCON0bits.GO = 1;
  6315  002398  82C2               	bsf	4034,1,c	;volatile
  6316  00239A                     l75:
  6317  00239A  B2C2               	btfsc	4034,1,c	;volatile
  6318  00239C  D7FE               	goto	l75
  6319                           
  6320                           ;iut_adc.c: 124: return (((unsigned int) ADRESH) << 8) | ADRESL;
  6321  00239E  50C4               	movf	4036,w,c	;volatile
  6322  0023A0  6E03               	movwf	??_adc_read& (0+255),c
  6323  0023A2  50C3               	movf	4035,w,c	;volatile
  6324  0023A4  6E01               	movwf	?_adc_read,c
  6325  0023A6  C003  F002         	movff	??_adc_read,?_adc_read+1
  6326  0023AA  0012               	return	
  6327  0023AC                     __end_of_adc_read:
  6328                           	opt stack 0
  6329                           tblptru	equ	0xFF8
  6330                           tblptrh	equ	0xFF7
  6331                           tblptrl	equ	0xFF6
  6332                           tablat	equ	0xFF5
  6333                           prodl	equ	0xFF3
  6334                           wreg	equ	0xFE8
  6335                           indf2	equ	0xFDF
  6336                           postinc2	equ	0xFDE
  6337                           postdec2	equ	0xFDD
  6338                           fsr2h	equ	0xFDA
  6339                           fsr2l	equ	0xFD9
  6340                           status	equ	0xFD8
  6341                           
  6342 ;; *************** function _adc_init *****************
  6343 ;; Defined at:
  6344 ;;		line 48 in file "iut_adc.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;  numero_derni    1    wreg     unsigned char 
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;  numero_derni    1    0[COMRAM] unsigned char 
  6349 ;; Return value:  Size  Location     Type
  6350 ;;                  1    wreg      void 
  6351 ;; Registers used:
  6352 ;;		wreg, status,2, status,0
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6358 ;;      Params:         0       0       0       0       0       0       0       0       0
  6359 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6360 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6361 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6362 ;;Total ram usage:        1 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; This function calls:
  6365 ;;		Nothing
  6366 ;; This function is called by:
  6367 ;;		_main
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           	psect	text25
  6372  001F56                     __ptext25:
  6373                           	opt stack 0
  6374  001F56                     _adc_init:
  6375                           	opt stack 30
  6376                           
  6377                           ;incstack = 0
  6378                           ;adc_init@numero_dernier_canal stored from wreg
  6379  001F56  6E01               	movwf	adc_init@numero_dernier_canal,c
  6380                           
  6381                           ;iut_adc.c: 51: switch (numero_dernier_canal) {
  6382  001F58  D033               	goto	l2845
  6383  001F5A                     l2805:
  6384                           
  6385                           ;iut_adc.c: 57: ADCON1 = 0xD;
  6386  001F5A  0E0D               	movlw	13
  6387  001F5C  6EC1               	movwf	4033,c	;volatile
  6388                           
  6389                           ;iut_adc.c: 58: TRISA = TRISA | 0b00000011;
  6390  001F5E  5092               	movf	3986,w,c	;volatile
  6391  001F60  0903               	iorlw	3
  6392  001F62  D02C               	goto	L19
  6393  001F64                     l2809:
  6394                           
  6395                           ;iut_adc.c: 61: ADCON1 = 0xC;
  6396  001F64  0E0C               	movlw	12
  6397  001F66  6EC1               	movwf	4033,c	;volatile
  6398                           
  6399                           ;iut_adc.c: 62: TRISA = TRISA | 0b00000111;
  6400  001F68  5092               	movf	3986,w,c	;volatile
  6401  001F6A  0907               	iorlw	7
  6402  001F6C  D027               	goto	L19
  6403  001F6E                     l2813:
  6404                           
  6405                           ;iut_adc.c: 65: ADCON1 = 0xB;
  6406  001F6E  0E0B               	movlw	11
  6407  001F70  6EC1               	movwf	4033,c	;volatile
  6408                           
  6409                           ;iut_adc.c: 66: TRISA = TRISA | 0b00001111;
  6410  001F72  5092               	movf	3986,w,c	;volatile
  6411  001F74  090F               	iorlw	15
  6412  001F76  D022               	goto	L19
  6413  001F78                     l2817:
  6414                           
  6415                           ;iut_adc.c: 69: ADCON1 = 0xA;
  6416  001F78  0E0A               	movlw	10
  6417  001F7A  6EC1               	movwf	4033,c	;volatile
  6418                           
  6419                           ;iut_adc.c: 70: TRISA = TRISA | 0b00101111;
  6420  001F7C  5092               	movf	3986,w,c	;volatile
  6421  001F7E  092F               	iorlw	47
  6422  001F80  D01D               	goto	L19
  6423  001F82                     l2821:
  6424                           
  6425                           ;iut_adc.c: 73: ADCON1 = 0x9;
  6426  001F82  0E09               	movlw	9
  6427  001F84  6EC1               	movwf	4033,c	;volatile
  6428                           
  6429                           ;iut_adc.c: 74: TRISA = TRISA | 0b00101111;
  6430  001F86  5092               	movf	3986,w,c	;volatile
  6431  001F88  092F               	iorlw	47
  6432  001F8A  6E92               	movwf	3986,c	;volatile
  6433                           
  6434                           ;iut_adc.c: 75: TRISE = TRISE | 0b00000001;
  6435  001F8C  5096               	movf	3990,w,c	;volatile
  6436  001F8E  0901               	iorlw	1
  6437  001F90  D00F               	goto	L21
  6438  001F92                     l2827:
  6439                           
  6440                           ;iut_adc.c: 78: ADCON1 = 0x8;
  6441  001F92  0E08               	movlw	8
  6442  001F94  6EC1               	movwf	4033,c	;volatile
  6443                           
  6444                           ;iut_adc.c: 79: TRISA = TRISA | 0b00101111;
  6445  001F96  5092               	movf	3986,w,c	;volatile
  6446  001F98  092F               	iorlw	47
  6447  001F9A  6E92               	movwf	3986,c	;volatile
  6448                           
  6449                           ;iut_adc.c: 80: TRISE = TRISE | 0b00000011;
  6450  001F9C  5096               	movf	3990,w,c	;volatile
  6451  001F9E  0903               	iorlw	3
  6452  001FA0  D007               	goto	L21
  6453  001FA2                     l2833:
  6454                           
  6455                           ;iut_adc.c: 83: ADCON1 = 0x7;
  6456  001FA2  0E07               	movlw	7
  6457  001FA4  6EC1               	movwf	4033,c	;volatile
  6458                           
  6459                           ;iut_adc.c: 84: TRISA = TRISA | 0b00101111;
  6460  001FA6  5092               	movf	3986,w,c	;volatile
  6461  001FA8  092F               	iorlw	47
  6462  001FAA  6E92               	movwf	3986,c	;volatile
  6463                           
  6464                           ;iut_adc.c: 85: TRISE = TRISE | 0b00000111;
  6465  001FAC  5096               	movf	3990,w,c	;volatile
  6466  001FAE  0907               	iorlw	7
  6467  001FB0                     L21:
  6468  001FB0  6E96               	movwf	3990,c	;volatile
  6469                           
  6470                           ;iut_adc.c: 86: break;
  6471  001FB2  D020               	goto	l2847
  6472  001FB4                     l2839:
  6473                           
  6474                           ;iut_adc.c: 88: ADCON1 = 0xE;
  6475  001FB4  0E0E               	movlw	14
  6476  001FB6  6EC1               	movwf	4033,c	;volatile
  6477                           
  6478                           ;iut_adc.c: 89: TRISA = TRISA | 0b00000001;
  6479  001FB8  5092               	movf	3986,w,c	;volatile
  6480  001FBA  0901               	iorlw	1
  6481  001FBC                     L19:
  6482  001FBC  6E92               	movwf	3986,c	;volatile
  6483                           
  6484                           ;iut_adc.c: 91: }
  6485                           
  6486                           ;iut_adc.c: 90: break;
  6487  001FBE  D01A               	goto	l2847
  6488  001FC0                     l2845:
  6489  001FC0  5001               	movf	adc_init@numero_dernier_canal,w,c
  6490                           
  6491                           ; Switch size 1, requested type "space"
  6492                           ; Number of cases is 8, Range of values is 0 to 7
  6493                           ; switch strategies available:
  6494                           ; Name         Instructions Cycles
  6495                           ; simple_byte           25    13 (average)
  6496                           ;	Chosen strategy is simple_byte
  6497  001FC2  0A00               	xorlw	0	; case 0
  6498  001FC4  B4D8               	btfsc	status,2,c
  6499  001FC6  D7F6               	goto	l2839
  6500  001FC8  0A01               	xorlw	1	; case 1
  6501  001FCA  B4D8               	btfsc	status,2,c
  6502  001FCC  D7C6               	goto	l2805
  6503  001FCE  0A03               	xorlw	3	; case 2
  6504  001FD0  B4D8               	btfsc	status,2,c
  6505  001FD2  D7C8               	goto	l2809
  6506  001FD4  0A01               	xorlw	1	; case 3
  6507  001FD6  B4D8               	btfsc	status,2,c
  6508  001FD8  D7CA               	goto	l2813
  6509  001FDA  0A07               	xorlw	7	; case 4
  6510  001FDC  B4D8               	btfsc	status,2,c
  6511  001FDE  D7CC               	goto	l2817
  6512  001FE0  0A01               	xorlw	1	; case 5
  6513  001FE2  B4D8               	btfsc	status,2,c
  6514  001FE4  D7CE               	goto	l2821
  6515  001FE6  0A03               	xorlw	3	; case 6
  6516  001FE8  B4D8               	btfsc	status,2,c
  6517  001FEA  D7D3               	goto	l2827
  6518  001FEC  0A01               	xorlw	1	; case 7
  6519  001FEE  B4D8               	btfsc	status,2,c
  6520  001FF0  D7D8               	goto	l2833
  6521  001FF2  D7E0               	goto	l2839
  6522  001FF4                     l2847:
  6523                           
  6524                           ;iut_adc.c: 96: ADCON2 = 0b10100110;
  6525  001FF4  0EA6               	movlw	166
  6526  001FF6  6EC0               	movwf	4032,c	;volatile
  6527                           
  6528                           ;iut_adc.c: 99: ADCON0bits.ADON = 1;
  6529  001FF8  80C2               	bsf	4034,0,c	;volatile
  6530  001FFA  0012               	return		;funcret
  6531  001FFC                     __end_of_adc_init:
  6532                           	opt stack 0
  6533                           tblptru	equ	0xFF8
  6534                           tblptrh	equ	0xFF7
  6535                           tblptrl	equ	0xFF6
  6536                           tablat	equ	0xFF5
  6537                           prodl	equ	0xFF3
  6538                           wreg	equ	0xFE8
  6539                           indf2	equ	0xFDF
  6540                           postinc2	equ	0xFDE
  6541                           postdec2	equ	0xFDD
  6542                           fsr2h	equ	0xFDA
  6543                           fsr2l	equ	0xFD9
  6544                           status	equ	0xFD8
  6545                           
  6546 ;; *************** function ___awtoft *****************
  6547 ;; Defined at:
  6548 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awtoft.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;  c               2    8[COMRAM] int 
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;  sign            1   11[COMRAM] unsigned char 
  6553 ;; Return value:  Size  Location     Type
  6554 ;;                  3    8[COMRAM] float 
  6555 ;; Registers used:
  6556 ;;		wreg, status,2, status,0, cstack
  6557 ;; Tracked objects:
  6558 ;;		On entry : 0/0
  6559 ;;		On exit  : 0/0
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6562 ;;      Params:         3       0       0       0       0       0       0       0       0
  6563 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6564 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6565 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6566 ;;Total ram usage:        4 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; Hardware stack levels required when called:    1
  6569 ;; This function calls:
  6570 ;;		___ftpack
  6571 ;; This function is called by:
  6572 ;;		_main
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           	psect	text26
  6577  0022CA                     __ptext26:
  6578                           	opt stack 0
  6579  0022CA                     ___awtoft:
  6580                           	opt stack 29
  6581                           
  6582                           ;incstack = 0
  6583  0022CA  0E00               	movlw	0
  6584  0022CC  6E0C               	movwf	___awtoft@sign,c
  6585  0022CE  AE0A               	btfss	___awtoft@c+1,7,c
  6586  0022D0  D006               	goto	l3511
  6587  0022D2  6C09               	negf	___awtoft@c,c
  6588  0022D4  1E0A               	comf	___awtoft@c+1,f,c
  6589  0022D6  B0D8               	btfsc	status,0,c
  6590  0022D8  2A0A               	incf	___awtoft@c+1,f,c
  6591  0022DA  0E01               	movlw	1
  6592  0022DC  6E0C               	movwf	___awtoft@sign,c
  6593  0022DE                     l3511:
  6594  0022DE  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6595  0022E2  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6596  0022E6  6A03               	clrf	___ftpack@arg+2,c
  6597  0022E8  0E8E               	movlw	142
  6598  0022EA  6E04               	movwf	___ftpack@exp,c
  6599  0022EC  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6600  0022F0  EC54  F00F         	call	___ftpack	;wreg free
  6601  0022F4  C001  F009         	movff	?___ftpack,?___awtoft
  6602  0022F8  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6603  0022FC  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6604  002300  0012               	return	
  6605  002302                     __end_of___awtoft:
  6606                           	opt stack 0
  6607                           tblptru	equ	0xFF8
  6608                           tblptrh	equ	0xFF7
  6609                           tblptrl	equ	0xFF6
  6610                           tablat	equ	0xFF5
  6611                           prodl	equ	0xFF3
  6612                           wreg	equ	0xFE8
  6613                           indf2	equ	0xFDF
  6614                           postinc2	equ	0xFDE
  6615                           postdec2	equ	0xFDD
  6616                           fsr2h	equ	0xFDA
  6617                           fsr2l	equ	0xFD9
  6618                           status	equ	0xFD8
  6619                           
  6620 ;; *************** function ___ftpack *****************
  6621 ;; Defined at:
  6622 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;  arg             3    0[COMRAM] unsigned um
  6625 ;;  exp             1    3[COMRAM] unsigned char 
  6626 ;;  sign            1    4[COMRAM] unsigned char 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;		None
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  3    0[COMRAM] float 
  6631 ;; Registers used:
  6632 ;;		wreg, status,2, status,0
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6638 ;;      Params:         5       0       0       0       0       0       0       0       0
  6639 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6640 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6641 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6642 ;;Total ram usage:        8 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; This function calls:
  6645 ;;		Nothing
  6646 ;; This function is called by:
  6647 ;;		___awtoft
  6648 ;;		___ftadd
  6649 ;;		___ftdiv
  6650 ;;		___ftmul
  6651 ;;		___lwtoft
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           	psect	text27
  6656  001EA8                     __ptext27:
  6657                           	opt stack 0
  6658  001EA8                     ___ftpack:
  6659                           	opt stack 28
  6660                           
  6661                           ;incstack = 0
  6662  001EA8  5004               	movf	___ftpack@exp,w,c
  6663  001EAA  B4D8               	btfsc	status,2,c
  6664  001EAC  D005               	goto	l2467
  6665  001EAE  5001               	movf	___ftpack@arg,w,c
  6666  001EB0  1002               	iorwf	___ftpack@arg+1,w,c
  6667  001EB2  1003               	iorwf	___ftpack@arg+2,w,c
  6668  001EB4  A4D8               	btfss	status,2,c
  6669  001EB6  D00C               	goto	l2473
  6670  001EB8                     l2467:
  6671  001EB8  0E00               	movlw	0
  6672  001EBA  6E01               	movwf	?___ftpack,c
  6673  001EBC  0E00               	movlw	0
  6674  001EBE  6E02               	movwf	?___ftpack+1,c
  6675  001EC0  0E00               	movlw	0
  6676  001EC2  6E03               	movwf	?___ftpack+2,c
  6677  001EC4  0012               	return	
  6678  001EC6                     l2471:
  6679  001EC6  2A04               	incf	___ftpack@exp,f,c
  6680  001EC8  90D8               	bcf	status,0,c
  6681  001ECA  3203               	rrcf	___ftpack@arg+2,f,c
  6682  001ECC  3202               	rrcf	___ftpack@arg+1,f,c
  6683  001ECE  3201               	rrcf	___ftpack@arg,f,c
  6684  001ED0                     l2473:
  6685  001ED0  0E00               	movlw	0
  6686  001ED2  1401               	andwf	___ftpack@arg,w,c
  6687  001ED4  6E06               	movwf	??___ftpack& (0+255),c
  6688  001ED6  0E00               	movlw	0
  6689  001ED8  1402               	andwf	___ftpack@arg+1,w,c
  6690  001EDA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6691  001EDC  0EFE               	movlw	254
  6692  001EDE  1403               	andwf	___ftpack@arg+2,w,c
  6693  001EE0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6694  001EE2  5006               	movf	??___ftpack,w,c
  6695  001EE4  1007               	iorwf	??___ftpack+1,w,c
  6696  001EE6  1008               	iorwf	??___ftpack+2,w,c
  6697  001EE8  B4D8               	btfsc	status,2,c
  6698  001EEA  D00C               	goto	l2479
  6699  001EEC  D7EC               	goto	l2471
  6700  001EEE                     l2475:
  6701  001EEE  2A04               	incf	___ftpack@exp,f,c
  6702  001EF0  0E01               	movlw	1
  6703  001EF2  2601               	addwf	___ftpack@arg,f,c
  6704  001EF4  0E00               	movlw	0
  6705  001EF6  2202               	addwfc	___ftpack@arg+1,f,c
  6706  001EF8  0E00               	movlw	0
  6707  001EFA  2203               	addwfc	___ftpack@arg+2,f,c
  6708  001EFC  90D8               	bcf	status,0,c
  6709  001EFE  3203               	rrcf	___ftpack@arg+2,f,c
  6710  001F00  3202               	rrcf	___ftpack@arg+1,f,c
  6711  001F02  3201               	rrcf	___ftpack@arg,f,c
  6712  001F04                     l2479:
  6713  001F04  0E00               	movlw	0
  6714  001F06  1401               	andwf	___ftpack@arg,w,c
  6715  001F08  6E06               	movwf	??___ftpack& (0+255),c
  6716  001F0A  0E00               	movlw	0
  6717  001F0C  1402               	andwf	___ftpack@arg+1,w,c
  6718  001F0E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6719  001F10  0EFF               	movlw	255
  6720  001F12  1403               	andwf	___ftpack@arg+2,w,c
  6721  001F14  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6722  001F16  5006               	movf	??___ftpack,w,c
  6723  001F18  1007               	iorwf	??___ftpack+1,w,c
  6724  001F1A  1008               	iorwf	??___ftpack+2,w,c
  6725  001F1C  B4D8               	btfsc	status,2,c
  6726  001F1E  D006               	goto	l2483
  6727  001F20  D7E6               	goto	l2475
  6728  001F22                     l2481:
  6729  001F22  0604               	decf	___ftpack@exp,f,c
  6730  001F24  90D8               	bcf	status,0,c
  6731  001F26  3601               	rlcf	___ftpack@arg,f,c
  6732  001F28  3602               	rlcf	___ftpack@arg+1,f,c
  6733  001F2A  3603               	rlcf	___ftpack@arg+2,f,c
  6734  001F2C                     l2483:
  6735  001F2C  BE02               	btfsc	___ftpack@arg+1,7,c
  6736  001F2E  D003               	goto	l718
  6737  001F30  0E02               	movlw	2
  6738  001F32  6004               	cpfslt	___ftpack@exp,c
  6739  001F34  D7F6               	goto	l2481
  6740  001F36                     l718:
  6741  001F36  A004               	btfss	___ftpack@exp,0,c
  6742  001F38  9E02               	bcf	___ftpack@arg+1,7,c
  6743  001F3A  90D8               	bcf	status,0,c
  6744  001F3C  3204               	rrcf	___ftpack@exp,f,c
  6745  001F3E  5004               	movf	___ftpack@exp,w,c
  6746  001F40  1203               	iorwf	___ftpack@arg+2,f,c
  6747  001F42  5005               	movf	___ftpack@sign,w,c
  6748  001F44  A4D8               	btfss	status,2,c
  6749  001F46  8E03               	bsf	___ftpack@arg+2,7,c
  6750  001F48  C001  F001         	movff	___ftpack@arg,?___ftpack
  6751  001F4C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6752  001F50  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6753  001F54  0012               	return	
  6754  001F56                     __end_of___ftpack:
  6755                           	opt stack 0
  6756                           tblptru	equ	0xFF8
  6757                           tblptrh	equ	0xFF7
  6758                           tblptrl	equ	0xFF6
  6759                           tablat	equ	0xFF5
  6760                           prodl	equ	0xFF3
  6761                           wreg	equ	0xFE8
  6762                           indf2	equ	0xFDF
  6763                           postinc2	equ	0xFDE
  6764                           postdec2	equ	0xFDD
  6765                           fsr2h	equ	0xFDA
  6766                           fsr2l	equ	0xFD9
  6767                           status	equ	0xFD8
  6768                           
  6769 ;; *************** function _ReadTimer0 *****************
  6770 ;; Defined at:
  6771 ;;		line 44 in file "iut_timers.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;		None
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  timer           2    2[COMRAM] struct Timers
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  2    0[COMRAM] unsigned int 
  6778 ;; Registers used:
  6779 ;;		None
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6785 ;;      Params:         2       0       0       0       0       0       0       0       0
  6786 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6788 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6789 ;;Total ram usage:        4 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; This function calls:
  6792 ;;		Nothing
  6793 ;; This function is called by:
  6794 ;;		_main
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           	psect	text28
  6799  002484                     __ptext28:
  6800                           	opt stack 0
  6801  002484                     _ReadTimer0:
  6802                           	opt stack 30
  6803                           
  6804                           ;iut_timers.c: 46: union Timers timer;
  6805                           ;iut_timers.c: 48: timer.bt[0] = TMR0L;
  6806                           
  6807                           ;incstack = 0
  6808  002484  CFD6 F003          	movff	4054,ReadTimer0@timer	;volatile
  6809                           
  6810                           ;iut_timers.c: 49: timer.bt[1] = TMR0H;
  6811  002488  CFD7 F004          	movff	4055,ReadTimer0@timer+1	;volatile
  6812                           
  6813                           ;iut_timers.c: 51: return (timer.lt);
  6814  00248C  C003  F001         	movff	ReadTimer0@timer,?_ReadTimer0
  6815  002490  C004  F002         	movff	ReadTimer0@timer+1,?_ReadTimer0+1
  6816  002494  0012               	return		;funcret
  6817  002496                     __end_of_ReadTimer0:
  6818                           	opt stack 0
  6819                           tblptru	equ	0xFF8
  6820                           tblptrh	equ	0xFF7
  6821                           tblptrl	equ	0xFF6
  6822                           tablat	equ	0xFF5
  6823                           prodl	equ	0xFF3
  6824                           wreg	equ	0xFE8
  6825                           indf2	equ	0xFDF
  6826                           postinc2	equ	0xFDE
  6827                           postdec2	equ	0xFDD
  6828                           fsr2h	equ	0xFDA
  6829                           fsr2l	equ	0xFD9
  6830                           status	equ	0xFD8
  6831                           
  6832 ;; *************** function _OpenTimer0 *****************
  6833 ;; Defined at:
  6834 ;;		line 22 in file "iut_timers.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;  config          1    wreg     unsigned char 
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;  config          1    0[COMRAM] unsigned char 
  6839 ;; Return value:  Size  Location     Type
  6840 ;;                  1    wreg      void 
  6841 ;; Registers used:
  6842 ;;		wreg, status,2, status,0
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 0/0
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6848 ;;      Params:         0       0       0       0       0       0       0       0       0
  6849 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6850 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6851 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6852 ;;Total ram usage:        1 bytes
  6853 ;; Hardware stack levels used:    1
  6854 ;; This function calls:
  6855 ;;		Nothing
  6856 ;; This function is called by:
  6857 ;;		_main
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           	psect	text29
  6862  0023F4                     __ptext29:
  6863                           	opt stack 0
  6864  0023F4                     _OpenTimer0:
  6865                           	opt stack 30
  6866                           
  6867                           ;incstack = 0
  6868                           ;OpenTimer0@config stored from wreg
  6869  0023F4  6E01               	movwf	OpenTimer0@config,c
  6870                           
  6871                           ;iut_timers.c: 24: T0CON = (0x7f & config);
  6872  0023F6  5001               	movf	OpenTimer0@config,w,c
  6873  0023F8  0B7F               	andlw	127
  6874  0023FA  6ED5               	movwf	4053,c	;volatile
  6875                           
  6876                           ;iut_timers.c: 25: TMR0H = 0;
  6877  0023FC  0E00               	movlw	0
  6878  0023FE  6ED7               	movwf	4055,c	;volatile
  6879                           
  6880                           ;iut_timers.c: 26: TMR0L = 0;
  6881  002400  0E00               	movlw	0
  6882  002402  6ED6               	movwf	4054,c	;volatile
  6883                           
  6884                           ;iut_timers.c: 27: INTCONbits.T0IF = 0;
  6885  002404  94F2               	bcf	intcon,2,c	;volatile
  6886                           
  6887                           ;iut_timers.c: 29: if(config&0x80)
  6888  002406  AE01               	btfss	OpenTimer0@config,7,c
  6889  002408  D002               	goto	l435
  6890                           
  6891                           ;iut_timers.c: 30: INTCONbits.T0IE = 1;
  6892  00240A  8AF2               	bsf	intcon,5,c	;volatile
  6893  00240C  D001               	goto	l436
  6894  00240E                     l435:
  6895                           
  6896                           ;iut_timers.c: 31: else
  6897                           ;iut_timers.c: 32: INTCONbits.T0IE = 0;
  6898  00240E  9AF2               	bcf	intcon,5,c	;volatile
  6899  002410                     l436:
  6900                           
  6901                           ;iut_timers.c: 34: T0CONbits.TMR0ON = 1;
  6902  002410  8ED5               	bsf	4053,7,c	;volatile
  6903  002412  0012               	return		;funcret
  6904  002414                     __end_of_OpenTimer0:
  6905                           	opt stack 0
  6906                           tblptru	equ	0xFF8
  6907                           tblptrh	equ	0xFF7
  6908                           tblptrl	equ	0xFF6
  6909                           tablat	equ	0xFF5
  6910                           prodl	equ	0xFF3
  6911                           intcon	equ	0xFF2
  6912                           wreg	equ	0xFE8
  6913                           indf2	equ	0xFDF
  6914                           postinc2	equ	0xFDE
  6915                           postdec2	equ	0xFDD
  6916                           fsr2h	equ	0xFDA
  6917                           fsr2l	equ	0xFD9
  6918                           status	equ	0xFD8
  6919                           
  6920 ;; *************** function _CloseTimer0 *****************
  6921 ;; Defined at:
  6922 ;;		line 77 in file "iut_timers.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;		None
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;		None
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      void 
  6929 ;; Registers used:
  6930 ;;		wreg, status,2
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6936 ;;      Params:         0       0       0       0       0       0       0       0       0
  6937 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6938 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6939 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6940 ;;Total ram usage:        0 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; This function calls:
  6943 ;;		Nothing
  6944 ;; This function is called by:
  6945 ;;		_main
  6946 ;; This function uses a non-reentrant model
  6947 ;;
  6948                           
  6949                           	psect	text30
  6950  0024A8                     __ptext30:
  6951                           	opt stack 0
  6952  0024A8                     _CloseTimer0:
  6953                           	opt stack 30
  6954                           
  6955                           ;iut_timers.c: 79: INTCONbits.TMR0IE = 0;
  6956                           
  6957                           ;incstack = 0
  6958  0024A8  9AF2               	bcf	intcon,5,c	;volatile
  6959                           
  6960                           ;iut_timers.c: 80: T0CON=0x7F;
  6961  0024AA  0E7F               	movlw	127
  6962  0024AC  6ED5               	movwf	4053,c	;volatile
  6963  0024AE  0012               	return		;funcret
  6964  0024B0                     __end_of_CloseTimer0:
  6965                           	opt stack 0
  6966                           tblptru	equ	0xFF8
  6967                           tblptrh	equ	0xFF7
  6968                           tblptrl	equ	0xFF6
  6969                           tablat	equ	0xFF5
  6970                           prodl	equ	0xFF3
  6971                           intcon	equ	0xFF2
  6972                           wreg	equ	0xFE8
  6973                           indf2	equ	0xFDF
  6974                           postinc2	equ	0xFDE
  6975                           postdec2	equ	0xFDD
  6976                           fsr2h	equ	0xFDA
  6977                           fsr2l	equ	0xFD9
  6978                           status	equ	0xFD8
  6979                           tblptru	equ	0xFF8
  6980                           tblptrh	equ	0xFF7
  6981                           tblptrl	equ	0xFF6
  6982                           tablat	equ	0xFF5
  6983                           prodl	equ	0xFF3
  6984                           intcon	equ	0xFF2
  6985                           wreg	equ	0xFE8
  6986                           indf2	equ	0xFDF
  6987                           postinc2	equ	0xFDE
  6988                           postdec2	equ	0xFDD
  6989                           fsr2h	equ	0xFDA
  6990                           fsr2l	equ	0xFD9
  6991                           status	equ	0xFD8
  6992                           
  6993                           	psect	rparam
  6994  0000                     tblptru	equ	0xFF8
  6995                           tblptrh	equ	0xFF7
  6996                           tblptrl	equ	0xFF6
  6997                           tablat	equ	0xFF5
  6998                           prodl	equ	0xFF3
  6999                           intcon	equ	0xFF2
  7000                           wreg	equ	0xFE8
  7001                           indf2	equ	0xFDF
  7002                           postinc2	equ	0xFDE
  7003                           postdec2	equ	0xFDD
  7004                           fsr2h	equ	0xFDA
  7005                           fsr2l	equ	0xFD9
  7006                           status	equ	0xFD8


Data Sizes:
    Strings     48
    Constant    17
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     75      75
    BANK0           160     91      91
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_printf@q	PTR unsigned char  size(2) Largest target is 33
		 -> lcd_printf@buf(BANK0[33]), 

    lcd_printf@ramstring	PTR unsigned char  size(2) Largest target is 0

    lcd_printf@romstring	PTR far unsigned char  size(2) Largest target is 0

    lcd_printf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[7]), STR_7(CODE[7]), 
		 -> STR_6(CODE[7]), STR_5(CODE[7]), STR_4(CODE[16]), STR_3(CODE[7]), 
		 -> STR_2(CODE[7]), STR_1(CODE[12]), 

    lcd_printf@ap	PTR void [1] size(2) Largest target is 1
		 -> ?_lcd_printf(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_lcd_printf
    _pwm_setdc2->___fttol
    _pwm_setdc1->___fttol
    _lcd_printf->___ftdiv
    _lcd_repete_n->_lcd_write_data_busy
    _lcd_putc->_lcd_position
    _lcd_write_data_busy->_lcd_write_cmd_data
    _lcd_position->_lcd_write_cmd_busy
    ___lwtoft->___ftpack
    ___ftneg->___awtoft
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftneg
    _lcd_init->_lcd_write_cmd_busy
    _lcd_clear->_lcd_write_cmd_busy
    _lcd_write_cmd_busy->_lcd_write_cmd_data
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_lcd_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   43173
                                             74 COMRAM     1     1      0
                                             67 BANK0     24    24      0
                        _CloseTimer0
                         _OpenTimer0
                         _ReadTimer0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           _adc_init
                           _adc_read
                           _lcd_init
                       _lcd_position
                         _lcd_printf
                           _pwm_init
                         _pwm_setdc1
                         _pwm_setdc2
 ---------------------------------------------------------------------------------
 (1) _pwm_setdc2                                           4     2      2     196
                                             15 COMRAM     4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _pwm_setdc1                                           4     2      2     196
                                             15 COMRAM     4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             2     1      1     164
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _lcd_printf                                          84    74     10   24566
                                             57 COMRAM    17     7     10
                                              0 BANK0     67    67      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lwtoft
                           _lcd_putc
                       _lcd_repete_n
                _lcd_write_data_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_repete_n                                         2     1      1     794
                                              2 COMRAM     2     1      1
                _lcd_write_data_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    1159
                                              5 COMRAM     1     1      0
                       _lcd_position
                 _lcd_write_cmd_busy
                _lcd_write_data_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_write_data_busy                                  1     1      0      66
                                              1 COMRAM     1     1      0
                           _lcd_busy
                 _lcd_write_cmd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_position                                         3     2      1     895
                                              2 COMRAM     3     2      1
                 _lcd_write_cmd_busy
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2679
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1012
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     425
                                             12 COMRAM     3     0      3
                           ___awtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3565
                                             27 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3367
                                             42 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    4205
                                             15 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     132
                                              2 COMRAM     1     1      0
                          _lcd_clear
                        _lcd_clock_e
                 _lcd_write_cmd_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            0     0      0      66
                 _lcd_write_cmd_busy
 ---------------------------------------------------------------------------------
 (3) _lcd_write_cmd_busy                                   1     1      0      66
                                              1 COMRAM     1     1      0
                           _lcd_busy
                 _lcd_write_cmd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_write_cmd_data                                   1     1      0      44
                                              0 COMRAM     1     1      0
                        _lcd_clock_e
 ---------------------------------------------------------------------------------
 (3) _lcd_busy                                             0     0      0       0
                        _lcd_clock_e
 ---------------------------------------------------------------------------------
 (4) _lcd_clock_e                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2900
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadTimer0                                           4     2      2      47
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _OpenTimer0                                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CloseTimer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CloseTimer0
   _OpenTimer0
   _ReadTimer0
   ___awtoft
     ___ftpack
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
   ___ftneg
     ___awtoft (ARG)
       ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
   _adc_init
   _adc_read
   _lcd_init
     _lcd_clear
       _lcd_write_cmd_busy
         _lcd_busy
           _lcd_clock_e
         _lcd_write_cmd_data
           _lcd_clock_e
     _lcd_clock_e
     _lcd_write_cmd_busy
       _lcd_busy
         _lcd_clock_e
       _lcd_write_cmd_data
         _lcd_clock_e
   _lcd_position
     _lcd_write_cmd_busy
       _lcd_busy
         _lcd_clock_e
       _lcd_write_cmd_data
         _lcd_clock_e
   _lcd_printf
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lldiv
     ___llmod
     ___lwtoft
       ___ftpack
     _lcd_putc
       _lcd_position
         _lcd_write_cmd_busy
           _lcd_busy
             _lcd_clock_e
           _lcd_write_cmd_data
             _lcd_clock_e
       _lcd_write_cmd_busy
         _lcd_busy
           _lcd_clock_e
         _lcd_write_cmd_data
           _lcd_clock_e
       _lcd_write_data_busy
         _lcd_busy
           _lcd_clock_e
         _lcd_write_cmd_data
           _lcd_clock_e
     _lcd_repete_n
       _lcd_write_data_busy
         _lcd_busy
           _lcd_clock_e
         _lcd_write_cmd_data
           _lcd_clock_e
     _lcd_write_data_busy
       _lcd_busy
         _lcd_clock_e
       _lcd_write_cmd_data
         _lcd_clock_e
   _pwm_init
   _pwm_setdc1
     ___fttol (ARG)
   _pwm_setdc2
     ___fttol (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     4B      4B       1       78.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5B      5B       5       56.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Jan 06 14:24:27 2020

               ?_lcd_repete_n 0003                            l31 15DA                            l75 239A  
               ?_lcd_position 0003                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                  ___ftadd@exp1 001B  
                ___ftadd@exp2 001A                  ___ftadd@sign 0019                           l205 0CFE  
                         l152 0992                           l145 093E                           l234 0EA0  
                         l162 0A40                           l147 0996                           l228 0E4E  
                         l245 0F44                           l246 0F62                           l238 0F10  
                         l335 2280                           l247 0F4E                           l192 0C00  
                         l435 240E                           l436 2410                           l277 11F8  
                         l278 1218                           l279 120A                           l741 1A72  
                         l718 1F36                           l745 1A9C                           l843 2194  
                         l756 1B4C                           l765 1B68                           l853 21FA  
                         l776 1E76                           l798 23E6                  __CFG_CPB$OFF 000000  
                         _PR2 000FCB                  __CFG_CPD$OFF 000000                           wreg 000FE8  
             ReadTimer0@timer 0003                  __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0034  
                ___ftdiv@sign 0039                  __CFG_WDT$OFF 000000                          l3003 0982  
                        l3111 0B8E                          l3103 0B64                          l3201 0D64  
                        l3121 0BCC                          l3113 0B94                          l3105 0B70  
                        l3033 0A30                          l3025 09F0                          l3009 09A0  
                        l3211 0D8C                          l3203 0D68                          l3027 0A04  
                        l3141 0C20                          l3109 0B82                          l3061 0AA8  
                        l3029 0A0C                          l3231 0E20                          l3223 0DD8  
                        l3151 0C56                          l3063 0AAC                          l3039 0A4A  
                        l2601 1DEA                          l2513 2240                          l2505 221C  
                        l2521 2462                          l3241 0E8C                          l3233 0E4A  
                        l3161 0C92                          l3153 0C66                          l3137 0C18  
                        l3073 0AE0                          l3065 0AC2                          l3049 0A76  
                        l2443 244A                          l2451 2420                          l2523 2468  
                        l3411 12A8                          l3323 1074                          l3315 104C  
                        l3219 0DC2                          l3243 0E90                          l3091 0B28  
                        l3083 0B06                          l3075 0AE6                          l2533 1A80  
                        l2517 2250                          l2509 222C                          l3421 12D0  
                        l3405 1288                          l3341 10BC                          l3325 107C  
                        l3261 0EDA                          l3077 0AF0                          l3069 0AD8  
                        l2471 1EC6                          l3511 22DE                          l2607 1E12  
                        l2703 2120                          l3335 10A0                          l3327 1082  
                        l3255 0ECC                          l3239 0E6E                          l3159 0C8C  
                        l2481 1F22                          l2473 1ED0                          l2561 1AFC  
                        l3441 1346                          l3433 1326                          l3425 12DE  
                        l3417 12C2                          l3361 1154                          l3353 112A  
                        l3345 1108                          l3257 0ED0                          l3265 0EE2  
                        l3185 0D16                          l3169 0CCA                          l2483 1F2C  
                        l2475 1EEE                          l2467 1EB8                          l2563 1B06  
                        l2555 1ADA                          l2539 1AAA                          l2627 1E50  
                        l2459 2434                          l3451 1368                          l3371 117E  
                        l3339 10B6                          l3291 0F80                          l3259 0ED4  
                        l3099 0B58                          l2821 1F82                          l2813 1F6E  
                        l2805 1F5A                          l2581 1B84                          l2573 1B3A  
                        l2565 1B10                          l2653 1D1E                          l2717 1C06  
                        l3461 139A                          l3445 1350                          l3365 1168  
                        l3357 113C                          l3277 0F3E                          l3269 0F1C  
                        l3189 0D1E                          l3533 1650                          l2479 1F04  
                        l2591 1BB4                          l2575 1B44                          l2567 1B18  
                        l2671 1D60                          l2647 1CF6                          l2735 1C6C  
                        l3447 135E                          l3287 0F5C                          l3199 0D54  
                        l2911 22A6                          l3535 1666                          l2833 1FA2  
                        l2817 1F78                          l2809 1F64                          l2681 1D88  
                        l2753 1CBC                          l2745 1C94                          l3465 13AA  
                        l3457 1388                          l3377 11AA                          l3369 1176  
                        l2921 22BC                          l2913 22AA                          l3545 16BE  
                        l2827 1F92                          l2667 1D50                          l2747 1CA0  
                        l2739 1C7C                          l2763 2146                          l3491 150A  
                        l3483 14EC                          l3475 1448                          l3299 0FCA  
                        l3539 1682                          l2845 1FC0                          l2693 20C4  
                        l2677 1D78                          l2749 1CA6                          l2765 2152  
                        l2839 1FB4                          l2847 1FF4                          l2775 2186  
                        l2767 2156                          l2791 21EC                          l2783 21B8  
                        l3487 1500                          l3479 145A                          l3495 1518  
                        l2951 0854                          l2919 22B8                          l2697 20F4  
                        l2785 21C4                          l2961 088C                          l3497 1590  
                        l2787 21C8                          l3499 1598                          l2963 0892  
                        l2971 08C0                          l2965 0898                          l2957 0880  
                        l2959 0886                          l2969 089E                          l2995 0942  
                        l2997 0956                          l2999 095E                          STR_1 0822  
                        STR_2 0835                          STR_3 082E                          STR_4 0812  
                        STR_5 0835                          STR_6 082E                          STR_7 0835  
                        STR_8 082E                          STR_9 083F                          u2151 1A3E  
                        u2161 1A52                          u2411 1CDE                          u2431 1D06  
                        u2511 1BEA                          u2361 1DD2                          u2530 1C24  
               __CFG_DEBUG$ON 000000                          u2381 1DFA                          u2535 1C1C  
                        u3800 161C                          u3810 1630                          u3840 167C  
                        u3808 161E                          u3818 1632                          u3907 202E  
                        u3917 2046                          u3927 205A                          u3937 206C  
                        u3897 200E                          _TMR2 000FCC                   lcd_printf@c 00A2  
                 lcd_printf@f 003A                   lcd_printf@i 008D                   lcd_printf@k 0089  
                 lcd_printf@n 009B                   lcd_printf@q 0086                   lcd_printf@w 008E  
                 lcd_printf@x 0096    pwm_setdc1@cycles_etat_haut 0010                          _main 15B8  
                ___ftpack@arg 0001                  ___ftpack@exp 0004                   main@moteurD 00B2  
                 main@moteurG 00AF                          fsr2h 000FDA                          indf2 000FDF  
                        fsr2l 000FD9                          prodl 000FF3                          start 0000  
         __end_of_CloseTimer0 24B0                  ___ftmul@cntr 0029                  ___param_bank 000000  
                ___ftmul@sign 002A                ??_lcd_repete_n 0004                  ___fttol@exp1 000F  
                ___fttol@lval 000B                ??_lcd_position 0004                 __CFG_PLLDIV$5 000000  
                       ?_main 0001               __end_of___ftadd 1BDA                         STR_10 083C  
             __end_of___ftdiv 1EA8               __end_of___ftneg 23F4               __end_of___lldiv 21A6  
             __end_of___ftmul 1DC2                         _T0CON 000FD5                         _T1CON 000FCD  
             __end_of___llmod 220C               __end_of___fttol 1CCE                         _T2CON 000FCA  
                       _T3CON 000FB1                         _TMR0H 000FD7                         _TMR1H 000FCF  
                       _TMR0L 000FD6                         _TMR1L 000FCE                         _TMR3H 000FB3  
                       _TMR3L 000FB2                         _PORTD 000F83                 __CFG_USBDIV$2 000000  
                       _TRISA 000F92                         _TRISD 000F95                         _TRISE 000F96  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                  lcd_printf@ap 009D  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                 ___awtoft@sign 000C                 ___ftpack@sign 0005  
                       tablat 000FF5                         status 000FD8               __initialization 2496  
                __end_of_main 1A2E                    _ReadTimer0 2484                        ??_main 004B  
               ___fttol@sign1 000A                 __activetblptr 000002   __end_of_lcd_write_data_busy 2448  
               lcd_repete_n@c 0003                        _ADCON0 000FC2                        _ADCON1 000FC1  
               lcd_repete_n@n 0004                        _ADCON2 000FC0              ___llmod@dividend 0001  
                      _ADRESH 000FC4                        _ADRESL 000FC3                        _CCPR1L 000FBE  
                      _CCPR2L 000FBB              __end_of___awtoft 2302              __end_of___ftpack 1F56  
            __end_of_adc_init 1FFC              __end_of_adc_read 23AC                    _OpenTimer0 23F4  
            __end_of___lwtoft 23D0                   _CloseTimer0 24A8                __CFG_VREGEN$ON 000000  
        __size_of_lcd_clock_e 0012              __end_of_lcd_busy 2292              __end_of_lcd_init 2094  
               lcd_printf@buf 0060              __end_of_lcd_putc 2258                        ___ftge 2094  
                   ??___ftadd 0016                     ??___ftdiv 0031                     ??___ftneg 0010  
                   ??___lldiv 0009                     ??___ftmul 0022                     ??___llmod 0009  
                   ??___fttol 0005              OpenTimer0@config 0001              __end_of_s_digits 0812  
  pwm_setdc2@cycles_etat_haut 0010                        main@n1 00AB                        main@n2 00B5  
                      main@n3 00B7                        main@n4 00AD         ___ftmul@f3_as_product 0026  
                __mediumconst 0000                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8              __end_of_pwm_init 22CA          __end_of_lcd_repete_n 2472  
        __end_of_lcd_position 2432                    __accesstop 0060       __end_of__initialization 2496  
             __CFG_PBADEN$OFF 000000                    ___ftadd@f1 0010                    ___ftadd@f2 0013  
                  ___ftge@ff1 0001                    ___ftge@ff2 0004                 ___rparam_used 000001  
 __size_of_lcd_write_cmd_data 002C                    ___ftdiv@f1 002B                    ___ftdiv@f2 002E  
                  ___ftdiv@f3 0035   __size_of_lcd_write_cmd_busy 0016                    ___ftneg@f1 000D  
                  ___awtoft@c 0009                    ___ftmul@f1 001C                    ___ftmul@f2 001F  
                  ___fttol@f1 0001                __pcstackCOMRAM 0001             main@debutDeCourse 00A5  
                 ?_ReadTimer0 0001                    ___lwtoft@c 0009            __size_of_lcd_clear 0008  
                 ?_OpenTimer0 0001                       ?___ftge 0001                       _CCP1CON 000FBD  
                     _CCP2CON 000FBA                     ?___awtoft 0009                     ?___ftpack 0001  
                   ?_adc_init 0001                     ?_adc_read 0001                     ?___lwtoft 0009  
    lcd_printf@have_precision 0095                    _lcd_printf 0844                     ?_lcd_busy 0001  
                   ?_lcd_init 0001                     ?_lcd_putc 0001           __size_of_ReadTimer0 0012  
           lcd_position@ligne 0004                       __Hparam 0000                       __Lparam 0000  
           __end_of_lcd_clear 24A8                lcd_printf@cval 009A                lcd_printf@larg 0090  
              lcd_printf@sign 0088                lcd_printf@size 0094               __size_of___ftge 0090  
                     ___ftadd 1A2E                       ___ftdiv 1DC2                       ___ftneg 23D0  
                     ___lldiv 2124                       ___ftmul 1CCE                       ___llmod 21A6  
                     ___fttol 1BDA                     ?_pwm_init 0001                  __psmallconst 0800  
              lcd_putc@lettre 0006                       __pcinit 2496                    ??___awtoft 000C  
                  ??___ftpack 0006                       __ramtop 0800           __size_of_OpenTimer0 0020  
                  ??_adc_init 0001                    ??_adc_read 0003                       __ptext0 15B8  
                     __ptext1 232E                       __ptext2 2358                       __ptext3 2292  
                     __ptext4 0844                       __ptext5 245E                       __ptext6 220C  
                     __ptext7 2432                       __ptext8 2414                       __ptext9 23AC  
                  ??___lwtoft 000C                     _T0CONbits 000FD5                     _T1CONbits 000FCD  
                   _T2CONbits 000FCA         __size_of_lcd_repete_n 0014                     _T3CONbits 000FB1  
       __size_of_lcd_position 001E                    ??_lcd_busy 0001                    ??_lcd_init 0003  
                  ??_lcd_putc 0006          end_of_initialization 2496                  ?_CloseTimer0 0001  
               __Lmediumconst 0000               ___lldiv@divisor 0005               ___lldiv@counter 000D  
                     postdec2 000FDD                       postinc2 000FDE                    ??_pwm_init 0002  
                _lcd_repete_n 245E                  _lcd_position 2414                     _PORTDbits 000F83  
              main@vitesseMax 00A9                     _PORTEbits 000F84  adc_init@numero_dernier_canal 0001  
                   _TRISCbits 000F94                     _TRISEbits 000F96           lcd_position@address 0005  
                 ?_lcd_printf 003A                    _pwm_setdc1 2358                    _pwm_setdc2 232E  
         lcd_position@colonne 0003  __size_of_lcd_write_data_busy 0016                   _CCP1CONbits 000FBD  
                 ___ftdiv@exp 0038                 ??_lcd_clock_e 0001                   _CCP2CONbits 000FBA  
                 ___ftmul@exp 0025                  ??_ReadTimer0 0003                __end_of___ftge 2124  
        lcd_write_data_busy@c 0002           start_initialization 2496               main@finDeCourse 00A7  
                ??_OpenTimer0 0001            __end_of_ReadTimer0 2496    __end_of_lcd_write_cmd_data 232E  
  __end_of_lcd_write_cmd_busy 245E               ___llmod@divisor 0005               ___llmod@counter 0009  
                    ??___ftge 0007           __end_of_lcd_clock_e 2484           __size_of_lcd_printf 0D74  
          __end_of_OpenTimer0 2414             __size_of___awtoft 0038             __size_of___ftpack 00AE  
              pwm_init@period 0002             __size_of_adc_init 00A6             __size_of_adc_read 002A  
           __size_of___lwtoft 0024                 __pcstackBANK0 0060                   ?_pwm_setdc1 0010  
                 ?_pwm_setdc2 0010             __size_of_lcd_busy 003A             __size_of_lcd_init 0098  
           __size_of_lcd_putc 004C          __size_of_CloseTimer0 0008                     _main$1643 00B9  
                    ?___ftadd 0010                      ?___ftdiv 002B                      ?___ftneg 000D  
                    ?___lldiv 0001                      ?___ftmul 001C                      ?___llmod 0001  
                    ?___fttol 0001                     _lcd_clear 24A0             __size_of_pwm_init 0038  
                 __smallconst 0800                   _lcd_clock_e 2472                      _PIE1bits 000F9D  
                    _PIE2bits 000FA0                      _PIR1bits 000F9E                      _PIR2bits 000FA1  
         __size_of_pwm_setdc1 002A           __size_of_pwm_setdc2 002A                    ?_lcd_clear 0001  
         _lcd_write_data_busy 2432                    _ADCON0bits 000FC2                     main@timer 00A3  
                ??_lcd_printf 0044          ?_lcd_write_data_busy 0001           lcd_write_cmd_data@c 0001  
         lcd_write_cmd_busy@c 0002                      __Hrparam 0000                      __Lrparam 0000  
        adc_read@numero_canal 0005               lcd_printf@flags 009F               lcd_printf@width 00A1  
            __size_of___ftadd 01AC            __end_of_lcd_printf 15B8              __size_of___ftdiv 00E6  
            __size_of___ftneg 0024              __size_of___lldiv 0082              __size_of___ftmul 00F4  
            __size_of___llmod 0066              __size_of___fttol 00F4                      ___awtoft 22CA  
                    ___ftpack 1EA8          __CFG_FOSC$ECPLLIO_EC 000000                      _adc_init 1F56  
                    _adc_read 2382                      ___lwtoft 23AC                      __ptext10 21A6  
                    __ptext11 2124                      __ptext20 2448                      __ptext12 1BDA  
                    __ptext21 2302                      __ptext13 23D0                      __ptext30 24A8  
                    __ptext22 2258                      __ptext14 1CCE                      __ptext23 2472  
                    __ptext15 2094                      __ptext24 2382                      __ptext16 1DC2  
                    __ptext25 1F56                      __ptext17 1A2E                      __ptext26 22CA  
                    __ptext18 1FFC                      __ptext27 1EA8                      __ptext19 24A0  
                    __ptext28 2484                      __ptext29 23F4                      _lcd_busy 2258  
                    _lcd_init 1FFC                      _lcd_putc 220C         ??_lcd_write_data_busy 0002  
               __size_of_main 0476                      _s_digits 0801            _lcd_write_cmd_data 2302  
                    _pwm_init 2292            _lcd_write_cmd_busy 2448                   ??_lcd_clear 0003  
       __CFG_CPUDIV$OSC1_PLL2 000000           ?_lcd_write_cmd_data 0001           ?_lcd_write_cmd_busy 0001  
                  _INTCONbits 000FF2                  ??_pwm_setdc1 0012                  ??_pwm_setdc2 0012  
         lcd_printf@digit_cnt 008F           lcd_printf@have_sign 008B              ___lldiv@dividend 0001  
        ??_lcd_write_cmd_data 0001          ??_lcd_write_cmd_busy 0002          lcd_printf@prefix_cnt 008C  
          __end_of_pwm_setdc1 2382            __end_of_pwm_setdc2 2358              ___lldiv@quotient 0009  
         lcd_printf@ramstring 0081           lcd_printf@sign_char 0083           lcd_printf@precision 00A0  
         lcd_printf@space_cnt 0099             pwm_init@nb_canaux 0001                 ??_CloseTimer0 0001  
                ?_lcd_clock_e 0001           lcd_printf@romstring 0084  
