

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Jan 06 16:48:48 2020

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39  0000                     
    40                           ; Version 1.42
    41                           ; Generated 13/04/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4550 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	smallconst
    76  000800                     __psmallconst:
    77                           	opt stack 0
    78  000800  00                 	db	0
    79  000801                     _s_digits:
    80                           	opt stack 0
    81  000801  30                 	db	48
    82  000802  31                 	db	49
    83  000803  32                 	db	50
    84  000804  33                 	db	51
    85  000805  34                 	db	52
    86  000806  35                 	db	53
    87  000807  36                 	db	54
    88  000808  37                 	db	55
    89  000809  38                 	db	56
    90  00080A  39                 	db	57
    91  00080B  61                 	db	97
    92  00080C  62                 	db	98
    93  00080D  63                 	db	99
    94  00080E  64                 	db	100
    95  00080F  65                 	db	101
    96  000810  66                 	db	102
    97  000811  00                 	db	0
    98  000812                     __end_of_s_digits:
    99                           	opt stack 0
   100  0000                     _T3CONbits	set	4017
   101  0000                     _PIE2bits	set	4000
   102  0000                     _PIR2bits	set	4001
   103  0000                     _TMR3L	set	4018
   104  0000                     _TMR3H	set	4019
   105  0000                     _T3CON	set	4017
   106  0000                     _TMR2	set	4044
   107  0000                     _PIE1bits	set	3997
   108  0000                     _PIR1bits	set	3998
   109  0000                     _TMR1L	set	4046
   110  0000                     _TMR1H	set	4047
   111  0000                     _T1CONbits	set	4045
   112  0000                     _T1CON	set	4045
   113  0000                     _T0CONbits	set	4053
   114  0000                     _INTCONbits	set	4082
   115  0000                     _TMR0L	set	4054
   116  0000                     _TMR0H	set	4055
   117  0000                     _T0CON	set	4053
   118  0000                     _CCP2CONbits	set	4026
   119  0000                     _CCPR2L	set	4027
   120  0000                     _CCP1CONbits	set	4029
   121  0000                     _CCPR1L	set	4030
   122  0000                     _T2CONbits	set	4042
   123  0000                     _PR2	set	4043
   124  0000                     _CCP2CON	set	4026
   125  0000                     _TRISCbits	set	3988
   126  0000                     _CCP1CON	set	4029
   127  0000                     _T2CON	set	4042
   128  0000                     _PORTDbits	set	3971
   129  0000                     _PORTD	set	3971
   130  0000                     _TRISD	set	3989
   131  0000                     _ADRESL	set	4035
   132  0000                     _ADRESH	set	4036
   133  0000                     _ADCON0	set	4034
   134  0000                     _ADCON0bits	set	4034
   135  0000                     _ADCON2	set	4032
   136  0000                     _TRISE	set	3990
   137  0000                     _TRISA	set	3986
   138  0000                     _ADCON1	set	4033
   139  0000                     _PORTEbits	set	3972
   140  0000                     _TRISEbits	set	3990
   141  000812                     STR_1:
   142  000812  25                 	db	37
   143  000813  33                 	db	51	;'3'
   144  000814  64                 	db	100	;'d'
   145  000815  20                 	db	32
   146  000816  25                 	db	37
   147  000817  33                 	db	51	;'3'
   148  000818  64                 	db	100	;'d'
   149  000819  20                 	db	32
   150  00081A  25                 	db	37
   151  00081B  33                 	db	51	;'3'
   152  00081C  64                 	db	100	;'d'
   153  00081D  20                 	db	32
   154  00081E  25                 	db	37
   155  00081F  33                 	db	51	;'3'
   156  000820  64                 	db	100	;'d'
   157  000821  00                 	db	0
   158  000822                     STR_2:
   159  000822  25                 	db	37
   160  000823  34                 	db	52	;'4'
   161  000824  64                 	db	100	;'d'
   162  000825  00                 	db	0
   163  000826  25                 	db	37
   164  000827  53                 	db	83	;'S'
   165  000828  00                 	db	0
   166  000829  25                 	db	37
   167  00082A  64                 	db	100	;'d'
   168  00082B  00                 	db	0
   169  0000                     
   170                           ; #config settings
   171  00082C  00                 	db	0	; dummy byte at the end
   172  0000                     
   173                           	psect	cinit
   174  0023AC                     __pcinit:
   175                           	opt stack 0
   176  0023AC                     start_initialization:
   177                           	opt stack 0
   178  0023AC                     __initialization:
   179                           	opt stack 0
   180  0023AC                     end_of_initialization:
   181                           	opt stack 0
   182  0023AC                     __end_of__initialization:
   183                           	opt stack 0
   184  0023AC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   185  0023AE  6EF8               	movwf	tblptru,c
   186  0023B0  0100               	movlb	0
   187  0023B2  EFD1  F00A         	goto	_main	;jump to C main() function
   188                           tblptru	equ	0xFF8
   189                           
   190                           	psect	cstackBANK0
   191  000060                     __pcstackBANK0:
   192                           	opt stack 0
   193  000060                     lcd_printf@buf:
   194                           	opt stack 0
   195                           
   196                           ; 33 bytes @ 0x0
   197  000060                     	ds	33
   198  000081                     lcd_printf@ramstring:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x21
   202  000081                     	ds	2
   203  000083                     lcd_printf@sign_char:
   204                           	opt stack 0
   205                           
   206                           ; 1 bytes @ 0x23
   207  000083                     	ds	1
   208  000084                     lcd_printf@romstring:
   209                           	opt stack 0
   210                           
   211                           ; 2 bytes @ 0x24
   212  000084                     	ds	2
   213  000086                     lcd_printf@q:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x26
   217  000086                     	ds	2
   218  000088                     lcd_printf@sign:
   219                           	opt stack 0
   220                           
   221                           ; 1 bytes @ 0x28
   222  000088                     	ds	1
   223  000089                     lcd_printf@k:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0x29
   227  000089                     	ds	2
   228  00008B                     lcd_printf@have_sign:
   229                           	opt stack 0
   230                           
   231                           ; 1 bytes @ 0x2B
   232  00008B                     	ds	1
   233  00008C                     lcd_printf@prefix_cnt:
   234                           	opt stack 0
   235                           
   236                           ; 1 bytes @ 0x2C
   237  00008C                     	ds	1
   238  00008D                     lcd_printf@i:
   239                           	opt stack 0
   240                           
   241                           ; 1 bytes @ 0x2D
   242  00008D                     	ds	1
   243  00008E                     lcd_printf@w:
   244                           	opt stack 0
   245                           
   246                           ; 1 bytes @ 0x2E
   247  00008E                     	ds	1
   248  00008F                     lcd_printf@digit_cnt:
   249                           	opt stack 0
   250                           
   251                           ; 1 bytes @ 0x2F
   252  00008F                     	ds	1
   253  000090                     lcd_printf@larg:
   254                           	opt stack 0
   255                           
   256                           ; 4 bytes @ 0x30
   257  000090                     	ds	4
   258  000094                     lcd_printf@size:
   259                           	opt stack 0
   260                           
   261                           ; 1 bytes @ 0x34
   262  000094                     	ds	1
   263  000095                     lcd_printf@have_precision:
   264                           	opt stack 0
   265                           
   266                           ; 1 bytes @ 0x35
   267  000095                     	ds	1
   268  000096                     lcd_printf@x:
   269                           	opt stack 0
   270                           
   271                           ; 3 bytes @ 0x36
   272  000096                     	ds	3
   273  000099                     lcd_printf@space_cnt:
   274                           	opt stack 0
   275                           
   276                           ; 1 bytes @ 0x39
   277  000099                     	ds	1
   278  00009A                     lcd_printf@cval:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x3A
   282  00009A                     	ds	1
   283  00009B                     lcd_printf@n:
   284                           	opt stack 0
   285                           
   286                           ; 2 bytes @ 0x3B
   287  00009B                     	ds	2
   288  00009D                     lcd_printf@ap:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x3D
   292  00009D                     	ds	2
   293  00009F                     lcd_printf@flags:
   294                           	opt stack 0
   295                           
   296                           ; 1 bytes @ 0x3F
   297  00009F                     	ds	1
   298  0000A0                     lcd_printf@precision:
   299                           	opt stack 0
   300                           
   301                           ; 1 bytes @ 0x40
   302  0000A0                     	ds	1
   303  0000A1                     lcd_printf@width:
   304                           	opt stack 0
   305                           
   306                           ; 1 bytes @ 0x41
   307  0000A1                     	ds	1
   308  0000A2                     lcd_printf@c:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x42
   312  0000A2                     	ds	1
   313  0000A3                     main@n1:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x43
   317  0000A3                     	ds	2
   318  0000A5                     main@n4:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x45
   322  0000A5                     	ds	2
   323  0000A7                     main@debutDeCourse:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x47
   327  0000A7                     	ds	2
   328  0000A9                     main@finDeCourse:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x49
   332  0000A9                     	ds	2
   333  0000AB                     main@n2:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x4B
   337  0000AB                     	ds	2
   338  0000AD                     main@n3:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x4D
   342  0000AD                     	ds	2
   343  0000AF                     main@moteurG:
   344                           	opt stack 0
   345                           
   346                           ; 3 bytes @ 0x4F
   347  0000AF                     	ds	3
   348  0000B2                     main@moteurD:
   349                           	opt stack 0
   350                           
   351                           ; 3 bytes @ 0x52
   352  0000B2                     	ds	3
   353  0000B5                     main@vitesseMax:
   354                           	opt stack 0
   355                           
   356                           ; 3 bytes @ 0x55
   357  0000B5                     	ds	3
   358  0000B8                     _main$1637:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x58
   362  0000B8                     	ds	2
   363                           tblptru	equ	0xFF8
   364                           
   365                           	psect	cstackCOMRAM
   366  000001                     __pcstackCOMRAM:
   367                           	opt stack 0
   368  000001                     ?_adc_read:
   369                           	opt stack 0
   370  000001                     ?___ftpack:
   371                           	opt stack 0
   372  000001                     ?___fttol:
   373                           	opt stack 0
   374  000001                     ?___lldiv:
   375                           	opt stack 0
   376  000001                     ?___llmod:
   377                           	opt stack 0
   378  000001                     adc_init@numero_dernier_canal:
   379                           	opt stack 0
   380  000001                     lcd_write_cmd_data@c:
   381                           	opt stack 0
   382  000001                     pwm_init@nb_canaux:
   383                           	opt stack 0
   384  000001                     ___ftpack@arg:
   385                           	opt stack 0
   386  000001                     ___ftge@ff1:
   387                           	opt stack 0
   388  000001                     ___fttol@f1:
   389                           	opt stack 0
   390  000001                     ___lldiv@dividend:
   391                           	opt stack 0
   392  000001                     ___llmod@dividend:
   393                           	opt stack 0
   394                           
   395                           ; 4 bytes @ 0x0
   396  000001                     	ds	1
   397  000002                     lcd_write_data_busy@c:
   398                           	opt stack 0
   399  000002                     lcd_write_cmd_busy@c:
   400                           	opt stack 0
   401  000002                     pwm_init@period:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0x1
   405  000002                     	ds	1
   406  000003                     ??_lcd_init:
   407  000003                     ??_adc_read:
   408  000003                     lcd_position@colonne:
   409                           	opt stack 0
   410  000003                     lcd_repete_n@c:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x2
   414  000003                     	ds	1
   415  000004                     lcd_position@ligne:
   416                           	opt stack 0
   417  000004                     lcd_repete_n@n:
   418                           	opt stack 0
   419  000004                     ___ftpack@exp:
   420                           	opt stack 0
   421  000004                     ___ftge@ff2:
   422                           	opt stack 0
   423                           
   424                           ; 3 bytes @ 0x3
   425  000004                     	ds	1
   426  000005                     ??___fttol:
   427  000005                     adc_read@numero_canal:
   428                           	opt stack 0
   429  000005                     lcd_position@address:
   430                           	opt stack 0
   431  000005                     ___ftpack@sign:
   432                           	opt stack 0
   433  000005                     ___lldiv@divisor:
   434                           	opt stack 0
   435  000005                     ___llmod@divisor:
   436                           	opt stack 0
   437                           
   438                           ; 4 bytes @ 0x4
   439  000005                     	ds	1
   440  000006                     ??___ftpack:
   441  000006                     lcd_putc@lettre:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x5
   445  000006                     	ds	1
   446  000007                     ??___ftge:
   447                           
   448                           ; 1 bytes @ 0x6
   449  000007                     	ds	2
   450  000009                     ?___awtoft:
   451                           	opt stack 0
   452  000009                     ?___lwtoft:
   453                           	opt stack 0
   454  000009                     ___llmod@counter:
   455                           	opt stack 0
   456  000009                     ___awtoft@c:
   457                           	opt stack 0
   458  000009                     ___lwtoft@c:
   459                           	opt stack 0
   460  000009                     ___lldiv@quotient:
   461                           	opt stack 0
   462                           
   463                           ; 4 bytes @ 0x8
   464  000009                     	ds	1
   465  00000A                     ___fttol@sign1:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x9
   469  00000A                     	ds	1
   470  00000B                     ___fttol@lval:
   471                           	opt stack 0
   472                           
   473                           ; 4 bytes @ 0xA
   474  00000B                     	ds	1
   475  00000C                     ___awtoft@sign:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0xB
   479  00000C                     	ds	1
   480  00000D                     ?___ftneg:
   481                           	opt stack 0
   482  00000D                     ___lldiv@counter:
   483                           	opt stack 0
   484  00000D                     ___ftneg@f1:
   485                           	opt stack 0
   486                           
   487                           ; 3 bytes @ 0xC
   488  00000D                     	ds	2
   489  00000F                     ___fttol@exp1:
   490                           	opt stack 0
   491                           
   492                           ; 1 bytes @ 0xE
   493  00000F                     	ds	1
   494  000010                     ?___ftadd:
   495                           	opt stack 0
   496  000010                     pwm_setdc1@cycles_etat_haut:
   497                           	opt stack 0
   498  000010                     pwm_setdc2@cycles_etat_haut:
   499                           	opt stack 0
   500  000010                     ___ftadd@f1:
   501                           	opt stack 0
   502                           
   503                           ; 3 bytes @ 0xF
   504  000010                     	ds	2
   505  000012                     ??_pwm_setdc1:
   506  000012                     ??_pwm_setdc2:
   507                           
   508                           ; 1 bytes @ 0x11
   509  000012                     	ds	1
   510  000013                     ___ftadd@f2:
   511                           	opt stack 0
   512                           
   513                           ; 3 bytes @ 0x12
   514  000013                     	ds	3
   515  000016                     ??___ftadd:
   516                           
   517                           ; 1 bytes @ 0x15
   518  000016                     	ds	3
   519  000019                     ___ftadd@sign:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0x18
   523  000019                     	ds	1
   524  00001A                     ___ftadd@exp2:
   525                           	opt stack 0
   526                           
   527                           ; 1 bytes @ 0x19
   528  00001A                     	ds	1
   529  00001B                     ___ftadd@exp1:
   530                           	opt stack 0
   531                           
   532                           ; 1 bytes @ 0x1A
   533  00001B                     	ds	1
   534  00001C                     ?___ftdiv:
   535                           	opt stack 0
   536  00001C                     ___ftdiv@f1:
   537                           	opt stack 0
   538                           
   539                           ; 3 bytes @ 0x1B
   540  00001C                     	ds	3
   541  00001F                     ___ftdiv@f2:
   542                           	opt stack 0
   543                           
   544                           ; 3 bytes @ 0x1E
   545  00001F                     	ds	3
   546  000022                     ??___ftdiv:
   547                           
   548                           ; 1 bytes @ 0x21
   549  000022                     	ds	3
   550  000025                     ___ftdiv@cntr:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x24
   554  000025                     	ds	1
   555  000026                     ___ftdiv@f3:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x25
   559  000026                     	ds	3
   560  000029                     ___ftdiv@exp:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x28
   564  000029                     	ds	1
   565  00002A                     ___ftdiv@sign:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x29
   569  00002A                     	ds	1
   570  00002B                     ?___ftmul:
   571                           	opt stack 0
   572  00002B                     ___ftmul@f1:
   573                           	opt stack 0
   574                           
   575                           ; 3 bytes @ 0x2A
   576  00002B                     	ds	3
   577  00002E                     ___ftmul@f2:
   578                           	opt stack 0
   579                           
   580                           ; 3 bytes @ 0x2D
   581  00002E                     	ds	3
   582  000031                     ??___ftmul:
   583                           
   584                           ; 1 bytes @ 0x30
   585  000031                     	ds	3
   586  000034                     ___ftmul@exp:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x33
   590  000034                     	ds	1
   591  000035                     ___ftmul@f3_as_product:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0x34
   595  000035                     	ds	3
   596  000038                     ___ftmul@cntr:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x37
   600  000038                     	ds	1
   601  000039                     ___ftmul@sign:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x38
   605  000039                     	ds	1
   606  00003A                     ?_lcd_printf:
   607                           	opt stack 0
   608  00003A                     lcd_printf@f:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x39
   612  00003A                     	ds	10
   613  000044                     ??_lcd_printf:
   614                           
   615                           ; 1 bytes @ 0x43
   616  000044                     	ds	7
   617  00004B                     ??_main:
   618                           
   619                           ; 1 bytes @ 0x4A
   620  00004B                     	ds	1
   621                           tblptru	equ	0xFF8
   622                           
   623 ;;
   624 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   625 ;;
   626 ;; *************** function _main *****************
   627 ;; Defined at:
   628 ;;		line 13 in file "main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  vitesseMax      3   85[BANK0 ] PTR void [1]
   633 ;;  moteurD         3   82[BANK0 ] PTR void [1]
   634 ;;  moteurG         3   79[BANK0 ] PTR void [1]
   635 ;;  n3              2   77[BANK0 ] int 
   636 ;;  n2              2   75[BANK0 ] int 
   637 ;;  finDeCourse     2   73[BANK0 ] int 
   638 ;;  debutDeCours    2   71[BANK0 ] int 
   639 ;;  n4              2   69[BANK0 ] int 
   640 ;;  n1              2   67[BANK0 ] int 
   641 ;; Return value:  Size  Location     Type
   642 ;;                  1    wreg      void 
   643 ;; Registers used:
   644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   650 ;;      Params:         0       0       0       0       0       0       0       0       0
   651 ;;      Locals:         0      23       0       0       0       0       0       0       0
   652 ;;      Temps:          1       0       0       0       0       0       0       0       0
   653 ;;      Totals:         1      23       0       0       0       0       0       0       0
   654 ;;Total ram usage:       24 bytes
   655 ;; Hardware stack levels required when called:    6
   656 ;; This function calls:
   657 ;;		___awtoft
   658 ;;		___ftadd
   659 ;;		___ftdiv
   660 ;;		___ftmul
   661 ;;		___ftneg
   662 ;;		___fttol
   663 ;;		_adc_init
   664 ;;		_adc_read
   665 ;;		_lcd_init
   666 ;;		_lcd_position
   667 ;;		_lcd_printf
   668 ;;		_pwm_init
   669 ;;		_pwm_setdc1
   670 ;;		_pwm_setdc2
   671 ;; This function is called by:
   672 ;;		Startup code after reset
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           	psect	text0
   677  0015A2                     __ptext0:
   678                           	opt stack 0
   679  0015A2                     _main:
   680                           	opt stack 25
   681                           
   682                           ;main.c: 15: int n1,n2,n3,n4;
   683                           ;main.c: 16: adc_init(5);
   684                           
   685                           ;incstack = 0
   686  0015A2  0E05               	movlw	5
   687  0015A4  EC4F  F00F         	call	_adc_init
   688                           
   689                           ;main.c: 17: lcd_init();
   690  0015A8  ECA2  F00F         	call	_lcd_init	;wreg free
   691                           
   692                           ;main.c: 18: int finDeCourse=1, debutDeCourse;
   693  0015AC  0E00               	movlw	0
   694  0015AE  0100               	movlb	0	; () banked
   695  0015B0  6FAA               	movwf	(main@finDeCourse+1)& (0+255),b
   696  0015B2  0E01               	movlw	1
   697  0015B4  6FA9               	movwf	main@finDeCourse& (0+255),b
   698                           
   699                           ; BSR set to: 0
   700                           ;main.c: 19: double moteurG, moteurD;
   701                           ;main.c: 20: double vitesseMax = 180;
   702  0015B6  0E00               	movlw	0
   703  0015B8  0100               	movlb	0	; () banked
   704  0015BA  6FB5               	movwf	main@vitesseMax& (0+255),b
   705  0015BC  0E34               	movlw	52
   706  0015BE  0100               	movlb	0	; () banked
   707  0015C0  6FB6               	movwf	(main@vitesseMax+1)& (0+255),b
   708  0015C2  0E43               	movlw	67
   709  0015C4  0100               	movlb	0	; () banked
   710  0015C6  6FB7               	movwf	(main@vitesseMax+2)& (0+255),b
   711                           
   712                           ; BSR set to: 0
   713                           ;main.c: 22: TRISEbits.TRISE1 = 1;
   714  0015C8  8296               	bsf	3990,1,c	;volatile
   715                           
   716                           ; BSR set to: 0
   717                           ;main.c: 23: TRISEbits.TRISE2 = 1;
   718  0015CA  8496               	bsf	3990,2,c	;volatile
   719  0015CC                     l25:
   720                           
   721                           ;main.c: 27: {
   722                           ;main.c: 28: n1=adc_read(1);
   723  0015CC  0E01               	movlw	1
   724  0015CE  EC65  F011         	call	_adc_read
   725  0015D2  C001  F0A3         	movff	?_adc_read,main@n1
   726  0015D6  C002  F0A4         	movff	?_adc_read+1,main@n1+1
   727                           
   728                           ;main.c: 29: n2=adc_read(3);
   729  0015DA  0E03               	movlw	3
   730  0015DC  EC65  F011         	call	_adc_read
   731  0015E0  C001  F0AB         	movff	?_adc_read,main@n2
   732  0015E4  C002  F0AC         	movff	?_adc_read+1,main@n2+1
   733                           
   734                           ;main.c: 30: n3=adc_read(4);
   735  0015E8  0E04               	movlw	4
   736  0015EA  EC65  F011         	call	_adc_read
   737  0015EE  C001  F0AD         	movff	?_adc_read,main@n3
   738  0015F2  C002  F0AE         	movff	?_adc_read+1,main@n3+1
   739                           
   740                           ;main.c: 31: n4=adc_read(5);
   741  0015F6  0E05               	movlw	5
   742  0015F8  EC65  F011         	call	_adc_read
   743  0015FC  C001  F0A5         	movff	?_adc_read,main@n4
   744  001600  C002  F0A6         	movff	?_adc_read+1,main@n4+1
   745                           
   746                           ;main.c: 33: vitesseMax = adc_read(0)/1023.0*600.0;
   747  001604  0EC0               	movlw	192
   748  001606  6E1F               	movwf	___ftdiv@f2,c
   749  001608  0E7F               	movlw	127
   750  00160A  6E20               	movwf	___ftdiv@f2+1,c
   751  00160C  0E44               	movlw	68
   752  00160E  6E21               	movwf	___ftdiv@f2+2,c
   753  001610  0E00               	movlw	0
   754  001612  EC65  F011         	call	_adc_read
   755  001616  C001  F009         	movff	?_adc_read,___awtoft@c
   756  00161A  C002  F00A         	movff	?_adc_read+1,___awtoft@c+1
   757  00161E  EC09  F011         	call	___awtoft	;wreg free
   758  001622  C009  F01C         	movff	?___awtoft,___ftdiv@f1
   759  001626  C00A  F01D         	movff	?___awtoft+1,___ftdiv@f1+1
   760  00162A  C00B  F01E         	movff	?___awtoft+2,___ftdiv@f1+2
   761  00162E  EC85  F00E         	call	___ftdiv	;wreg free
   762  001632  C01C  F02B         	movff	?___ftdiv,___ftmul@f1
   763  001636  C01D  F02C         	movff	?___ftdiv+1,___ftmul@f1+1
   764  00163A  C01E  F02D         	movff	?___ftdiv+2,___ftmul@f1+2
   765  00163E  0E00               	movlw	0
   766  001640  6E2E               	movwf	___ftmul@f2,c
   767  001642  0E16               	movlw	22
   768  001644  6E2F               	movwf	___ftmul@f2+1,c
   769  001646  0E44               	movlw	68
   770  001648  6E30               	movwf	___ftmul@f2+2,c
   771  00164A  EC0B  F00E         	call	___ftmul	;wreg free
   772  00164E  C02B  F0B5         	movff	?___ftmul,main@vitesseMax
   773  001652  C02C  F0B6         	movff	?___ftmul+1,main@vitesseMax+1
   774  001656  C02D  F0B7         	movff	?___ftmul+2,main@vitesseMax+2
   775                           
   776                           ;main.c: 35: debutDeCourse = PORTEbits.RE1;
   777  00165A  A284               	btfss	3972,1,c	;volatile
   778  00165C  D003               	goto	u3740
   779  00165E  6A4B               	clrf	??_main& (0+255),c
   780  001660  2A4B               	incf	??_main& (0+255),f,c
   781  001662  D001               	goto	u3748
   782  001664                     u3740:
   783  001664  6A4B               	clrf	??_main& (0+255),c
   784  001666                     u3748:
   785  001666  504B               	movf	??_main,w,c
   786  001668  0100               	movlb	0	; () banked
   787  00166A  6FA7               	movwf	main@debutDeCourse& (0+255),b
   788  00166C  6BA8               	clrf	(main@debutDeCourse+1)& (0+255),b
   789                           
   790                           ; BSR set to: 0
   791                           ;main.c: 36: finDeCourse = PORTEbits.RE2;
   792  00166E  A484               	btfss	3972,2,c	;volatile
   793  001670  D003               	goto	u3750
   794  001672  6A4B               	clrf	??_main& (0+255),c
   795  001674  2A4B               	incf	??_main& (0+255),f,c
   796  001676  D001               	goto	u3758
   797  001678                     u3750:
   798  001678  6A4B               	clrf	??_main& (0+255),c
   799  00167A                     u3758:
   800  00167A  504B               	movf	??_main,w,c
   801  00167C  0100               	movlb	0	; () banked
   802  00167E  6FA9               	movwf	main@finDeCourse& (0+255),b
   803  001680  6BAA               	clrf	(main@finDeCourse+1)& (0+255),b
   804                           
   805                           ; BSR set to: 0
   806                           ;main.c: 38: if (debutDeCourse == 1)
   807  001682  0100               	movlb	0	; () banked
   808  001684  05A7               	decf	main@debutDeCourse& (0+255),w,b
   809  001686  0100               	movlb	0	; () banked
   810  001688  11A8               	iorwf	(main@debutDeCourse+1)& (0+255),w,b
   811  00168A  A4D8               	btfss	status,2,c
   812  00168C  D005               	goto	l26
   813                           
   814                           ; BSR set to: 0
   815                           ;main.c: 39: {
   816                           ;main.c: 40: pwm_init (150,2);
   817  00168E  0E02               	movlw	2
   818  001690  6E01               	movwf	pwm_init@nb_canaux,c
   819  001692  0E96               	movlw	150
   820  001694  ECED  F010         	call	_pwm_init
   821  001698                     l26:
   822                           
   823                           ;main.c: 41: }
   824                           ;main.c: 43: moteurG = vitesseMax * (1023-(double)n3)/1024;
   825  001698  C0B5  F02E         	movff	main@vitesseMax,___ftmul@f2
   826  00169C  C0B6  F02F         	movff	main@vitesseMax+1,___ftmul@f2+1
   827  0016A0  C0B7  F030         	movff	main@vitesseMax+2,___ftmul@f2+2
   828  0016A4  0EC0               	movlw	192
   829  0016A6  6E13               	movwf	___ftadd@f2,c
   830  0016A8  0E7F               	movlw	127
   831  0016AA  6E14               	movwf	___ftadd@f2+1,c
   832  0016AC  0E44               	movlw	68
   833  0016AE  6E15               	movwf	___ftadd@f2+2,c
   834  0016B0  C0AD  F009         	movff	main@n3,___awtoft@c
   835  0016B4  C0AE  F00A         	movff	main@n3+1,___awtoft@c+1
   836  0016B8  EC09  F011         	call	___awtoft	;wreg free
   837  0016BC  C009  F00D         	movff	?___awtoft,___ftneg@f1
   838  0016C0  C00A  F00E         	movff	?___awtoft+1,___ftneg@f1+1
   839  0016C4  C00B  F00F         	movff	?___awtoft+2,___ftneg@f1+2
   840  0016C8  EC8C  F011         	call	___ftneg	;wreg free
   841  0016CC  C00D  F010         	movff	?___ftneg,___ftadd@f1
   842  0016D0  C00E  F011         	movff	?___ftneg+1,___ftadd@f1+1
   843  0016D4  C00F  F012         	movff	?___ftneg+2,___ftadd@f1+2
   844  0016D8  ECBB  F00C         	call	___ftadd	;wreg free
   845  0016DC  C010  F02B         	movff	?___ftadd,___ftmul@f1
   846  0016E0  C011  F02C         	movff	?___ftadd+1,___ftmul@f1+1
   847  0016E4  C012  F02D         	movff	?___ftadd+2,___ftmul@f1+2
   848  0016E8  EC0B  F00E         	call	___ftmul	;wreg free
   849  0016EC  C02B  F01C         	movff	?___ftmul,___ftdiv@f1
   850  0016F0  C02C  F01D         	movff	?___ftmul+1,___ftdiv@f1+1
   851  0016F4  C02D  F01E         	movff	?___ftmul+2,___ftdiv@f1+2
   852  0016F8  0E00               	movlw	0
   853  0016FA  6E1F               	movwf	___ftdiv@f2,c
   854  0016FC  0E80               	movlw	128
   855  0016FE  6E20               	movwf	___ftdiv@f2+1,c
   856  001700  0E44               	movlw	68
   857  001702  6E21               	movwf	___ftdiv@f2+2,c
   858  001704  EC85  F00E         	call	___ftdiv	;wreg free
   859  001708  C01C  F0AF         	movff	?___ftdiv,main@moteurG
   860  00170C  C01D  F0B0         	movff	?___ftdiv+1,main@moteurG+1
   861  001710  C01E  F0B1         	movff	?___ftdiv+2,main@moteurG+2
   862                           
   863                           ;main.c: 44: moteurD = vitesseMax * (1023-(double)n2)/1024;
   864  001714  C0B5  F02E         	movff	main@vitesseMax,___ftmul@f2
   865  001718  C0B6  F02F         	movff	main@vitesseMax+1,___ftmul@f2+1
   866  00171C  C0B7  F030         	movff	main@vitesseMax+2,___ftmul@f2+2
   867  001720  0EC0               	movlw	192
   868  001722  6E13               	movwf	___ftadd@f2,c
   869  001724  0E7F               	movlw	127
   870  001726  6E14               	movwf	___ftadd@f2+1,c
   871  001728  0E44               	movlw	68
   872  00172A  6E15               	movwf	___ftadd@f2+2,c
   873  00172C  C0AB  F009         	movff	main@n2,___awtoft@c
   874  001730  C0AC  F00A         	movff	main@n2+1,___awtoft@c+1
   875  001734  EC09  F011         	call	___awtoft	;wreg free
   876  001738  C009  F00D         	movff	?___awtoft,___ftneg@f1
   877  00173C  C00A  F00E         	movff	?___awtoft+1,___ftneg@f1+1
   878  001740  C00B  F00F         	movff	?___awtoft+2,___ftneg@f1+2
   879  001744  EC8C  F011         	call	___ftneg	;wreg free
   880  001748  C00D  F010         	movff	?___ftneg,___ftadd@f1
   881  00174C  C00E  F011         	movff	?___ftneg+1,___ftadd@f1+1
   882  001750  C00F  F012         	movff	?___ftneg+2,___ftadd@f1+2
   883  001754  ECBB  F00C         	call	___ftadd	;wreg free
   884  001758  C010  F02B         	movff	?___ftadd,___ftmul@f1
   885  00175C  C011  F02C         	movff	?___ftadd+1,___ftmul@f1+1
   886  001760  C012  F02D         	movff	?___ftadd+2,___ftmul@f1+2
   887  001764  EC0B  F00E         	call	___ftmul	;wreg free
   888  001768  C02B  F01C         	movff	?___ftmul,___ftdiv@f1
   889  00176C  C02C  F01D         	movff	?___ftmul+1,___ftdiv@f1+1
   890  001770  C02D  F01E         	movff	?___ftmul+2,___ftdiv@f1+2
   891  001774  0E00               	movlw	0
   892  001776  6E1F               	movwf	___ftdiv@f2,c
   893  001778  0E80               	movlw	128
   894  00177A  6E20               	movwf	___ftdiv@f2+1,c
   895  00177C  0E44               	movlw	68
   896  00177E  6E21               	movwf	___ftdiv@f2+2,c
   897  001780  EC85  F00E         	call	___ftdiv	;wreg free
   898  001784  C01C  F0B2         	movff	?___ftdiv,main@moteurD
   899  001788  C01D  F0B3         	movff	?___ftdiv+1,main@moteurD+1
   900  00178C  C01E  F0B4         	movff	?___ftdiv+2,main@moteurD+2
   901                           
   902                           ;main.c: 46: pwm_setdc1(moteurG);
   903  001790  C0AF  F001         	movff	main@moteurG,___fttol@f1
   904  001794  C0B0  F002         	movff	main@moteurG+1,___fttol@f1+1
   905  001798  C0B1  F003         	movff	main@moteurG+2,___fttol@f1+2
   906  00179C  EC91  F00D         	call	___fttol	;wreg free
   907  0017A0  C001  F010         	movff	?___fttol,pwm_setdc1@cycles_etat_haut
   908  0017A4  C002  F011         	movff	?___fttol+1,pwm_setdc1@cycles_etat_haut+1
   909  0017A8  EC50  F011         	call	_pwm_setdc1	;wreg free
   910                           
   911                           ;main.c: 47: pwm_setdc2(moteurD);
   912  0017AC  C0B2  F001         	movff	main@moteurD,___fttol@f1
   913  0017B0  C0B3  F002         	movff	main@moteurD+1,___fttol@f1+1
   914  0017B4  C0B4  F003         	movff	main@moteurD+2,___fttol@f1+2
   915  0017B8  EC91  F00D         	call	___fttol	;wreg free
   916  0017BC  C001  F010         	movff	?___fttol,pwm_setdc2@cycles_etat_haut
   917  0017C0  C002  F011         	movff	?___fttol+1,pwm_setdc2@cycles_etat_haut+1
   918  0017C4  EC3B  F011         	call	_pwm_setdc2	;wreg free
   919                           
   920                           ;main.c: 50: lcd_position(0,0);
   921  0017C8  0E00               	movlw	0
   922  0017CA  6E03               	movwf	lcd_position@colonne,c
   923  0017CC  0E00               	movlw	0
   924  0017CE  EC9E  F011         	call	_lcd_position
   925                           
   926                           ;main.c: 51: lcd_printf("%3d %3d %3d %3d",n1,n2,n3,n4);
   927  0017D2  0E12               	movlw	low STR_1
   928  0017D4  6E3A               	movwf	lcd_printf@f,c
   929  0017D6  0E08               	movlw	high STR_1
   930  0017D8  6E3B               	movwf	lcd_printf@f+1,c
   931  0017DA  C0A3  F03C         	movff	main@n1,?_lcd_printf+2
   932  0017DE  C0A4  F03D         	movff	main@n1+1,?_lcd_printf+3
   933  0017E2  C0AB  F03E         	movff	main@n2,?_lcd_printf+4
   934  0017E6  C0AC  F03F         	movff	main@n2+1,?_lcd_printf+5
   935  0017EA  C0AD  F040         	movff	main@n3,?_lcd_printf+6
   936  0017EE  C0AE  F041         	movff	main@n3+1,?_lcd_printf+7
   937  0017F2  C0A5  F042         	movff	main@n4,?_lcd_printf+8
   938  0017F6  C0A6  F043         	movff	main@n4+1,?_lcd_printf+9
   939  0017FA  EC17  F004         	call	_lcd_printf	;wreg free
   940                           
   941                           ;main.c: 52: lcd_position(1,0);
   942  0017FE  0E00               	movlw	0
   943  001800  6E03               	movwf	lcd_position@colonne,c
   944  001802  0E01               	movlw	1
   945  001804  EC9E  F011         	call	_lcd_position
   946                           
   947                           ;main.c: 53: lcd_printf("%4d",(int) moteurG);
   948  001808  C0AF  F001         	movff	main@moteurG,___fttol@f1
   949  00180C  C0B0  F002         	movff	main@moteurG+1,___fttol@f1+1
   950  001810  C0B1  F003         	movff	main@moteurG+2,___fttol@f1+2
   951  001814  EC91  F00D         	call	___fttol	;wreg free
   952  001818  C001  F0B8         	movff	?___fttol,_main$1637
   953  00181C  C002  F0B9         	movff	?___fttol+1,_main$1637+1
   954                           
   955                           ;main.c: 53: lcd_printf("%4d",(int) moteurG);
   956  001820  0E22               	movlw	low STR_2
   957  001822  6E3A               	movwf	lcd_printf@f,c
   958  001824  0E08               	movlw	high STR_2
   959  001826  6E3B               	movwf	lcd_printf@f+1,c
   960  001828  C0B8  F03C         	movff	_main$1637,?_lcd_printf+2
   961  00182C  C0B9  F03D         	movff	_main$1637+1,?_lcd_printf+3
   962  001830  EC17  F004         	call	_lcd_printf	;wreg free
   963                           
   964                           ;main.c: 54: lcd_position(1,5);
   965  001834  0E05               	movlw	5
   966  001836  6E03               	movwf	lcd_position@colonne,c
   967  001838  0E01               	movlw	1
   968  00183A  EC9E  F011         	call	_lcd_position
   969                           
   970                           ;main.c: 55: lcd_printf("%4d",(int) vitesseMax);
   971  00183E  C0B5  F001         	movff	main@vitesseMax,___fttol@f1
   972  001842  C0B6  F002         	movff	main@vitesseMax+1,___fttol@f1+1
   973  001846  C0B7  F003         	movff	main@vitesseMax+2,___fttol@f1+2
   974  00184A  EC91  F00D         	call	___fttol	;wreg free
   975  00184E  C001  F0B8         	movff	?___fttol,_main$1637
   976  001852  C002  F0B9         	movff	?___fttol+1,_main$1637+1
   977                           
   978                           ;main.c: 55: lcd_printf("%4d",(int) vitesseMax);
   979  001856  0E22               	movlw	low STR_2
   980  001858  6E3A               	movwf	lcd_printf@f,c
   981  00185A  0E08               	movlw	high STR_2
   982  00185C  6E3B               	movwf	lcd_printf@f+1,c
   983  00185E  C0B8  F03C         	movff	_main$1637,?_lcd_printf+2
   984  001862  C0B9  F03D         	movff	_main$1637+1,?_lcd_printf+3
   985  001866  EC17  F004         	call	_lcd_printf	;wreg free
   986                           
   987                           ;main.c: 56: lcd_position(1,10);
   988  00186A  0E0A               	movlw	10
   989  00186C  6E03               	movwf	lcd_position@colonne,c
   990  00186E  0E01               	movlw	1
   991  001870  EC9E  F011         	call	_lcd_position
   992                           
   993                           ;main.c: 57: lcd_printf("%4d",(int) moteurD);
   994  001874  C0B2  F001         	movff	main@moteurD,___fttol@f1
   995  001878  C0B3  F002         	movff	main@moteurD+1,___fttol@f1+1
   996  00187C  C0B4  F003         	movff	main@moteurD+2,___fttol@f1+2
   997  001880  EC91  F00D         	call	___fttol	;wreg free
   998  001884  C001  F0B8         	movff	?___fttol,_main$1637
   999  001888  C002  F0B9         	movff	?___fttol+1,_main$1637+1
  1000                           
  1001                           ;main.c: 57: lcd_printf("%4d",(int) moteurD);
  1002  00188C  0E22               	movlw	low STR_2
  1003  00188E  6E3A               	movwf	lcd_printf@f,c
  1004  001890  0E08               	movlw	high STR_2
  1005  001892  6E3B               	movwf	lcd_printf@f+1,c
  1006  001894  C0B8  F03C         	movff	_main$1637,?_lcd_printf+2
  1007  001898  C0B9  F03D         	movff	_main$1637+1,?_lcd_printf+3
  1008  00189C  EC17  F004         	call	_lcd_printf	;wreg free
  1009                           
  1010                           ;main.c: 60: if (finDeCourse == 0)
  1011  0018A0  0100               	movlb	0	; () banked
  1012  0018A2  51A9               	movf	main@finDeCourse& (0+255),w,b
  1013  0018A4  0100               	movlb	0	; () banked
  1014  0018A6  11AA               	iorwf	(main@finDeCourse+1)& (0+255),w,b
  1015  0018A8  A4D8               	btfss	status,2,c
  1016  0018AA  D690               	goto	l25
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;main.c: 61: {
  1020                           ;main.c: 62: moteurG = 0;
  1021  0018AC  0E00               	movlw	0
  1022  0018AE  0100               	movlb	0	; () banked
  1023  0018B0  6FAF               	movwf	main@moteurG& (0+255),b
  1024  0018B2  0E00               	movlw	0
  1025  0018B4  0100               	movlb	0	; () banked
  1026  0018B6  6FB0               	movwf	(main@moteurG+1)& (0+255),b
  1027  0018B8  0E00               	movlw	0
  1028  0018BA  0100               	movlb	0	; () banked
  1029  0018BC  6FB1               	movwf	(main@moteurG+2)& (0+255),b
  1030                           
  1031                           ;main.c: 63: moteurD = 0;
  1032  0018BE  0E00               	movlw	0
  1033  0018C0  0100               	movlb	0	; () banked
  1034  0018C2  6FB2               	movwf	main@moteurD& (0+255),b
  1035  0018C4  0E00               	movlw	0
  1036  0018C6  0100               	movlb	0	; () banked
  1037  0018C8  6FB3               	movwf	(main@moteurD+1)& (0+255),b
  1038  0018CA  0E00               	movlw	0
  1039  0018CC  0100               	movlb	0	; () banked
  1040  0018CE  6FB4               	movwf	(main@moteurD+2)& (0+255),b
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;main.c: 64: lcd_position(1,0);
  1044  0018D0  0E00               	movlw	0
  1045  0018D2  6E03               	movwf	lcd_position@colonne,c
  1046  0018D4  0E01               	movlw	1
  1047  0018D6  EC9E  F011         	call	_lcd_position
  1048                           
  1049                           ;main.c: 65: lcd_printf("%4d",(int) moteurG);
  1050  0018DA  C0AF  F001         	movff	main@moteurG,___fttol@f1
  1051  0018DE  C0B0  F002         	movff	main@moteurG+1,___fttol@f1+1
  1052  0018E2  C0B1  F003         	movff	main@moteurG+2,___fttol@f1+2
  1053  0018E6  EC91  F00D         	call	___fttol	;wreg free
  1054  0018EA  C001  F0B8         	movff	?___fttol,_main$1637
  1055  0018EE  C002  F0B9         	movff	?___fttol+1,_main$1637+1
  1056                           
  1057                           ;main.c: 65: lcd_printf("%4d",(int) moteurG);
  1058  0018F2  0E22               	movlw	low STR_2
  1059  0018F4  6E3A               	movwf	lcd_printf@f,c
  1060  0018F6  0E08               	movlw	high STR_2
  1061  0018F8  6E3B               	movwf	lcd_printf@f+1,c
  1062  0018FA  C0B8  F03C         	movff	_main$1637,?_lcd_printf+2
  1063  0018FE  C0B9  F03D         	movff	_main$1637+1,?_lcd_printf+3
  1064  001902  EC17  F004         	call	_lcd_printf	;wreg free
  1065                           
  1066                           ;main.c: 66: lcd_position(1,5);
  1067  001906  0E05               	movlw	5
  1068  001908  6E03               	movwf	lcd_position@colonne,c
  1069  00190A  0E01               	movlw	1
  1070  00190C  EC9E  F011         	call	_lcd_position
  1071                           
  1072                           ;main.c: 67: lcd_printf("%4d",(int) vitesseMax);
  1073  001910  C0B5  F001         	movff	main@vitesseMax,___fttol@f1
  1074  001914  C0B6  F002         	movff	main@vitesseMax+1,___fttol@f1+1
  1075  001918  C0B7  F003         	movff	main@vitesseMax+2,___fttol@f1+2
  1076  00191C  EC91  F00D         	call	___fttol	;wreg free
  1077  001920  C001  F0B8         	movff	?___fttol,_main$1637
  1078  001924  C002  F0B9         	movff	?___fttol+1,_main$1637+1
  1079                           
  1080                           ;main.c: 67: lcd_printf("%4d",(int) vitesseMax);
  1081  001928  0E22               	movlw	low STR_2
  1082  00192A  6E3A               	movwf	lcd_printf@f,c
  1083  00192C  0E08               	movlw	high STR_2
  1084  00192E  6E3B               	movwf	lcd_printf@f+1,c
  1085  001930  C0B8  F03C         	movff	_main$1637,?_lcd_printf+2
  1086  001934  C0B9  F03D         	movff	_main$1637+1,?_lcd_printf+3
  1087  001938  EC17  F004         	call	_lcd_printf	;wreg free
  1088                           
  1089                           ;main.c: 68: lcd_position(1,10);
  1090  00193C  0E0A               	movlw	10
  1091  00193E  6E03               	movwf	lcd_position@colonne,c
  1092  001940  0E01               	movlw	1
  1093  001942  EC9E  F011         	call	_lcd_position
  1094                           
  1095                           ;main.c: 69: lcd_printf("%4d",(int) moteurD);
  1096  001946  C0B2  F001         	movff	main@moteurD,___fttol@f1
  1097  00194A  C0B3  F002         	movff	main@moteurD+1,___fttol@f1+1
  1098  00194E  C0B4  F003         	movff	main@moteurD+2,___fttol@f1+2
  1099  001952  EC91  F00D         	call	___fttol	;wreg free
  1100  001956  C001  F0B8         	movff	?___fttol,_main$1637
  1101  00195A  C002  F0B9         	movff	?___fttol+1,_main$1637+1
  1102                           
  1103                           ;main.c: 69: lcd_printf("%4d",(int) moteurD);
  1104  00195E  0E22               	movlw	low STR_2
  1105  001960  6E3A               	movwf	lcd_printf@f,c
  1106  001962  0E08               	movlw	high STR_2
  1107  001964  6E3B               	movwf	lcd_printf@f+1,c
  1108  001966  C0B8  F03C         	movff	_main$1637,?_lcd_printf+2
  1109  00196A  C0B9  F03D         	movff	_main$1637+1,?_lcd_printf+3
  1110  00196E  EC17  F004         	call	_lcd_printf	;wreg free
  1111                           
  1112                           ;main.c: 71: break;
  1113  001972  EF00  F000         	goto	start
  1114  001976                     __end_of_main:
  1115                           	opt stack 0
  1116                           tblptru	equ	0xFF8
  1117                           status	equ	0xFD8
  1118                           
  1119 ;; *************** function _pwm_setdc2 *****************
  1120 ;; Defined at:
  1121 ;;		line 102 in file "iut_pwm.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;  cycles_etat_    2   15[COMRAM] unsigned int 
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;		None
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  1    wreg      void 
  1128 ;; Registers used:
  1129 ;;		wreg, status,2, status,0
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1135 ;;      Params:         2       0       0       0       0       0       0       0       0
  1136 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1137 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1138 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1139 ;;Total ram usage:        4 bytes
  1140 ;; Hardware stack levels used:    1
  1141 ;; This function calls:
  1142 ;;		Nothing
  1143 ;; This function is called by:
  1144 ;;		_main
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text1
  1149  002276                     __ptext1:
  1150                           	opt stack 0
  1151  002276                     _pwm_setdc2:
  1152                           	opt stack 30
  1153                           
  1154                           ;iut_pwm.c: 103: CCPR2L = cycles_etat_haut >> 2;
  1155                           
  1156                           ;incstack = 0
  1157  002276  C010  F012         	movff	pwm_setdc2@cycles_etat_haut,??_pwm_setdc2
  1158  00227A  C011  F013         	movff	pwm_setdc2@cycles_etat_haut+1,??_pwm_setdc2+1
  1159  00227E  90D8               	bcf	status,0,c
  1160  002280  3213               	rrcf	??_pwm_setdc2+1,f,c
  1161  002282  3212               	rrcf	??_pwm_setdc2,f,c
  1162  002284  90D8               	bcf	status,0,c
  1163  002286  3213               	rrcf	??_pwm_setdc2+1,f,c
  1164  002288  3212               	rrcf	??_pwm_setdc2,f,c
  1165  00228A  5012               	movf	??_pwm_setdc2,w,c
  1166  00228C  6EBB               	movwf	4027,c	;volatile
  1167                           
  1168                           ;iut_pwm.c: 104: CCP2CONbits.DC2B = cycles_etat_haut;
  1169  00228E  C010  F012         	movff	pwm_setdc2@cycles_etat_haut,??_pwm_setdc2
  1170  002292  3A12               	swapf	??_pwm_setdc2,f,c
  1171  002294  50BA               	movf	4026,w,c	;volatile
  1172  002296  1812               	xorwf	??_pwm_setdc2,w,c
  1173  002298  0BCF               	andlw	-49
  1174  00229A  1812               	xorwf	??_pwm_setdc2,w,c
  1175  00229C  6EBA               	movwf	4026,c	;volatile
  1176  00229E  0012               	return		;funcret
  1177  0022A0                     __end_of_pwm_setdc2:
  1178                           	opt stack 0
  1179                           tblptru	equ	0xFF8
  1180                           status	equ	0xFD8
  1181                           
  1182 ;; *************** function _pwm_setdc1 *****************
  1183 ;; Defined at:
  1184 ;;		line 87 in file "iut_pwm.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;  cycles_etat_    2   15[COMRAM] unsigned int 
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;		None
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  1    wreg      void 
  1191 ;; Registers used:
  1192 ;;		wreg, status,2, status,0
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1198 ;;      Params:         2       0       0       0       0       0       0       0       0
  1199 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1200 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1201 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1202 ;;Total ram usage:        4 bytes
  1203 ;; Hardware stack levels used:    1
  1204 ;; This function calls:
  1205 ;;		Nothing
  1206 ;; This function is called by:
  1207 ;;		_main
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           	psect	text2
  1212  0022A0                     __ptext2:
  1213                           	opt stack 0
  1214  0022A0                     _pwm_setdc1:
  1215                           	opt stack 30
  1216                           
  1217                           ;iut_pwm.c: 88: CCPR1L = cycles_etat_haut >> 2;
  1218                           
  1219                           ;incstack = 0
  1220  0022A0  C010  F012         	movff	pwm_setdc1@cycles_etat_haut,??_pwm_setdc1
  1221  0022A4  C011  F013         	movff	pwm_setdc1@cycles_etat_haut+1,??_pwm_setdc1+1
  1222  0022A8  90D8               	bcf	status,0,c
  1223  0022AA  3213               	rrcf	??_pwm_setdc1+1,f,c
  1224  0022AC  3212               	rrcf	??_pwm_setdc1,f,c
  1225  0022AE  90D8               	bcf	status,0,c
  1226  0022B0  3213               	rrcf	??_pwm_setdc1+1,f,c
  1227  0022B2  3212               	rrcf	??_pwm_setdc1,f,c
  1228  0022B4  5012               	movf	??_pwm_setdc1,w,c
  1229  0022B6  6EBE               	movwf	4030,c	;volatile
  1230                           
  1231                           ;iut_pwm.c: 89: CCP1CONbits.DC1B = cycles_etat_haut;
  1232  0022B8  C010  F012         	movff	pwm_setdc1@cycles_etat_haut,??_pwm_setdc1
  1233  0022BC  3A12               	swapf	??_pwm_setdc1,f,c
  1234  0022BE  50BD               	movf	4029,w,c	;volatile
  1235  0022C0  1812               	xorwf	??_pwm_setdc1,w,c
  1236  0022C2  0BCF               	andlw	-49
  1237  0022C4  1812               	xorwf	??_pwm_setdc1,w,c
  1238  0022C6  6EBD               	movwf	4029,c	;volatile
  1239  0022C8  0012               	return		;funcret
  1240  0022CA                     __end_of_pwm_setdc1:
  1241                           	opt stack 0
  1242                           tblptru	equ	0xFF8
  1243                           status	equ	0xFD8
  1244                           
  1245 ;; *************** function _pwm_init *****************
  1246 ;; Defined at:
  1247 ;;		line 51 in file "iut_pwm.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  period          1    wreg     unsigned char 
  1250 ;;  nb_canaux       1    0[COMRAM] unsigned char 
  1251 ;; Auto vars:     Size  Location     Type
  1252 ;;  period          1    1[COMRAM] unsigned char 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  1    wreg      void 
  1255 ;; Registers used:
  1256 ;;		wreg, status,2, status,0
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1262 ;;      Params:         1       0       0       0       0       0       0       0       0
  1263 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1264 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1265 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1266 ;;Total ram usage:        2 bytes
  1267 ;; Hardware stack levels used:    1
  1268 ;; This function calls:
  1269 ;;		Nothing
  1270 ;; This function is called by:
  1271 ;;		_main
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text3
  1276  0021DA                     __ptext3:
  1277                           	opt stack 0
  1278  0021DA                     _pwm_init:
  1279                           	opt stack 30
  1280                           
  1281                           ;incstack = 0
  1282                           ;pwm_init@period stored from wreg
  1283  0021DA  6E02               	movwf	pwm_init@period,c
  1284                           
  1285                           ;iut_pwm.c: 52: T2CON = 1;
  1286  0021DC  0E01               	movlw	1
  1287  0021DE  6ECA               	movwf	4042,c	;volatile
  1288                           
  1289                           ;iut_pwm.c: 53: if (nb_canaux >= 1) {
  1290  0021E0  5001               	movf	pwm_init@nb_canaux,w,c
  1291  0021E2  B4D8               	btfsc	status,2,c
  1292  0021E4  D004               	goto	l2857
  1293                           
  1294                           ;iut_pwm.c: 54: CCP1CON = 0b00001100;
  1295  0021E6  0E0C               	movlw	12
  1296  0021E8  6EBD               	movwf	4029,c	;volatile
  1297                           
  1298                           ;iut_pwm.c: 55: TRISCbits.TRISC2 = 0;
  1299  0021EA  9494               	bcf	3988,2,c	;volatile
  1300                           
  1301                           ;iut_pwm.c: 56: } else {
  1302  0021EC  D002               	goto	l2859
  1303  0021EE                     l2857:
  1304                           
  1305                           ;iut_pwm.c: 57: CCP1CON = 0;
  1306  0021EE  0E00               	movlw	0
  1307  0021F0  6EBD               	movwf	4029,c	;volatile
  1308  0021F2                     l2859:
  1309                           
  1310                           ;iut_pwm.c: 58: }
  1311                           ;iut_pwm.c: 59: if (nb_canaux >= 2) {
  1312  0021F2  0E01               	movlw	1
  1313  0021F4  6401               	cpfsgt	pwm_init@nb_canaux,c
  1314  0021F6  D004               	goto	l2865
  1315                           
  1316                           ;iut_pwm.c: 60: CCP2CON = 0b00001100;
  1317  0021F8  0E0C               	movlw	12
  1318  0021FA  6EBA               	movwf	4026,c	;volatile
  1319                           
  1320                           ;iut_pwm.c: 61: TRISCbits.TRISC1 = 0;
  1321  0021FC  9294               	bcf	3988,1,c	;volatile
  1322                           
  1323                           ;iut_pwm.c: 62: } else {
  1324  0021FE  D002               	goto	l2867
  1325  002200                     l2865:
  1326                           
  1327                           ;iut_pwm.c: 63: CCP2CON = 0;
  1328  002200  0E00               	movlw	0
  1329  002202  6EBA               	movwf	4026,c	;volatile
  1330  002204                     l2867:
  1331                           
  1332                           ;iut_pwm.c: 64: }
  1333                           ;iut_pwm.c: 65: PR2 = period;
  1334  002204  C002  FFCB         	movff	pwm_init@period,4043	;volatile
  1335                           
  1336                           ;iut_pwm.c: 66: if (nb_canaux > 0) {
  1337  002208  5001               	movf	pwm_init@nb_canaux,w,c
  1338  00220A  B4D8               	btfsc	status,2,c
  1339  00220C  0012               	return	
  1340                           
  1341                           ;iut_pwm.c: 67: T2CONbits.TMR2ON = 1;
  1342  00220E  84CA               	bsf	4042,2,c	;volatile
  1343  002210  0012               	return	
  1344  002212                     __end_of_pwm_init:
  1345                           	opt stack 0
  1346                           tblptru	equ	0xFF8
  1347                           status	equ	0xFD8
  1348                           
  1349 ;; *************** function _lcd_printf *****************
  1350 ;; Defined at:
  1351 ;;		line 220 in file "iut_lcd.c"
  1352 ;; Parameters:    Size  Location     Type
  1353 ;;  f               2   57[COMRAM] PTR const unsigned char 
  1354 ;;		 -> STR_9(3), STR_8(3), STR_7(4), STR_6(4), 
  1355 ;;		 -> STR_5(4), STR_4(4), STR_3(4), STR_2(4), 
  1356 ;;		 -> STR_1(16), 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  x               3   54[BANK0 ] float 
  1359 ;;  k               2   41[BANK0 ] unsigned int 
  1360 ;;  w               1   46[BANK0 ] unsigned char 
  1361 ;;  i               1   45[BANK0 ] unsigned char 
  1362 ;;  have_sign       1   43[BANK0 ] unsigned char 
  1363 ;;  sign            1   40[BANK0 ] unsigned char 
  1364 ;;  buf            33    0[BANK0 ] unsigned char [33]
  1365 ;;  q               2   38[BANK0 ] PTR unsigned char 
  1366 ;;		 -> lcd_printf@buf(33), 
  1367 ;;  digit_cnt       1   47[BANK0 ] unsigned char 
  1368 ;;  prefix_cnt      1   44[BANK0 ] unsigned char 
  1369 ;;  sign_char       1   35[BANK0 ] unsigned char 
  1370 ;;  larg            4   48[BANK0 ] unsigned long 
  1371 ;;  n               2   59[BANK0 ] int 
  1372 ;;  romstring       2   36[BANK0 ] PTR far unsigned char 
  1373 ;;  ramstring       2   33[BANK0 ] PTR unsigned char 
  1374 ;;  width           1   65[BANK0 ] unsigned char 
  1375 ;;  precision       1   64[BANK0 ] unsigned char 
  1376 ;;  flags           1   63[BANK0 ] unsigned char 
  1377 ;;  cval            1   58[BANK0 ] unsigned char 
  1378 ;;  space_cnt       1   57[BANK0 ] unsigned char 
  1379 ;;  have_precisi    1   53[BANK0 ] unsigned char 
  1380 ;;  size            1   52[BANK0 ] unsigned char 
  1381 ;;  ap              2   61[BANK0 ] PTR void [1]
  1382 ;;		 -> ?_lcd_printf(1), 
  1383 ;;  c               1   66[BANK0 ] unsigned char 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      void 
  1386 ;; Registers used:
  1387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1393 ;;      Params:        10       0       0       0       0       0       0       0       0
  1394 ;;      Locals:         0      67       0       0       0       0       0       0       0
  1395 ;;      Temps:          7       0       0       0       0       0       0       0       0
  1396 ;;      Totals:        17      67       0       0       0       0       0       0       0
  1397 ;;Total ram usage:       84 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    5
  1400 ;; This function calls:
  1401 ;;		___ftadd
  1402 ;;		___ftdiv
  1403 ;;		___ftge
  1404 ;;		___ftmul
  1405 ;;		___ftneg
  1406 ;;		___fttol
  1407 ;;		___lldiv
  1408 ;;		___llmod
  1409 ;;		___lwtoft
  1410 ;;		_lcd_putc
  1411 ;;		_lcd_repete_n
  1412 ;;		_lcd_write_data_busy
  1413 ;; This function is called by:
  1414 ;;		_main
  1415 ;;		_lcd_puti
  1416 ;;		_lcd_putrs
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           	psect	text4
  1421  00082E                     __ptext4:
  1422                           	opt stack 0
  1423  00082E                     _lcd_printf:
  1424                           	opt stack 25
  1425                           
  1426                           ;iut_lcd.c: 221: va_list ap;
  1427                           ;iut_lcd.c: 222: unsigned char c;
  1428                           ;iut_lcd.c: 225: *ap = __va_start();
  1429                           
  1430                           ;incstack = 0
  1431  00082E  0E3C               	movlw	low (?_lcd_printf+2)
  1432  000830  0100               	movlb	0	; () banked
  1433  000832  6F9D               	movwf	lcd_printf@ap& (0+255),b
  1434  000834  0E00               	movlw	high (?_lcd_printf+2)
  1435  000836  0100               	movlb	0	; () banked
  1436  000838  6F9E               	movwf	(lcd_printf@ap+1)& (0+255),b
  1437  00083A  EFC3  F00A         	goto	L1
  1438  00083E                     l2879:
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;iut_lcd.c: 227: if (c == '%') {
  1442  00083E  0E25               	movlw	37
  1443  000840  0100               	movlb	0	; () banked
  1444  000842  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1445  000844  A4D8               	btfss	status,2,c
  1446  000846  EFBD  F00A         	goto	l3425
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;iut_lcd.c: 228: unsigned char flags = 0;
  1450  00084A  0E00               	movlw	0
  1451  00084C  0100               	movlb	0	; () banked
  1452  00084E  6F9F               	movwf	lcd_printf@flags& (0+255),b
  1453                           
  1454                           ;iut_lcd.c: 229: unsigned char width = 0;
  1455  000850  0E00               	movlw	0
  1456  000852  0100               	movlb	0	; () banked
  1457  000854  6FA1               	movwf	lcd_printf@width& (0+255),b
  1458                           
  1459                           ;iut_lcd.c: 230: unsigned char precision = 0;
  1460  000856  0E00               	movlw	0
  1461  000858  0100               	movlb	0	; () banked
  1462  00085A  6FA0               	movwf	lcd_printf@precision& (0+255),b
  1463                           
  1464                           ;iut_lcd.c: 231: unsigned char have_precision = 0;
  1465  00085C  0E00               	movlw	0
  1466  00085E  0100               	movlb	0	; () banked
  1467  000860  6F95               	movwf	lcd_printf@have_precision& (0+255),b
  1468                           
  1469                           ;iut_lcd.c: 232: unsigned char size = 0;
  1470  000862  0E00               	movlw	0
  1471  000864  0100               	movlb	0	; () banked
  1472  000866  6F94               	movwf	lcd_printf@size& (0+255),b
  1473  000868  D020               	goto	l2899
  1474  00086A                     l2885:
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;iut_lcd.c: 278: flags |= 0x1;
  1478  00086A  0100               	movlb	0	; () banked
  1479  00086C  819F               	bsf	lcd_printf@flags& (0+255),0,b
  1480                           
  1481                           ;iut_lcd.c: 279: break;
  1482  00086E  D01D               	goto	l2899
  1483  000870                     l2887:
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;iut_lcd.c: 281: flags |= 0x2;
  1487  000870  0100               	movlb	0	; () banked
  1488  000872  839F               	bsf	lcd_printf@flags& (0+255),1,b
  1489                           
  1490                           ;iut_lcd.c: 282: break;
  1491  000874  D01A               	goto	l2899
  1492  000876                     l2889:
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;iut_lcd.c: 284: flags |= 0x4;
  1496  000876  0100               	movlb	0	; () banked
  1497  000878  859F               	bsf	lcd_printf@flags& (0+255),2,b
  1498                           
  1499                           ;iut_lcd.c: 285: break;
  1500  00087A  D017               	goto	l2899
  1501  00087C                     l2891:
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;iut_lcd.c: 287: flags |= 0x8;
  1505  00087C  0100               	movlb	0	; () banked
  1506  00087E  879F               	bsf	lcd_printf@flags& (0+255),3,b
  1507                           
  1508                           ;iut_lcd.c: 288: break;
  1509  000880  D014               	goto	l2899
  1510  000882                     l2893:
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;iut_lcd.c: 290: flags |= 0x10;
  1514  000882  0100               	movlb	0	; () banked
  1515  000884  899F               	bsf	lcd_printf@flags& (0+255),4,b
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;iut_lcd.c: 292: }
  1519                           
  1520                           ;iut_lcd.c: 291: break;
  1521  000886  D011               	goto	l2899
  1522  000888                     l2897:
  1523                           
  1524                           ; BSR set to: 0
  1525  000888  0100               	movlb	0	; () banked
  1526  00088A  51A2               	movf	lcd_printf@c& (0+255),w,b
  1527                           
  1528                           ; Switch size 1, requested type "space"
  1529                           ; Number of cases is 5, Range of values is 32 to 48
  1530                           ; switch strategies available:
  1531                           ; Name         Instructions Cycles
  1532                           ; simple_byte           16     9 (average)
  1533                           ;	Chosen strategy is simple_byte
  1534  00088C  0A20               	xorlw	32	; case 32
  1535  00088E  B4D8               	btfsc	status,2,c
  1536  000890  D7F2               	goto	l2889
  1537  000892  0A03               	xorlw	3	; case 35
  1538  000894  B4D8               	btfsc	status,2,c
  1539  000896  D7F2               	goto	l2891
  1540  000898  0A08               	xorlw	8	; case 43
  1541  00089A  B4D8               	btfsc	status,2,c
  1542  00089C  D7E9               	goto	l2887
  1543  00089E  0A06               	xorlw	6	; case 45
  1544  0008A0  B4D8               	btfsc	status,2,c
  1545  0008A2  D7E3               	goto	l2885
  1546  0008A4  0A1D               	xorlw	29	; case 48
  1547  0008A6  B4D8               	btfsc	status,2,c
  1548  0008A8  D7EC               	goto	l2893
  1549  0008AA                     l2899:
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;iut_lcd.c: 293: c = *++f;
  1553  0008AA  4A3A               	infsnz	lcd_printf@f,f,c
  1554  0008AC  2A3B               	incf	lcd_printf@f+1,f,c
  1555  0008AE  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1556  0008B2  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1557  0008B6                     	if	0	;tblptru may be non-zero
  1558  0008B6                     	endif
  1559  0008B6                     	if	0	;tblptru may be non-zero
  1560  0008B6                     	endif
  1561  0008B6  0008               	tblrd		*
  1562  0008B8  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1563                           
  1564                           ; BSR set to: 0
  1565                           
  1566                           ; BSR set to: 0
  1567  0008BC  0E2D               	movlw	45
  1568  0008BE  0100               	movlb	0	; () banked
  1569  0008C0  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1570  0008C2  B4D8               	btfsc	status,2,c
  1571  0008C4  D7E1               	goto	l2897
  1572                           
  1573                           ; BSR set to: 0
  1574  0008C6  0E2B               	movlw	43
  1575  0008C8  0100               	movlb	0	; () banked
  1576  0008CA  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1577  0008CC  B4D8               	btfsc	status,2,c
  1578  0008CE  D7DC               	goto	l2897
  1579                           
  1580                           ; BSR set to: 0
  1581  0008D0  0E20               	movlw	32
  1582  0008D2  0100               	movlb	0	; () banked
  1583  0008D4  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1584  0008D6  B4D8               	btfsc	status,2,c
  1585  0008D8  D7D7               	goto	l2897
  1586                           
  1587                           ; BSR set to: 0
  1588  0008DA  0E23               	movlw	35
  1589  0008DC  0100               	movlb	0	; () banked
  1590  0008DE  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1591  0008E0  B4D8               	btfsc	status,2,c
  1592  0008E2  D7D2               	goto	l2897
  1593                           
  1594                           ; BSR set to: 0
  1595  0008E4  0E30               	movlw	48
  1596  0008E6  0100               	movlb	0	; () banked
  1597  0008E8  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1598  0008EA  B4D8               	btfsc	status,2,c
  1599  0008EC  D7CD               	goto	l2897
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;iut_lcd.c: 294: }
  1603                           ;iut_lcd.c: 296: if (c == '*') {
  1604                           
  1605                           ; BSR set to: 0
  1606  0008EE  0E2A               	movlw	42
  1607  0008F0  0100               	movlb	0	; () banked
  1608  0008F2  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1609  0008F4  A4D8               	btfss	status,2,c
  1610  0008F6  D024               	goto	l2925
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;iut_lcd.c: 297: n = (*(int *)__va_arg((*(int **)ap), (int)0));
  1614  0008F8  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  1615  0008FC  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  1616  000900  CFDE F09B          	movff	postinc2,lcd_printf@n
  1617  000904  CFDD F09C          	movff	postdec2,lcd_printf@n+1
  1618                           
  1619                           ; BSR set to: 0
  1620  000908  0E02               	movlw	2
  1621  00090A  0100               	movlb	0	; () banked
  1622  00090C  279D               	addwf	lcd_printf@ap& (0+255),f,b
  1623  00090E  0E00               	movlw	0
  1624  000910  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;iut_lcd.c: 298: if (n < 0) {
  1628  000912  0100               	movlb	0	; () banked
  1629  000914  AF9C               	btfss	(lcd_printf@n+1)& (0+255),7,b
  1630  000916  D008               	goto	l133
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;iut_lcd.c: 299: flags |= 0x1;
  1634  000918  0100               	movlb	0	; () banked
  1635  00091A  819F               	bsf	lcd_printf@flags& (0+255),0,b
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;iut_lcd.c: 300: width = -n;
  1639  00091C  0100               	movlb	0	; () banked
  1640  00091E  519B               	movf	lcd_printf@n& (0+255),w,b
  1641  000920  0800               	sublw	0
  1642  000922  0100               	movlb	0	; () banked
  1643  000924  6FA1               	movwf	lcd_printf@width& (0+255),b
  1644                           
  1645                           ;iut_lcd.c: 301: } else
  1646  000926  D002               	goto	l2923
  1647  000928                     l133:
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;iut_lcd.c: 302: width = n;
  1651  000928  C09B  F0A1         	movff	lcd_printf@n,lcd_printf@width
  1652  00092C                     l2923:
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;iut_lcd.c: 303: c = *++f;
  1656  00092C  4A3A               	infsnz	lcd_printf@f,f,c
  1657  00092E  2A3B               	incf	lcd_printf@f+1,f,c
  1658  000930  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1659  000934  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1660  000938                     	if	0	;tblptru may be non-zero
  1661  000938                     	endif
  1662  000938                     	if	0	;tblptru may be non-zero
  1663  000938                     	endif
  1664  000938  0008               	tblrd		*
  1665  00093A  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1666                           
  1667                           ;iut_lcd.c: 304: } else {
  1668  00093E  D020               	goto	l135
  1669  000940                     l2925:
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;iut_lcd.c: 305: cval = 0;
  1673  000940  0E00               	movlw	0
  1674  000942  0100               	movlb	0	; () banked
  1675  000944  6F9A               	movwf	lcd_printf@cval& (0+255),b
  1676                           
  1677                           ;iut_lcd.c: 306: while ((c >= '0') && (c <= '9')) {
  1678  000946  D012               	goto	l2931
  1679  000948                     l2927:
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;iut_lcd.c: 307: cval = cval * 10 + c - '0';
  1683  000948  0100               	movlb	0	; () banked
  1684  00094A  519A               	movf	lcd_printf@cval& (0+255),w,b
  1685  00094C  0D0A               	mullw	10
  1686  00094E  50F3               	movf	prodl,w,c
  1687  000950  0100               	movlb	0	; () banked
  1688  000952  25A2               	addwf	lcd_printf@c& (0+255),w,b
  1689  000954  0FD0               	addlw	208
  1690  000956  0100               	movlb	0	; () banked
  1691  000958  6F9A               	movwf	lcd_printf@cval& (0+255),b
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;iut_lcd.c: 308: c = *++f;
  1695  00095A  4A3A               	infsnz	lcd_printf@f,f,c
  1696  00095C  2A3B               	incf	lcd_printf@f+1,f,c
  1697  00095E  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1698  000962  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1699  000966                     	if	0	;tblptru may be non-zero
  1700  000966                     	endif
  1701  000966                     	if	0	;tblptru may be non-zero
  1702  000966                     	endif
  1703  000966  0008               	tblrd		*
  1704  000968  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1705  00096C                     l2931:
  1706                           
  1707                           ; BSR set to: 0
  1708  00096C  0E2F               	movlw	47
  1709  00096E  0100               	movlb	0	; () banked
  1710  000970  65A2               	cpfsgt	lcd_printf@c& (0+255),b
  1711  000972  D004               	goto	l140
  1712                           
  1713                           ; BSR set to: 0
  1714  000974  0E39               	movlw	57
  1715  000976  0100               	movlb	0	; () banked
  1716  000978  65A2               	cpfsgt	lcd_printf@c& (0+255),b
  1717  00097A  D7E6               	goto	l2927
  1718  00097C                     l140:
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;iut_lcd.c: 309: }
  1722                           ;iut_lcd.c: 310: width = cval;
  1723  00097C  C09A  F0A1         	movff	lcd_printf@cval,lcd_printf@width
  1724  000980                     l135:
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;iut_lcd.c: 311: }
  1728                           ;iut_lcd.c: 314: if (flags & 0x1)
  1729  000980  0100               	movlb	0	; () banked
  1730  000982  A19F               	btfss	lcd_printf@flags& (0+255),0,b
  1731  000984  D002               	goto	l2937
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;iut_lcd.c: 315: flags &= ~0x10;
  1735  000986  0100               	movlb	0	; () banked
  1736  000988  999F               	bcf	lcd_printf@flags& (0+255),4,b
  1737  00098A                     l2937:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;iut_lcd.c: 318: if (c == '.') {
  1741  00098A  0E2E               	movlw	46
  1742  00098C  0100               	movlb	0	; () banked
  1743  00098E  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1744  000990  A4D8               	btfss	status,2,c
  1745  000992  D050               	goto	l2967
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;iut_lcd.c: 319: c = *++f;
  1749  000994  4A3A               	infsnz	lcd_printf@f,f,c
  1750  000996  2A3B               	incf	lcd_printf@f+1,f,c
  1751  000998  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1752  00099C  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1753  0009A0                     	if	0	;tblptru may be non-zero
  1754  0009A0                     	endif
  1755  0009A0                     	if	0	;tblptru may be non-zero
  1756  0009A0                     	endif
  1757  0009A0  0008               	tblrd		*
  1758  0009A2  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;iut_lcd.c: 320: if (c == '*') {
  1762  0009A6  0E2A               	movlw	42
  1763  0009A8  0100               	movlb	0	; () banked
  1764  0009AA  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1765  0009AC  A4D8               	btfss	status,2,c
  1766  0009AE  D01F               	goto	l2955
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;iut_lcd.c: 321: n = (*(int *)__va_arg((*(int **)ap), (int)0));
  1770  0009B0  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  1771  0009B4  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  1772  0009B8  CFDE F09B          	movff	postinc2,lcd_printf@n
  1773  0009BC  CFDD F09C          	movff	postdec2,lcd_printf@n+1
  1774                           
  1775                           ; BSR set to: 0
  1776  0009C0  0E02               	movlw	2
  1777  0009C2  0100               	movlb	0	; () banked
  1778  0009C4  279D               	addwf	lcd_printf@ap& (0+255),f,b
  1779  0009C6  0E00               	movlw	0
  1780  0009C8  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;iut_lcd.c: 322: if (n >= 0) {
  1784  0009CA  0100               	movlb	0	; () banked
  1785  0009CC  BF9C               	btfsc	(lcd_printf@n+1)& (0+255),7,b
  1786  0009CE  D005               	goto	l2953
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;iut_lcd.c: 323: precision = n;
  1790  0009D0  C09B  F0A0         	movff	lcd_printf@n,lcd_printf@precision
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;iut_lcd.c: 324: have_precision = 1;
  1794  0009D4  0E01               	movlw	1
  1795  0009D6  0100               	movlb	0	; () banked
  1796  0009D8  6F95               	movwf	lcd_printf@have_precision& (0+255),b
  1797  0009DA                     l2953:
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;iut_lcd.c: 325: }
  1801                           ;iut_lcd.c: 326: c = *++f;
  1802  0009DA  4A3A               	infsnz	lcd_printf@f,f,c
  1803  0009DC  2A3B               	incf	lcd_printf@f+1,f,c
  1804  0009DE  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1805  0009E2  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1806  0009E6                     	if	0	;tblptru may be non-zero
  1807  0009E6                     	endif
  1808  0009E6                     	if	0	;tblptru may be non-zero
  1809  0009E6                     	endif
  1810  0009E6  0008               	tblrd		*
  1811  0009E8  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1812                           
  1813                           ;iut_lcd.c: 327: } else {
  1814  0009EC  D023               	goto	l2967
  1815  0009EE                     l2955:
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;iut_lcd.c: 328: cval = 0;
  1819  0009EE  0E00               	movlw	0
  1820  0009F0  0100               	movlb	0	; () banked
  1821  0009F2  6F9A               	movwf	lcd_printf@cval& (0+255),b
  1822                           
  1823                           ;iut_lcd.c: 329: while ((c >= '0') && (c <= '9')) {
  1824  0009F4  D012               	goto	l2961
  1825  0009F6                     l2957:
  1826                           
  1827                           ; BSR set to: 0
  1828                           ;iut_lcd.c: 330: cval = cval * 10 + c - '0';
  1829  0009F6  0100               	movlb	0	; () banked
  1830  0009F8  519A               	movf	lcd_printf@cval& (0+255),w,b
  1831  0009FA  0D0A               	mullw	10
  1832  0009FC  50F3               	movf	prodl,w,c
  1833  0009FE  0100               	movlb	0	; () banked
  1834  000A00  25A2               	addwf	lcd_printf@c& (0+255),w,b
  1835  000A02  0FD0               	addlw	208
  1836  000A04  0100               	movlb	0	; () banked
  1837  000A06  6F9A               	movwf	lcd_printf@cval& (0+255),b
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;iut_lcd.c: 331: c = *++f;
  1841  000A08  4A3A               	infsnz	lcd_printf@f,f,c
  1842  000A0A  2A3B               	incf	lcd_printf@f+1,f,c
  1843  000A0C  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1844  000A10  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1845  000A14                     	if	0	;tblptru may be non-zero
  1846  000A14                     	endif
  1847  000A14                     	if	0	;tblptru may be non-zero
  1848  000A14                     	endif
  1849  000A14  0008               	tblrd		*
  1850  000A16  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1851  000A1A                     l2961:
  1852                           
  1853                           ; BSR set to: 0
  1854  000A1A  0E2F               	movlw	47
  1855  000A1C  0100               	movlb	0	; () banked
  1856  000A1E  65A2               	cpfsgt	lcd_printf@c& (0+255),b
  1857  000A20  D004               	goto	l150
  1858                           
  1859                           ; BSR set to: 0
  1860  000A22  0E39               	movlw	57
  1861  000A24  0100               	movlb	0	; () banked
  1862  000A26  65A2               	cpfsgt	lcd_printf@c& (0+255),b
  1863  000A28  D7E6               	goto	l2957
  1864  000A2A                     l150:
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;iut_lcd.c: 332: }
  1868                           ;iut_lcd.c: 333: precision = cval;
  1869  000A2A  C09A  F0A0         	movff	lcd_printf@cval,lcd_printf@precision
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;iut_lcd.c: 334: have_precision = 1;
  1873  000A2E  0E01               	movlw	1
  1874  000A30  0100               	movlb	0	; () banked
  1875  000A32  6F95               	movwf	lcd_printf@have_precision& (0+255),b
  1876  000A34                     l2967:
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;iut_lcd.c: 335: }
  1880                           ;iut_lcd.c: 336: }
  1881                           ;iut_lcd.c: 340: if (c == 'h') {
  1882  000A34  0E68               	movlw	104
  1883  000A36  0100               	movlb	0	; () banked
  1884  000A38  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1885  000A3A  A4D8               	btfss	status,2,c
  1886  000A3C  D011               	goto	l2977
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;iut_lcd.c: 341: c = *++f;
  1890  000A3E  4A3A               	infsnz	lcd_printf@f,f,c
  1891  000A40  2A3B               	incf	lcd_printf@f+1,f,c
  1892  000A42  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1893  000A46  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1894  000A4A                     	if	0	;tblptru may be non-zero
  1895  000A4A                     	endif
  1896  000A4A                     	if	0	;tblptru may be non-zero
  1897  000A4A                     	endif
  1898  000A4A  0008               	tblrd		*
  1899  000A4C  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;iut_lcd.c: 344: if (c == 'h') {
  1903  000A50  0E68               	movlw	104
  1904  000A52  0100               	movlb	0	; () banked
  1905  000A54  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1906  000A56  A4D8               	btfss	status,2,c
  1907  000A58  EF81  F00A         	goto	l3423
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;iut_lcd.c: 345: size = 3;
  1911  000A5C  0E03               	movlw	3
  1912  000A5E  D032               	goto	L2
  1913  000A60                     l2977:
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;iut_lcd.c: 350: else if (c == 't' || c == 'z')
  1917  000A60  0E74               	movlw	116
  1918  000A62  0100               	movlb	0	; () banked
  1919  000A64  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1920  000A66  B4D8               	btfsc	status,2,c
  1921  000A68  D016               	goto	l2991
  1922                           
  1923                           ; BSR set to: 0
  1924  000A6A  0E7A               	movlw	122
  1925  000A6C  0100               	movlb	0	; () banked
  1926  000A6E  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1927  000A70  B4D8               	btfsc	status,2,c
  1928  000A72  D011               	goto	l2991
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;iut_lcd.c: 354: else if (c == 'H' || c == 'T' || c == 'Z') {
  1932                           
  1933                           ; BSR set to: 0
  1934                           
  1935                           ; BSR set to: 0
  1936                           ;iut_lcd.c: 351: c = *++f;
  1937                           
  1938                           ; BSR set to: 0
  1939  000A74  0E48               	movlw	72
  1940  000A76  0100               	movlb	0	; () banked
  1941  000A78  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1942  000A7A  B4D8               	btfsc	status,2,c
  1943  000A7C  D00A               	goto	l2989
  1944                           
  1945                           ; BSR set to: 0
  1946  000A7E  0E54               	movlw	84
  1947  000A80  0100               	movlb	0	; () banked
  1948  000A82  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1949  000A84  B4D8               	btfsc	status,2,c
  1950  000A86  D005               	goto	l2989
  1951                           
  1952                           ; BSR set to: 0
  1953  000A88  0E5A               	movlw	90
  1954  000A8A  0100               	movlb	0	; () banked
  1955  000A8C  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1956  000A8E  A4D8               	btfss	status,2,c
  1957  000A90  D00D               	goto	l2993
  1958  000A92                     l2989:
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;iut_lcd.c: 355: size = 2;
  1962  000A92  0E02               	movlw	2
  1963  000A94  D017               	goto	L2
  1964  000A96                     l2991:
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;iut_lcd.c: 356: c = *++f;
  1968  000A96  4A3A               	infsnz	lcd_printf@f,f,c
  1969  000A98  2A3B               	incf	lcd_printf@f+1,f,c
  1970  000A9A  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  1971  000A9E  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  1972  000AA2                     	if	0	;tblptru may be non-zero
  1973  000AA2                     	endif
  1974  000AA2                     	if	0	;tblptru may be non-zero
  1975  000AA2                     	endif
  1976  000AA2  0008               	tblrd		*
  1977  000AA4  CFF5 F0A2          	movff	tablat,lcd_printf@c
  1978                           
  1979                           ;iut_lcd.c: 357: }
  1980  000AA8  EF81  F00A         	goto	l3423
  1981  000AAC                     l2993:
  1982                           
  1983                           ; BSR set to: 0
  1984                           ;iut_lcd.c: 360: else if (c == 'l' || c == 'j') {
  1985  000AAC  0E6C               	movlw	108
  1986  000AAE  0100               	movlb	0	; () banked
  1987  000AB0  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1988  000AB2  B4D8               	btfsc	status,2,c
  1989  000AB4  D006               	goto	l2997
  1990                           
  1991                           ; BSR set to: 0
  1992  000AB6  0E6A               	movlw	106
  1993  000AB8  0100               	movlb	0	; () banked
  1994  000ABA  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  1995  000ABC  A4D8               	btfss	status,2,c
  1996  000ABE  EF81  F00A         	goto	l3423
  1997  000AC2                     l2997:
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;iut_lcd.c: 361: size = 1;
  2001  000AC2  0E01               	movlw	1
  2002  000AC4                     L2:
  2003  000AC4  0100               	movlb	0	; () banked
  2004  000AC6  6F94               	movwf	lcd_printf@size& (0+255),b
  2005  000AC8  D7E6               	goto	l2991
  2006  000ACA                     l3001:
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;iut_lcd.c: 373: --f;
  2010  000ACA  063A               	decf	lcd_printf@f,f,c
  2011  000ACC  A0D8               	btfss	status,0,c
  2012  000ACE  063B               	decf	lcd_printf@f+1,f,c
  2013  000AD0                     l3003:
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;iut_lcd.c: 376: lcd_write_data_busy('%');
  2017  000AD0  0E25               	movlw	37
  2018  000AD2  ECAD  F011         	call	_lcd_write_data_busy
  2019                           
  2020                           ;iut_lcd.c: 378: break;
  2021  000AD6  EFC1  F00A         	goto	l3427
  2022  000ADA                     l3005:
  2023                           
  2024                           ;iut_lcd.c: 380: space_cnt = 0;
  2025  000ADA  0E00               	movlw	0
  2026  000ADC  0100               	movlb	0	; () banked
  2027  000ADE  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2028                           
  2029                           ; BSR set to: 0
  2030                           ;iut_lcd.c: 381: if (width > 1) {
  2031  000AE0  0E01               	movlw	1
  2032  000AE2  0100               	movlb	0	; () banked
  2033  000AE4  65A1               	cpfsgt	lcd_printf@width& (0+255),b
  2034  000AE6  D004               	goto	l3011
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;iut_lcd.c: 382: space_cnt = width - 1;
  2038  000AE8  0100               	movlb	0	; () banked
  2039  000AEA  05A1               	decf	lcd_printf@width& (0+255),w,b
  2040  000AEC  0100               	movlb	0	; () banked
  2041  000AEE  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2042  000AF0                     l3011:
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;iut_lcd.c: 384: }
  2046                           ;iut_lcd.c: 385: if (space_cnt && !(flags & 0x1)) {
  2047  000AF0  0100               	movlb	0	; () banked
  2048  000AF2  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2049  000AF4  0100               	movlb	0	; () banked
  2050  000AF6  B4D8               	btfsc	status,2,c
  2051  000AF8  D00C               	goto	l3019
  2052                           
  2053                           ; BSR set to: 0
  2054  000AFA  0100               	movlb	0	; () banked
  2055  000AFC  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  2056  000AFE  D009               	goto	l3019
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;iut_lcd.c: 386: lcd_repete_n(space_cnt, ' ');
  2060  000B00  0E20               	movlw	32
  2061  000B02  6E03               	movwf	lcd_repete_n@c,c
  2062  000B04  0100               	movlb	0	; () banked
  2063  000B06  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2064  000B08  ECC3  F011         	call	_lcd_repete_n
  2065                           
  2066                           ;iut_lcd.c: 387: space_cnt = 0;
  2067  000B0C  0E00               	movlw	0
  2068  000B0E  0100               	movlb	0	; () banked
  2069  000B10  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2070  000B12                     l3019:
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;iut_lcd.c: 388: }
  2074                           ;iut_lcd.c: 389: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2075  000B12  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2076  000B16  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2077  000B1A  50DF               	movf	indf2,w,c
  2078  000B1C  0100               	movlb	0	; () banked
  2079  000B1E  6FA2               	movwf	lcd_printf@c& (0+255),b
  2080                           
  2081                           ; BSR set to: 0
  2082  000B20  0E02               	movlw	2
  2083  000B22  0100               	movlb	0	; () banked
  2084  000B24  279D               	addwf	lcd_printf@ap& (0+255),f,b
  2085  000B26  0E00               	movlw	0
  2086  000B28  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;iut_lcd.c: 390: lcd_putc(c);
  2090  000B2A  0100               	movlb	0	; () banked
  2091  000B2C  51A2               	movf	lcd_printf@c& (0+255),w,b
  2092  000B2E  ECAA  F010         	call	_lcd_putc
  2093                           
  2094                           ;iut_lcd.c: 392: lcd_repete_n(space_cnt, ' ');
  2095  000B32  0E20               	movlw	32
  2096  000B34  6E03               	movwf	lcd_repete_n@c,c
  2097  000B36  0100               	movlb	0	; () banked
  2098  000B38  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2099  000B3A  ECC3  F011         	call	_lcd_repete_n
  2100                           
  2101                           ;iut_lcd.c: 393: break;
  2102  000B3E  EFC1  F00A         	goto	l3427
  2103  000B42                     l3027:
  2104                           
  2105                           ;iut_lcd.c: 395: if (size == 2)
  2106  000B42  0E02               	movlw	2
  2107  000B44  0100               	movlb	0	; () banked
  2108  000B46  1994               	xorwf	lcd_printf@size& (0+255),w,b
  2109  000B48  A4D8               	btfss	status,2,c
  2110  000B4A  D007               	goto	l3033
  2111  000B4C  D006               	goto	l3033
  2112  000B4E                     l3031:
  2113                           
  2114                           ; BSR set to: 0
  2115  000B4E  0E02               	movlw	2
  2116  000B50  0100               	movlb	0	; () banked
  2117  000B52  279D               	addwf	lcd_printf@ap& (0+255),f,b
  2118  000B54  0E00               	movlw	0
  2119  000B56  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  2120  000B58  D009               	goto	l3037
  2121  000B5A                     l3033:
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;iut_lcd.c: 397: else
  2125                           ;iut_lcd.c: 398: romstring = (far char*) (*(near char * *)__va_arg((*(near char * **)ap)
      +                          , (near char *)0));
  2126  000B5A  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2127  000B5E  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2128  000B62  CFDE F084          	movff	postinc2,lcd_printf@romstring
  2129  000B66  CFDD F085          	movff	postdec2,lcd_printf@romstring+1
  2130  000B6A  D7F1               	goto	l3031
  2131  000B6C                     l3037:
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;iut_lcd.c: 399: for (n = 0; romstring[n] != 0; n++);
  2135  000B6C  0E00               	movlw	0
  2136  000B6E  0100               	movlb	0	; () banked
  2137  000B70  6F9C               	movwf	(lcd_printf@n+1)& (0+255),b
  2138  000B72  0E00               	movlw	0
  2139  000B74  6F9B               	movwf	lcd_printf@n& (0+255),b
  2140  000B76  D003               	goto	l3041
  2141  000B78                     l3039:
  2142                           
  2143                           ; BSR set to: 0
  2144  000B78  0100               	movlb	0	; () banked
  2145  000B7A  4B9B               	infsnz	lcd_printf@n& (0+255),f,b
  2146  000B7C  2B9C               	incf	(lcd_printf@n+1)& (0+255),f,b
  2147  000B7E                     l3041:
  2148                           
  2149                           ; BSR set to: 0
  2150  000B7E  0100               	movlb	0	; () banked
  2151  000B80  519B               	movf	lcd_printf@n& (0+255),w,b
  2152  000B82  0100               	movlb	0	; () banked
  2153  000B84  2584               	addwf	lcd_printf@romstring& (0+255),w,b
  2154  000B86  6ED9               	movwf	fsr2l,c
  2155  000B88  0100               	movlb	0	; () banked
  2156  000B8A  519C               	movf	(lcd_printf@n+1)& (0+255),w,b
  2157  000B8C  0100               	movlb	0	; () banked
  2158  000B8E  2185               	addwfc	(lcd_printf@romstring+1)& (0+255),w,b
  2159  000B90  6EDA               	movwf	fsr2h,c
  2160  000B92  50DF               	movf	indf2,w,c
  2161  000B94  A4D8               	btfss	status,2,c
  2162  000B96  D7F0               	goto	l3039
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;iut_lcd.c: 402: if (have_precision && precision < (unsigned char) n)
  2166                           
  2167                           ; BSR set to: 0
  2168  000B98  0100               	movlb	0	; () banked
  2169  000B9A  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2170  000B9C  0100               	movlb	0	; () banked
  2171  000B9E  B4D8               	btfsc	status,2,c
  2172  000BA0  D00A               	goto	l3049
  2173                           
  2174                           ; BSR set to: 0
  2175  000BA2  0100               	movlb	0	; () banked
  2176  000BA4  519B               	movf	lcd_printf@n& (0+255),w,b
  2177  000BA6  0100               	movlb	0	; () banked
  2178  000BA8  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  2179  000BAA  B0D8               	btfsc	status,0,c
  2180  000BAC  D004               	goto	l3049
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;iut_lcd.c: 403: n = precision;
  2184  000BAE  C0A0  F09B         	movff	lcd_printf@precision,lcd_printf@n
  2185  000BB2  0100               	movlb	0	; () banked
  2186  000BB4  6B9C               	clrf	(lcd_printf@n+1)& (0+255),b
  2187  000BB6                     l3049:
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;iut_lcd.c: 404: if (width < (unsigned char) n)
  2191  000BB6  0100               	movlb	0	; () banked
  2192  000BB8  519B               	movf	lcd_printf@n& (0+255),w,b
  2193  000BBA  0100               	movlb	0	; () banked
  2194  000BBC  5DA1               	subwf	lcd_printf@width& (0+255),w,b
  2195  000BBE  A0D8               	btfss	status,0,c
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;iut_lcd.c: 405: width = n;
  2199  000BC0  C09B  F0A1         	movff	lcd_printf@n,lcd_printf@width
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;iut_lcd.c: 406: space_cnt = width - (unsigned char) n;
  2203                           
  2204                           ; BSR set to: 0
  2205  000BC4  0100               	movlb	0	; () banked
  2206  000BC6  519B               	movf	lcd_printf@n& (0+255),w,b
  2207  000BC8  0800               	sublw	0
  2208  000BCA  0100               	movlb	0	; () banked
  2209  000BCC  25A1               	addwf	lcd_printf@width& (0+255),w,b
  2210  000BCE  0100               	movlb	0	; () banked
  2211  000BD0  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;iut_lcd.c: 413: if (have_precision && precision < width)
  2215  000BD2  0100               	movlb	0	; () banked
  2216  000BD4  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2217  000BD6  0100               	movlb	0	; () banked
  2218  000BD8  B4D8               	btfsc	status,2,c
  2219  000BDA  D007               	goto	l180
  2220                           
  2221                           ; BSR set to: 0
  2222  000BDC  0100               	movlb	0	; () banked
  2223  000BDE  51A1               	movf	lcd_printf@width& (0+255),w,b
  2224  000BE0  0100               	movlb	0	; () banked
  2225  000BE2  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  2226  000BE4  A0D8               	btfss	status,0,c
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;iut_lcd.c: 414: width = precision;
  2230  000BE6  C0A0  F0A1         	movff	lcd_printf@precision,lcd_printf@width
  2231  000BEA                     l180:
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;iut_lcd.c: 417: if (!(flags & 0x1)) {
  2235  000BEA  0100               	movlb	0	; () banked
  2236  000BEC  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  2237  000BEE  D009               	goto	l3065
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;iut_lcd.c: 418: lcd_repete_n(space_cnt, ' ');
  2241  000BF0  0E20               	movlw	32
  2242  000BF2  6E03               	movwf	lcd_repete_n@c,c
  2243  000BF4  0100               	movlb	0	; () banked
  2244  000BF6  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2245  000BF8  ECC3  F011         	call	_lcd_repete_n
  2246                           
  2247                           ;iut_lcd.c: 419: space_cnt = 0;
  2248  000BFC  0E00               	movlw	0
  2249  000BFE  0100               	movlb	0	; () banked
  2250  000C00  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2251  000C02                     l3065:
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;iut_lcd.c: 420: }
  2255                           ;iut_lcd.c: 421: cval = 0;
  2256  000C02  0E00               	movlw	0
  2257  000C04  0100               	movlb	0	; () banked
  2258  000C06  6F9A               	movwf	lcd_printf@cval& (0+255),b
  2259  000C08  D009               	goto	L3
  2260  000C0A                     l3069:
  2261                           
  2262                           ; BSR set to: 0
  2263                           ;iut_lcd.c: 423: lcd_putc(c);
  2264  000C0A  0100               	movlb	0	; () banked
  2265  000C0C  51A2               	movf	lcd_printf@c& (0+255),w,b
  2266  000C0E  ECAA  F010         	call	_lcd_putc
  2267                           
  2268                           ;iut_lcd.c: 425: ++cval;
  2269  000C12  0100               	movlb	0	; () banked
  2270  000C14  2B9A               	incf	lcd_printf@cval& (0+255),f,b
  2271                           
  2272                           ; BSR set to: 0
  2273  000C16  0100               	movlb	0	; () banked
  2274  000C18  4B84               	infsnz	lcd_printf@romstring& (0+255),f,b
  2275  000C1A  2B85               	incf	(lcd_printf@romstring+1)& (0+255),f,b
  2276  000C1C                     L3:
  2277  000C1C  C084  FFD9         	movff	lcd_printf@romstring,fsr2l
  2278  000C20  C085  FFDA         	movff	lcd_printf@romstring+1,fsr2h
  2279  000C24  50DF               	movf	indf2,w,c
  2280  000C26  0100               	movlb	0	; () banked
  2281  000C28  6FA2               	movwf	lcd_printf@c& (0+255),b
  2282                           
  2283                           ; BSR set to: 0
  2284                           
  2285                           ; BSR set to: 0
  2286  000C2A  0100               	movlb	0	; () banked
  2287  000C2C  51A2               	movf	lcd_printf@c& (0+255),w,b
  2288  000C2E  0100               	movlb	0	; () banked
  2289  000C30  B4D8               	btfsc	status,2,c
  2290  000C32  D006               	goto	l3079
  2291                           
  2292                           ; BSR set to: 0
  2293  000C34  0100               	movlb	0	; () banked
  2294  000C36  51A1               	movf	lcd_printf@width& (0+255),w,b
  2295  000C38  0100               	movlb	0	; () banked
  2296  000C3A  5D9A               	subwf	lcd_printf@cval& (0+255),w,b
  2297  000C3C  A0D8               	btfss	status,0,c
  2298  000C3E  D7E5               	goto	l3069
  2299  000C40                     l3079:
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;iut_lcd.c: 426: }
  2303                           ;iut_lcd.c: 430: lcd_repete_n(space_cnt, ' ');
  2304  000C40  0E20               	movlw	32
  2305  000C42  6E03               	movwf	lcd_repete_n@c,c
  2306  000C44  0100               	movlb	0	; () banked
  2307  000C46  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2308  000C48  ECC3  F011         	call	_lcd_repete_n
  2309                           
  2310                           ;iut_lcd.c: 431: break;
  2311  000C4C  EFC1  F00A         	goto	l3427
  2312  000C50                     l3081:
  2313                           
  2314                           ;iut_lcd.c: 433: ramstring = (*(char * *)__va_arg((*(char * **)ap), (char *)0));
  2315  000C50  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2316  000C54  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2317  000C58  CFDE F081          	movff	postinc2,lcd_printf@ramstring
  2318  000C5C  CFDD F082          	movff	postdec2,lcd_printf@ramstring+1
  2319  000C60  0E02               	movlw	2
  2320  000C62  0100               	movlb	0	; () banked
  2321  000C64  279D               	addwf	lcd_printf@ap& (0+255),f,b
  2322  000C66  0E00               	movlw	0
  2323  000C68  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;iut_lcd.c: 434: for (n = 0; ramstring[n] != 0; n++);
  2327  000C6A  0E00               	movlw	0
  2328  000C6C  0100               	movlb	0	; () banked
  2329  000C6E  6F9C               	movwf	(lcd_printf@n+1)& (0+255),b
  2330  000C70  0E00               	movlw	0
  2331  000C72  6F9B               	movwf	lcd_printf@n& (0+255),b
  2332  000C74  D003               	goto	l3089
  2333  000C76                     l3087:
  2334                           
  2335                           ; BSR set to: 0
  2336  000C76  0100               	movlb	0	; () banked
  2337  000C78  4B9B               	infsnz	lcd_printf@n& (0+255),f,b
  2338  000C7A  2B9C               	incf	(lcd_printf@n+1)& (0+255),f,b
  2339  000C7C                     l3089:
  2340                           
  2341                           ; BSR set to: 0
  2342  000C7C  0100               	movlb	0	; () banked
  2343  000C7E  519B               	movf	lcd_printf@n& (0+255),w,b
  2344  000C80  0100               	movlb	0	; () banked
  2345  000C82  2581               	addwf	lcd_printf@ramstring& (0+255),w,b
  2346  000C84  6ED9               	movwf	fsr2l,c
  2347  000C86  0100               	movlb	0	; () banked
  2348  000C88  519C               	movf	(lcd_printf@n+1)& (0+255),w,b
  2349  000C8A  0100               	movlb	0	; () banked
  2350  000C8C  2182               	addwfc	(lcd_printf@ramstring+1)& (0+255),w,b
  2351  000C8E  6EDA               	movwf	fsr2h,c
  2352  000C90  50DF               	movf	indf2,w,c
  2353  000C92  A4D8               	btfss	status,2,c
  2354  000C94  D7F0               	goto	l3087
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;iut_lcd.c: 437: if (have_precision && precision < (unsigned char) n)
  2358                           
  2359                           ; BSR set to: 0
  2360  000C96  0100               	movlb	0	; () banked
  2361  000C98  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2362  000C9A  0100               	movlb	0	; () banked
  2363  000C9C  B4D8               	btfsc	status,2,c
  2364  000C9E  D00A               	goto	l3097
  2365                           
  2366                           ; BSR set to: 0
  2367  000CA0  0100               	movlb	0	; () banked
  2368  000CA2  519B               	movf	lcd_printf@n& (0+255),w,b
  2369  000CA4  0100               	movlb	0	; () banked
  2370  000CA6  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  2371  000CA8  B0D8               	btfsc	status,0,c
  2372  000CAA  D004               	goto	l3097
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;iut_lcd.c: 438: n = precision;
  2376  000CAC  C0A0  F09B         	movff	lcd_printf@precision,lcd_printf@n
  2377  000CB0  0100               	movlb	0	; () banked
  2378  000CB2  6B9C               	clrf	(lcd_printf@n+1)& (0+255),b
  2379  000CB4                     l3097:
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;iut_lcd.c: 439: if (width < (unsigned char) n)
  2383  000CB4  0100               	movlb	0	; () banked
  2384  000CB6  519B               	movf	lcd_printf@n& (0+255),w,b
  2385  000CB8  0100               	movlb	0	; () banked
  2386  000CBA  5DA1               	subwf	lcd_printf@width& (0+255),w,b
  2387  000CBC  A0D8               	btfss	status,0,c
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;iut_lcd.c: 440: width = n;
  2391  000CBE  C09B  F0A1         	movff	lcd_printf@n,lcd_printf@width
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;iut_lcd.c: 441: space_cnt = width - (unsigned char) n;
  2395                           
  2396                           ; BSR set to: 0
  2397  000CC2  0100               	movlb	0	; () banked
  2398  000CC4  519B               	movf	lcd_printf@n& (0+255),w,b
  2399  000CC6  0800               	sublw	0
  2400  000CC8  0100               	movlb	0	; () banked
  2401  000CCA  25A1               	addwf	lcd_printf@width& (0+255),w,b
  2402  000CCC  0100               	movlb	0	; () banked
  2403  000CCE  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;iut_lcd.c: 448: if (have_precision && precision < width)
  2407  000CD0  0100               	movlb	0	; () banked
  2408  000CD2  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2409  000CD4  0100               	movlb	0	; () banked
  2410  000CD6  B4D8               	btfsc	status,2,c
  2411  000CD8  D007               	goto	l193
  2412                           
  2413                           ; BSR set to: 0
  2414  000CDA  0100               	movlb	0	; () banked
  2415  000CDC  51A1               	movf	lcd_printf@width& (0+255),w,b
  2416  000CDE  0100               	movlb	0	; () banked
  2417  000CE0  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  2418  000CE2  A0D8               	btfss	status,0,c
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;iut_lcd.c: 449: width = precision;
  2422  000CE4  C0A0  F0A1         	movff	lcd_printf@precision,lcd_printf@width
  2423  000CE8                     l193:
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;iut_lcd.c: 452: if (!(flags & 0x1)) {
  2427  000CE8  0100               	movlb	0	; () banked
  2428  000CEA  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  2429  000CEC  D009               	goto	l3113
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;iut_lcd.c: 453: lcd_repete_n(space_cnt, ' ');
  2433  000CEE  0E20               	movlw	32
  2434  000CF0  6E03               	movwf	lcd_repete_n@c,c
  2435  000CF2  0100               	movlb	0	; () banked
  2436  000CF4  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2437  000CF6  ECC3  F011         	call	_lcd_repete_n
  2438                           
  2439                           ;iut_lcd.c: 454: space_cnt = 0;
  2440  000CFA  0E00               	movlw	0
  2441  000CFC  0100               	movlb	0	; () banked
  2442  000CFE  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2443  000D00                     l3113:
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;iut_lcd.c: 455: }
  2447                           ;iut_lcd.c: 456: cval = 0;
  2448  000D00  0E00               	movlw	0
  2449  000D02  0100               	movlb	0	; () banked
  2450  000D04  6F9A               	movwf	lcd_printf@cval& (0+255),b
  2451  000D06  D009               	goto	L4
  2452  000D08                     l3117:
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;iut_lcd.c: 458: lcd_putc(c);
  2456  000D08  0100               	movlb	0	; () banked
  2457  000D0A  51A2               	movf	lcd_printf@c& (0+255),w,b
  2458  000D0C  ECAA  F010         	call	_lcd_putc
  2459                           
  2460                           ;iut_lcd.c: 460: ++cval;
  2461  000D10  0100               	movlb	0	; () banked
  2462  000D12  2B9A               	incf	lcd_printf@cval& (0+255),f,b
  2463                           
  2464                           ; BSR set to: 0
  2465  000D14  0100               	movlb	0	; () banked
  2466  000D16  4B81               	infsnz	lcd_printf@ramstring& (0+255),f,b
  2467  000D18  2B82               	incf	(lcd_printf@ramstring+1)& (0+255),f,b
  2468  000D1A                     L4:
  2469  000D1A  C081  FFD9         	movff	lcd_printf@ramstring,fsr2l
  2470  000D1E  C082  FFDA         	movff	lcd_printf@ramstring+1,fsr2h
  2471  000D22  50DF               	movf	indf2,w,c
  2472  000D24  0100               	movlb	0	; () banked
  2473  000D26  6FA2               	movwf	lcd_printf@c& (0+255),b
  2474                           
  2475                           ; BSR set to: 0
  2476                           
  2477                           ; BSR set to: 0
  2478  000D28  0100               	movlb	0	; () banked
  2479  000D2A  51A2               	movf	lcd_printf@c& (0+255),w,b
  2480  000D2C  0100               	movlb	0	; () banked
  2481  000D2E  B4D8               	btfsc	status,2,c
  2482  000D30  D006               	goto	l3127
  2483                           
  2484                           ; BSR set to: 0
  2485  000D32  0100               	movlb	0	; () banked
  2486  000D34  51A1               	movf	lcd_printf@width& (0+255),w,b
  2487  000D36  0100               	movlb	0	; () banked
  2488  000D38  5D9A               	subwf	lcd_printf@cval& (0+255),w,b
  2489  000D3A  A0D8               	btfss	status,0,c
  2490  000D3C  D7E5               	goto	l3117
  2491  000D3E                     l3127:
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;iut_lcd.c: 461: }
  2495                           ;iut_lcd.c: 465: lcd_repete_n(space_cnt, ' ');
  2496  000D3E  0E20               	movlw	32
  2497  000D40  6E03               	movwf	lcd_repete_n@c,c
  2498  000D42  0100               	movlb	0	; () banked
  2499  000D44  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  2500  000D46  ECC3  F011         	call	_lcd_repete_n
  2501                           
  2502                           ;iut_lcd.c: 466: break;
  2503  000D4A  EFC1  F00A         	goto	l3427
  2504  000D4E                     l3129:
  2505                           
  2506                           ;iut_lcd.c: 468: case 'i':
  2507                           ;iut_lcd.c: 469: flags |= 0x80;
  2508  000D4E  0100               	movlb	0	; () banked
  2509  000D50  8F9F               	bsf	lcd_printf@flags& (0+255),7,b
  2510  000D52                     l3131:
  2511                           
  2512                           ; BSR set to: 0
  2513                           ;iut_lcd.c: 472: case 'u':
  2514                           ;iut_lcd.c: 473: case 'x':
  2515                           ;iut_lcd.c: 474: case 'X':
  2516                           ;iut_lcd.c: 475: case 'b':
  2517                           ;iut_lcd.c: 476: case 'B':
  2518                           ;iut_lcd.c: 483: if (size == 1) {
  2519  000D52  0100               	movlb	0	; () banked
  2520  000D54  0594               	decf	lcd_printf@size& (0+255),w,b
  2521  000D56  A4D8               	btfss	status,2,c
  2522  000D58  D00E               	goto	l3139
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;iut_lcd.c: 484: larg = (*(long int *)__va_arg((*(long int **)ap), (long int)0));
  2526  000D5A  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2527  000D5E  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2528  000D62  CFDE F090          	movff	postinc2,lcd_printf@larg
  2529  000D66  CFDE F091          	movff	postinc2,lcd_printf@larg+1
  2530  000D6A  CFDE F092          	movff	postinc2,lcd_printf@larg+2
  2531  000D6E  CFDE F093          	movff	postinc2,lcd_printf@larg+3
  2532                           
  2533                           ; BSR set to: 0
  2534  000D72  0E04               	movlw	4
  2535  000D74  D016               	goto	L5
  2536  000D76                     l3139:
  2537                           
  2538                           ; BSR set to: 0
  2539  000D76  0E03               	movlw	3
  2540  000D78  0100               	movlb	0	; () banked
  2541  000D7A  1994               	xorwf	lcd_printf@size& (0+255),w,b
  2542  000D7C  A4D8               	btfss	status,2,c
  2543  000D7E  D021               	goto	l3151
  2544                           
  2545                           ; BSR set to: 0
  2546                           ;iut_lcd.c: 487: if (flags & 0x80)
  2547  000D80  0100               	movlb	0	; () banked
  2548  000D82  AF9F               	btfss	lcd_printf@flags& (0+255),7,b
  2549  000D84  D013               	goto	l3147
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;iut_lcd.c: 488: larg = (signed char) (*(int *)__va_arg((*(int **)ap), (int)0));
  2553  000D86  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2554  000D8A  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2555  000D8E  50DF               	movf	indf2,w,c
  2556  000D90  0100               	movlb	0	; () banked
  2557  000D92  6F90               	movwf	lcd_printf@larg& (0+255),b
  2558  000D94  0E00               	movlw	0
  2559  000D96  BF90               	btfsc	lcd_printf@larg& (0+255),7,b
  2560  000D98  0EFF               	movlw	-1
  2561  000D9A  6F91               	movwf	(lcd_printf@larg+1)& (0+255),b
  2562  000D9C  6F92               	movwf	(lcd_printf@larg+2)& (0+255),b
  2563  000D9E  6F93               	movwf	(lcd_printf@larg+3)& (0+255),b
  2564  000DA0  D06A               	goto	l3169
  2565  000DA2                     L5:
  2566  000DA2  0100               	movlb	0	; () banked
  2567  000DA4  279D               	addwf	lcd_printf@ap& (0+255),f,b
  2568  000DA6  0E00               	movlw	0
  2569  000DA8  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  2570  000DAA  D067               	goto	l3171
  2571  000DAC                     l3147:
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;iut_lcd.c: 489: else
  2575                           ;iut_lcd.c: 490: larg = (unsigned char) (*(unsigned int *)__va_arg((*(unsigned int **)ap
      +                          ), (unsigned int)0));
  2576  000DAC  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2577  000DB0  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2578  000DB4  50DF               	movf	indf2,w,c
  2579  000DB6  6E44               	movwf	??_lcd_printf& (0+255),c
  2580  000DB8  5044               	movf	??_lcd_printf,w,c
  2581  000DBA  0100               	movlb	0	; () banked
  2582  000DBC  6F90               	movwf	lcd_printf@larg& (0+255),b
  2583  000DBE  6B91               	clrf	(lcd_printf@larg+1)& (0+255),b
  2584  000DC0  D058               	goto	L22
  2585  000DC2                     l3151:
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;iut_lcd.c: 495: case 'P':
  2589                           ;iut_lcd.c: 496: if (size == 2) {
  2590  000DC2  0E02               	movlw	2
  2591  000DC4  0100               	movlb	0	; () banked
  2592  000DC6  1994               	xorwf	lcd_printf@size& (0+255),w,b
  2593  000DC8  A4D8               	btfss	status,2,c
  2594  000DCA  D036               	goto	l216
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;iut_lcd.c: 497: if (flags & 0x80)
  2598  000DCC  0100               	movlb	0	; () banked
  2599  000DCE  AF9F               	btfss	lcd_printf@flags& (0+255),7,b
  2600  000DD0  D01C               	goto	l3159
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;iut_lcd.c: 498: larg = (*(short long int *)__va_arg((*(short long int **)ap), (short lo
      +                          ng int)0));
  2604  000DD2  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2605  000DD6  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2606  000DDA  CFDE F044          	movff	postinc2,??_lcd_printf
  2607  000DDE  CFDE F045          	movff	postinc2,??_lcd_printf+1
  2608  000DE2  CFDE F046          	movff	postinc2,??_lcd_printf+2
  2609  000DE6  C044  F047         	movff	??_lcd_printf,??_lcd_printf+3
  2610  000DEA  C045  F048         	movff	??_lcd_printf+1,??_lcd_printf+4
  2611  000DEE  C046  F049         	movff	??_lcd_printf+2,??_lcd_printf+5
  2612  000DF2  6A4A               	clrf	(??_lcd_printf+6)& (0+255),c
  2613  000DF4  BE49               	btfsc	(??_lcd_printf+5)& (0+255),7,c
  2614  000DF6  684A               	setf	(??_lcd_printf+6)& (0+255),c
  2615  000DF8  C047  F090         	movff	??_lcd_printf+3,lcd_printf@larg
  2616  000DFC  C048  F091         	movff	??_lcd_printf+4,lcd_printf@larg+1
  2617  000E00  C049  F092         	movff	??_lcd_printf+5,lcd_printf@larg+2
  2618  000E04  C04A  F093         	movff	??_lcd_printf+6,lcd_printf@larg+3
  2619  000E08  D015               	goto	l3161
  2620  000E0A                     l3159:
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;iut_lcd.c: 499: else
  2624                           ;iut_lcd.c: 500: larg = (*(unsigned short long int *)__va_arg((*(unsigned short long int
      +                           **)ap), (unsigned short long int)0));
  2625  000E0A  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2626  000E0E  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2627  000E12  CFDE F044          	movff	postinc2,??_lcd_printf
  2628  000E16  CFDE F045          	movff	postinc2,??_lcd_printf+1
  2629  000E1A  CFDE F046          	movff	postinc2,??_lcd_printf+2
  2630  000E1E  5044               	movf	??_lcd_printf,w,c
  2631  000E20  0100               	movlb	0	; () banked
  2632  000E22  6F90               	movwf	lcd_printf@larg& (0+255),b
  2633  000E24  5045               	movf	??_lcd_printf+1,w,c
  2634  000E26  0100               	movlb	0	; () banked
  2635  000E28  6F91               	movwf	(lcd_printf@larg+1)& (0+255),b
  2636  000E2A  5046               	movf	??_lcd_printf+2,w,c
  2637  000E2C  0100               	movlb	0	; () banked
  2638  000E2E  6F92               	movwf	(lcd_printf@larg+2)& (0+255),b
  2639  000E30  0100               	movlb	0	; () banked
  2640  000E32  6B93               	clrf	(lcd_printf@larg+3)& (0+255),b
  2641  000E34                     l3161:
  2642                           
  2643                           ; BSR set to: 0
  2644  000E34  0E03               	movlw	3
  2645  000E36  D7B5               	goto	L5
  2646  000E38                     l216:
  2647                           
  2648                           ; BSR set to: 0
  2649  000E38  0100               	movlb	0	; () banked
  2650  000E3A  AF9F               	btfss	lcd_printf@flags& (0+255),7,b
  2651  000E3C  D00D               	goto	l3167
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;iut_lcd.c: 502: larg = (*(int *)__va_arg((*(int **)ap), (int)0));
  2655  000E3E  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2656  000E42  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2657  000E46  CFDE F090          	movff	postinc2,lcd_printf@larg
  2658  000E4A  CFDD F091          	movff	postdec2,lcd_printf@larg+1
  2659  000E4E  0100               	movlb	0	; () banked
  2660  000E50  0E00               	movlw	0
  2661  000E52  BF91               	btfsc	(lcd_printf@larg+1)& (0+255),7,b
  2662  000E54  0EFF               	movlw	-1
  2663  000E56  D7A2               	goto	L13
  2664  000E58                     l3167:
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;iut_lcd.c: 503: else
  2668                           ;iut_lcd.c: 504: larg = (*(unsigned int *)__va_arg((*(unsigned int **)ap), (unsigned int
      +                          )0));
  2669  000E58  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  2670  000E5C  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  2671  000E60  CFDE F044          	movff	postinc2,??_lcd_printf
  2672  000E64  CFDD F045          	movff	postdec2,??_lcd_printf+1
  2673  000E68  C044  F090         	movff	??_lcd_printf,lcd_printf@larg
  2674  000E6C  C045  F091         	movff	??_lcd_printf+1,lcd_printf@larg+1
  2675  000E70  0100               	movlb	0	; () banked
  2676  000E72                     L22:
  2677  000E72  6B92               	clrf	(lcd_printf@larg+2)& (0+255),b
  2678  000E74  6B93               	clrf	(lcd_printf@larg+3)& (0+255),b
  2679  000E76                     l3169:
  2680                           
  2681                           ; BSR set to: 0
  2682  000E76  0E02               	movlw	2
  2683  000E78  D794               	goto	L5
  2684  000E7A                     l3171:
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;iut_lcd.c: 507: if (!have_precision)
  2688  000E7A  0100               	movlb	0	; () banked
  2689  000E7C  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  2690  000E7E  0100               	movlb	0	; () banked
  2691  000E80  A4D8               	btfss	status,2,c
  2692  000E82  D003               	goto	l222
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;iut_lcd.c: 508: precision = 1;
  2696  000E84  0E01               	movlw	1
  2697  000E86  0100               	movlb	0	; () banked
  2698  000E88  6FA0               	movwf	lcd_printf@precision& (0+255),b
  2699  000E8A                     l222:
  2700                           
  2701                           ; BSR set to: 0
  2702                           ;iut_lcd.c: 510: {
  2703                           ;iut_lcd.c: 511: unsigned char digit_cnt = 0;
  2704  000E8A  0E00               	movlw	0
  2705  000E8C  0100               	movlb	0	; () banked
  2706  000E8E  6F8F               	movwf	lcd_printf@digit_cnt& (0+255),b
  2707                           
  2708                           ;iut_lcd.c: 512: unsigned char prefix_cnt = 0;
  2709  000E90  0E00               	movlw	0
  2710  000E92  0100               	movlb	0	; () banked
  2711  000E94  6F8C               	movwf	lcd_printf@prefix_cnt& (0+255),b
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;iut_lcd.c: 513: unsigned char sign_char;
  2715                           ;iut_lcd.c: 516: char buf[33];
  2716                           ;iut_lcd.c: 518: char *q = &buf[31];
  2717  000E96  0E7F               	movlw	low (lcd_printf@buf+31)
  2718  000E98  0100               	movlb	0	; () banked
  2719  000E9A  6F86               	movwf	lcd_printf@q& (0+255),b
  2720  000E9C  0E00               	movlw	high (lcd_printf@buf+31)
  2721  000E9E  0100               	movlb	0	; () banked
  2722  000EA0  6F87               	movwf	(lcd_printf@q+1)& (0+255),b
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;iut_lcd.c: 520: buf[32] = '\0';
  2726  000EA2  0E00               	movlw	0
  2727  000EA4  0100               	movlb	0	; () banked
  2728  000EA6  6F80               	movwf	(lcd_printf@buf+32)& (0+255),b
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;iut_lcd.c: 522: space_cnt = 0;
  2732  000EA8  0E00               	movlw	0
  2733  000EAA  0100               	movlb	0	; () banked
  2734  000EAC  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;iut_lcd.c: 523: size = 10;
  2738  000EAE  0E0A               	movlw	10
  2739  000EB0  0100               	movlb	0	; () banked
  2740  000EB2  6F94               	movwf	lcd_printf@size& (0+255),b
  2741                           
  2742                           ;iut_lcd.c: 525: switch (c) {
  2743  000EB4  D00B               	goto	l3193
  2744  000EB6                     l3183:
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;iut_lcd.c: 527: case 'B':
  2748                           ;iut_lcd.c: 528: size = 2;
  2749  000EB6  0E02               	movlw	2
  2750  000EB8  D006               	goto	L7
  2751  000EBA                     l3185:
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;iut_lcd.c: 531: size = 8;
  2755  000EBA  0E08               	movlw	8
  2756  000EBC  D004               	goto	L7
  2757  000EBE                     l3187:
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;iut_lcd.c: 534: case 'P':
  2761                           ;iut_lcd.c: 537: c += 'x' - 'p';
  2762  000EBE  0E08               	movlw	8
  2763  000EC0  0100               	movlb	0	; () banked
  2764  000EC2  27A2               	addwf	lcd_printf@c& (0+255),f,b
  2765  000EC4                     l3189:
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;iut_lcd.c: 540: case 'X':
  2769                           ;iut_lcd.c: 541: size = 16;
  2770  000EC4  0E10               	movlw	16
  2771  000EC6                     L7:
  2772  000EC6  0100               	movlb	0	; () banked
  2773  000EC8  6F94               	movwf	lcd_printf@size& (0+255),b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;iut_lcd.c: 543: }
  2777                           
  2778                           ;iut_lcd.c: 542: break;
  2779  000ECA  D017               	goto	l226
  2780  000ECC                     l3193:
  2781                           
  2782                           ; BSR set to: 0
  2783  000ECC  0100               	movlb	0	; () banked
  2784  000ECE  51A2               	movf	lcd_printf@c& (0+255),w,b
  2785                           
  2786                           ; Switch size 1, requested type "space"
  2787                           ; Number of cases is 7, Range of values is 66 to 120
  2788                           ; switch strategies available:
  2789                           ; Name         Instructions Cycles
  2790                           ; simple_byte           22    12 (average)
  2791                           ;	Chosen strategy is simple_byte
  2792  000ED0  0A42               	xorlw	66	; case 66
  2793  000ED2  B4D8               	btfsc	status,2,c
  2794  000ED4  D7F0               	goto	l3183
  2795  000ED6  0A12               	xorlw	18	; case 80
  2796  000ED8  B4D8               	btfsc	status,2,c
  2797  000EDA  D7F1               	goto	l3187
  2798  000EDC  0A08               	xorlw	8	; case 88
  2799  000EDE  B4D8               	btfsc	status,2,c
  2800  000EE0  D7F1               	goto	l3189
  2801  000EE2  0A3A               	xorlw	58	; case 98
  2802  000EE4  B4D8               	btfsc	status,2,c
  2803  000EE6  D7E7               	goto	l3183
  2804  000EE8  0A0D               	xorlw	13	; case 111
  2805  000EEA  B4D8               	btfsc	status,2,c
  2806  000EEC  D7E6               	goto	l3185
  2807  000EEE  0A1F               	xorlw	31	; case 112
  2808  000EF0  B4D8               	btfsc	status,2,c
  2809  000EF2  D7E5               	goto	l3187
  2810  000EF4  0A08               	xorlw	8	; case 120
  2811  000EF6  B4D8               	btfsc	status,2,c
  2812  000EF8  D7E5               	goto	l3189
  2813  000EFA                     l226:
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;iut_lcd.c: 547: if (!(flags & 0x80))
  2817  000EFA  0100               	movlb	0	; () banked
  2818  000EFC  BF9F               	btfsc	lcd_printf@flags& (0+255),7,b
  2819  000EFE  D003               	goto	l3197
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;iut_lcd.c: 548: flags &= ~(0x2 | 0x4);
  2823  000F00  0EF9               	movlw	249
  2824  000F02  0100               	movlb	0	; () banked
  2825  000F04  179F               	andwf	lcd_printf@flags& (0+255),f,b
  2826  000F06                     l3197:
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;iut_lcd.c: 558: if (flags & 0x80 && ((long) larg < 0)) {
  2830  000F06  0100               	movlb	0	; () banked
  2831  000F08  AF9F               	btfss	lcd_printf@flags& (0+255),7,b
  2832  000F0A  D011               	goto	l233
  2833                           
  2834                           ; BSR set to: 0
  2835  000F0C  0100               	movlb	0	; () banked
  2836  000F0E  AF93               	btfss	(lcd_printf@larg+3)& (0+255),7,b
  2837  000F10  D00E               	goto	l233
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;iut_lcd.c: 559: larg = -(long) larg;
  2841  000F12  0100               	movlb	0	; () banked
  2842  000F14  1F93               	comf	(lcd_printf@larg+3)& (0+255),f,b
  2843  000F16  1F92               	comf	(lcd_printf@larg+2)& (0+255),f,b
  2844  000F18  1F91               	comf	(lcd_printf@larg+1)& (0+255),f,b
  2845  000F1A  6D90               	negf	lcd_printf@larg& (0+255),b
  2846  000F1C  0E00               	movlw	0
  2847  000F1E  2391               	addwfc	(lcd_printf@larg+1)& (0+255),f,b
  2848  000F20  2392               	addwfc	(lcd_printf@larg+2)& (0+255),f,b
  2849  000F22  2393               	addwfc	(lcd_printf@larg+3)& (0+255),f,b
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;iut_lcd.c: 560: sign_char = '-';
  2853  000F24  0E2D               	movlw	45
  2854  000F26  D00C               	goto	L12
  2855  000F28                     l3205:
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;iut_lcd.c: 561: ++digit_cnt;
  2859  000F28  0100               	movlb	0	; () banked
  2860  000F2A  2B8F               	incf	lcd_printf@digit_cnt& (0+255),f,b
  2861                           
  2862                           ;iut_lcd.c: 562: } else if (flags & 0x2) {
  2863  000F2C  D00F               	goto	l234
  2864  000F2E                     l233:
  2865                           
  2866                           ; BSR set to: 0
  2867  000F2E  0100               	movlb	0	; () banked
  2868  000F30  A39F               	btfss	lcd_printf@flags& (0+255),1,b
  2869  000F32  D002               	goto	l235
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;iut_lcd.c: 563: sign_char = '+';
  2873  000F34  0E2B               	movlw	43
  2874  000F36  D004               	goto	L12
  2875  000F38                     l235:
  2876                           
  2877                           ; BSR set to: 0
  2878  000F38  0100               	movlb	0	; () banked
  2879  000F3A  A59F               	btfss	lcd_printf@flags& (0+255),2,b
  2880  000F3C  D004               	goto	l3215
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;iut_lcd.c: 566: sign_char = ' ';
  2884  000F3E  0E20               	movlw	32
  2885  000F40                     L12:
  2886  000F40  0100               	movlb	0	; () banked
  2887  000F42  6F83               	movwf	lcd_printf@sign_char& (0+255),b
  2888  000F44  D7F1               	goto	l3205
  2889  000F46                     l3215:
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;iut_lcd.c: 569: sign_char = '\0';
  2893  000F46  0E00               	movlw	0
  2894  000F48  0100               	movlb	0	; () banked
  2895  000F4A  6F83               	movwf	lcd_printf@sign_char& (0+255),b
  2896  000F4C                     l234:
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;iut_lcd.c: 573: if (precision || larg) {
  2900  000F4C  0100               	movlb	0	; () banked
  2901  000F4E  51A0               	movf	lcd_printf@precision& (0+255),w,b
  2902  000F50  0100               	movlb	0	; () banked
  2903  000F52  A4D8               	btfss	status,2,c
  2904  000F54  D00A               	goto	l3219
  2905                           
  2906                           ; BSR set to: 0
  2907  000F56  0100               	movlb	0	; () banked
  2908  000F58  5190               	movf	lcd_printf@larg& (0+255),w,b
  2909  000F5A  0100               	movlb	0	; () banked
  2910  000F5C  1191               	iorwf	(lcd_printf@larg+1)& (0+255),w,b
  2911  000F5E  0100               	movlb	0	; () banked
  2912  000F60  1192               	iorwf	(lcd_printf@larg+2)& (0+255),w,b
  2913  000F62  0100               	movlb	0	; () banked
  2914  000F64  1193               	iorwf	(lcd_printf@larg+3)& (0+255),w,b
  2915  000F66  B4D8               	btfsc	status,2,c
  2916  000F68  D07E               	goto	l3253
  2917  000F6A                     l3219:
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;iut_lcd.c: 575: cval = s_digits[larg % size];
  2921  000F6A  C090  F001         	movff	lcd_printf@larg,___llmod@dividend
  2922  000F6E  C091  F002         	movff	lcd_printf@larg+1,___llmod@dividend+1
  2923  000F72  C092  F003         	movff	lcd_printf@larg+2,___llmod@dividend+2
  2924  000F76  C093  F004         	movff	lcd_printf@larg+3,___llmod@dividend+3
  2925  000F7A  0100               	movlb	0	; () banked
  2926  000F7C  5194               	movf	lcd_printf@size& (0+255),w,b
  2927  000F7E  6E05               	movwf	___llmod@divisor,c
  2928  000F80  6A06               	clrf	___llmod@divisor+1,c
  2929  000F82  6A07               	clrf	___llmod@divisor+2,c
  2930  000F84  6A08               	clrf	___llmod@divisor+3,c
  2931  000F86  EC77  F010         	call	___llmod	;wreg free
  2932  000F8A  0E01               	movlw	low _s_digits
  2933  000F8C  2401               	addwf	?___llmod,w,c
  2934  000F8E  6EF6               	movwf	tblptrl,c
  2935  000F90  0E08               	movlw	high _s_digits
  2936  000F92  2002               	addwfc	?___llmod+1,w,c
  2937  000F94  6EF7               	movwf	tblptrh,c
  2938  000F96                     	if	0	;There are less than 3 active tblptr bytes
  2939  000F96                     	endif
  2940  000F96  0008               	tblrd		*
  2941  000F98  CFF5 F09A          	movff	tablat,lcd_printf@cval
  2942                           
  2943                           ;iut_lcd.c: 576: if (c == 'X' && cval >= 'a')
  2944  000F9C  0E58               	movlw	88
  2945  000F9E  0100               	movlb	0	; () banked
  2946  000FA0  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  2947  000FA2  A4D8               	btfss	status,2,c
  2948  000FA4  D007               	goto	l3227
  2949                           
  2950                           ; BSR set to: 0
  2951  000FA6  0E60               	movlw	96
  2952  000FA8  0100               	movlb	0	; () banked
  2953  000FAA  659A               	cpfsgt	lcd_printf@cval& (0+255),b
  2954  000FAC  D003               	goto	l3227
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;iut_lcd.c: 577: cval -= 'a' - 'A';
  2958  000FAE  0E20               	movlw	32
  2959  000FB0  0100               	movlb	0	; () banked
  2960  000FB2  5F9A               	subwf	lcd_printf@cval& (0+255),f,b
  2961  000FB4                     l3227:
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;iut_lcd.c: 578: larg /= size;
  2965  000FB4  C090  F001         	movff	lcd_printf@larg,___lldiv@dividend
  2966  000FB8  C091  F002         	movff	lcd_printf@larg+1,___lldiv@dividend+1
  2967  000FBC  C092  F003         	movff	lcd_printf@larg+2,___lldiv@dividend+2
  2968  000FC0  C093  F004         	movff	lcd_printf@larg+3,___lldiv@dividend+3
  2969  000FC4  0100               	movlb	0	; () banked
  2970  000FC6  5194               	movf	lcd_printf@size& (0+255),w,b
  2971  000FC8  6E05               	movwf	___lldiv@divisor,c
  2972  000FCA  6A06               	clrf	___lldiv@divisor+1,c
  2973  000FCC  6A07               	clrf	___lldiv@divisor+2,c
  2974  000FCE  6A08               	clrf	___lldiv@divisor+3,c
  2975  000FD0  EC36  F010         	call	___lldiv	;wreg free
  2976  000FD4  C001  F090         	movff	?___lldiv,lcd_printf@larg
  2977  000FD8  C002  F091         	movff	?___lldiv+1,lcd_printf@larg+1
  2978  000FDC  C003  F092         	movff	?___lldiv+2,lcd_printf@larg+2
  2979  000FE0  C004  F093         	movff	?___lldiv+3,lcd_printf@larg+3
  2980                           
  2981                           ;iut_lcd.c: 579: *q-- = cval;
  2982  000FE4  C086  FFD9         	movff	lcd_printf@q,fsr2l
  2983  000FE8  C087  FFDA         	movff	lcd_printf@q+1,fsr2h
  2984  000FEC  C09A  FFDF         	movff	lcd_printf@cval,indf2
  2985  000FF0  0100               	movlb	0	; () banked
  2986  000FF2  0786               	decf	lcd_printf@q& (0+255),f,b
  2987  000FF4  A0D8               	btfss	status,0,c
  2988  000FF6  0787               	decf	(lcd_printf@q+1)& (0+255),f,b
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;iut_lcd.c: 580: ++digit_cnt;
  2992  000FF8  0100               	movlb	0	; () banked
  2993  000FFA  2B8F               	incf	lcd_printf@digit_cnt& (0+255),f,b
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;iut_lcd.c: 581: } while (larg);
  2997  000FFC  0100               	movlb	0	; () banked
  2998  000FFE  5190               	movf	lcd_printf@larg& (0+255),w,b
  2999  001000  0100               	movlb	0	; () banked
  3000  001002  1191               	iorwf	(lcd_printf@larg+1)& (0+255),w,b
  3001  001004  0100               	movlb	0	; () banked
  3002  001006  1192               	iorwf	(lcd_printf@larg+2)& (0+255),w,b
  3003  001008  0100               	movlb	0	; () banked
  3004  00100A  1193               	iorwf	(lcd_printf@larg+3)& (0+255),w,b
  3005  00100C  A4D8               	btfss	status,2,c
  3006  00100E  D7AD               	goto	l3219
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;iut_lcd.c: 585: if (flags & 0x8) {
  3010  001010  0100               	movlb	0	; () banked
  3011  001012  A79F               	btfss	lcd_printf@flags& (0+255),3,b
  3012  001014  D02B               	goto	l3255
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;iut_lcd.c: 586: if (c == 'o') {
  3016  001016  0E6F               	movlw	111
  3017  001018  0100               	movlb	0	; () banked
  3018  00101A  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3019  00101C  A4D8               	btfss	status,2,c
  3020  00101E  D00B               	goto	l3243
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;iut_lcd.c: 590: if (precision <= digit_cnt)
  3024  001020  0100               	movlb	0	; () banked
  3025  001022  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3026  001024  0100               	movlb	0	; () banked
  3027  001026  5D8F               	subwf	lcd_printf@digit_cnt& (0+255),w,b
  3028  001028  A0D8               	btfss	status,0,c
  3029  00102A  D020               	goto	l3255
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;iut_lcd.c: 591: precision = digit_cnt + 1;
  3033  00102C  0100               	movlb	0	; () banked
  3034  00102E  298F               	incf	lcd_printf@digit_cnt& (0+255),w,b
  3035  001030  0100               	movlb	0	; () banked
  3036  001032  6FA0               	movwf	lcd_printf@precision& (0+255),b
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;iut_lcd.c: 592: } else if (c == 'x'
  3040  001034  D01B               	goto	l3255
  3041  001036                     l3243:
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;iut_lcd.c: 593: || c == 'X' || c == 'b' || c == 'B')
  3045  001036  0E78               	movlw	120
  3046  001038  0100               	movlb	0	; () banked
  3047  00103A  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3048  00103C  B4D8               	btfsc	status,2,c
  3049  00103E  D00F               	goto	l3251
  3050                           
  3051                           ; BSR set to: 0
  3052  001040  0E58               	movlw	88
  3053  001042  0100               	movlb	0	; () banked
  3054  001044  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3055  001046  B4D8               	btfsc	status,2,c
  3056  001048  D00A               	goto	l3251
  3057                           
  3058                           ; BSR set to: 0
  3059  00104A  0E62               	movlw	98
  3060  00104C  0100               	movlb	0	; () banked
  3061  00104E  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3062  001050  B4D8               	btfsc	status,2,c
  3063  001052  D005               	goto	l3251
  3064                           
  3065                           ; BSR set to: 0
  3066  001054  0E42               	movlw	66
  3067  001056  0100               	movlb	0	; () banked
  3068  001058  19A2               	xorwf	lcd_printf@c& (0+255),w,b
  3069  00105A  A4D8               	btfss	status,2,c
  3070  00105C  D007               	goto	l3255
  3071  00105E                     l3251:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;iut_lcd.c: 594: prefix_cnt = 2;
  3075  00105E  0E02               	movlw	2
  3076  001060  0100               	movlb	0	; () banked
  3077  001062  6F8C               	movwf	lcd_printf@prefix_cnt& (0+255),b
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;iut_lcd.c: 595: }
  3081                           ;iut_lcd.c: 596: } else
  3082                           
  3083                           ; BSR set to: 0
  3084                           
  3085                           ; BSR set to: 0
  3086  001064  D003               	goto	l3255
  3087  001066                     l3253:
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;iut_lcd.c: 597: digit_cnt = 0;
  3091  001066  0E00               	movlw	0
  3092  001068  0100               	movlb	0	; () banked
  3093  00106A  6F8F               	movwf	lcd_printf@digit_cnt& (0+255),b
  3094  00106C                     l3255:
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;iut_lcd.c: 608: if ((flags & 0x10) && (width > precision)
  3098                           ;iut_lcd.c: 609: && !have_precision)
  3099  00106C  0100               	movlb	0	; () banked
  3100  00106E  A99F               	btfss	lcd_printf@flags& (0+255),4,b
  3101  001070  D00C               	goto	l3263
  3102                           
  3103                           ; BSR set to: 0
  3104  001072  0100               	movlb	0	; () banked
  3105  001074  51A1               	movf	lcd_printf@width& (0+255),w,b
  3106  001076  0100               	movlb	0	; () banked
  3107  001078  5DA0               	subwf	lcd_printf@precision& (0+255),w,b
  3108  00107A  B0D8               	btfsc	status,0,c
  3109  00107C  D006               	goto	l3263
  3110                           
  3111                           ; BSR set to: 0
  3112  00107E  0100               	movlb	0	; () banked
  3113  001080  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  3114  001082  0100               	movlb	0	; () banked
  3115  001084  B4D8               	btfsc	status,2,c
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;iut_lcd.c: 610: precision = width;
  3119  001086  C0A1  F0A0         	movff	lcd_printf@width,lcd_printf@precision
  3120  00108A                     l3263:
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;iut_lcd.c: 613: if (precision > digit_cnt)
  3124  00108A  0100               	movlb	0	; () banked
  3125  00108C  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3126  00108E  0100               	movlb	0	; () banked
  3127  001090  5D8F               	subwf	lcd_printf@digit_cnt& (0+255),w,b
  3128  001092  B0D8               	btfsc	status,0,c
  3129  001094  D005               	goto	l3267
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;iut_lcd.c: 614: precision -= digit_cnt;
  3133  001096  0100               	movlb	0	; () banked
  3134  001098  518F               	movf	lcd_printf@digit_cnt& (0+255),w,b
  3135  00109A  0100               	movlb	0	; () banked
  3136  00109C  5FA0               	subwf	lcd_printf@precision& (0+255),f,b
  3137  00109E  D003               	goto	l3269
  3138  0010A0                     l3267:
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;iut_lcd.c: 615: else
  3142                           ;iut_lcd.c: 616: precision = 0;
  3143  0010A0  0E00               	movlw	0
  3144  0010A2  0100               	movlb	0	; () banked
  3145  0010A4  6FA0               	movwf	lcd_printf@precision& (0+255),b
  3146  0010A6                     l3269:
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;iut_lcd.c: 622: if (width > precision + digit_cnt + prefix_cnt)
  3150  0010A6  0100               	movlb	0	; () banked
  3151  0010A8  51A1               	movf	lcd_printf@width& (0+255),w,b
  3152  0010AA  6E44               	movwf	??_lcd_printf& (0+255),c
  3153  0010AC  6A45               	clrf	(??_lcd_printf+1)& (0+255),c
  3154  0010AE  0100               	movlb	0	; () banked
  3155  0010B0  518F               	movf	lcd_printf@digit_cnt& (0+255),w,b
  3156  0010B2  C0A0  F046         	movff	lcd_printf@precision,??_lcd_printf+2
  3157  0010B6  6A47               	clrf	(??_lcd_printf+3)& (0+255),c
  3158  0010B8  2646               	addwf	??_lcd_printf+2,f,c
  3159  0010BA  0E00               	movlw	0
  3160  0010BC  2247               	addwfc	??_lcd_printf+3,f,c
  3161  0010BE  0100               	movlb	0	; () banked
  3162  0010C0  518C               	movf	lcd_printf@prefix_cnt& (0+255),w,b
  3163  0010C2  2646               	addwf	??_lcd_printf+2,f,c
  3164  0010C4  0E00               	movlw	0
  3165  0010C6  2247               	addwfc	??_lcd_printf+3,f,c
  3166  0010C8  5044               	movf	??_lcd_printf,w,c
  3167  0010CA  5C46               	subwf	??_lcd_printf+2,w,c
  3168  0010CC  5047               	movf	??_lcd_printf+3,w,c
  3169  0010CE  0A80               	xorlw	128
  3170  0010D0  6E48               	movwf	(??_lcd_printf+4)& (0+255),c
  3171  0010D2  5045               	movf	??_lcd_printf+1,w,c
  3172  0010D4  0A80               	xorlw	128
  3173  0010D6  5848               	subwfb	(??_lcd_printf+4)& (0+255),w,c
  3174  0010D8  B0D8               	btfsc	status,0,c
  3175  0010DA  D00B               	goto	l3273
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;iut_lcd.c: 623: space_cnt =
  3179                           ;iut_lcd.c: 624: width - precision - digit_cnt - prefix_cnt;
  3180  0010DC  0100               	movlb	0	; () banked
  3181  0010DE  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3182  0010E0  0100               	movlb	0	; () banked
  3183  0010E2  258F               	addwf	lcd_printf@digit_cnt& (0+255),w,b
  3184  0010E4  0100               	movlb	0	; () banked
  3185  0010E6  258C               	addwf	lcd_printf@prefix_cnt& (0+255),w,b
  3186  0010E8  0800               	sublw	0
  3187  0010EA  0100               	movlb	0	; () banked
  3188  0010EC  25A1               	addwf	lcd_printf@width& (0+255),w,b
  3189  0010EE  0100               	movlb	0	; () banked
  3190  0010F0  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  3191  0010F2                     l3273:
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;iut_lcd.c: 629: if (!(flags & 0x1) && space_cnt) {
  3195  0010F2  0100               	movlb	0	; () banked
  3196  0010F4  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  3197  0010F6  D00E               	goto	l3281
  3198                           
  3199                           ; BSR set to: 0
  3200  0010F8  0100               	movlb	0	; () banked
  3201  0010FA  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  3202  0010FC  0100               	movlb	0	; () banked
  3203  0010FE  B4D8               	btfsc	status,2,c
  3204  001100  D009               	goto	l3281
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;iut_lcd.c: 630: lcd_repete_n(space_cnt, ' ');
  3208  001102  0E20               	movlw	32
  3209  001104  6E03               	movwf	lcd_repete_n@c,c
  3210  001106  0100               	movlb	0	; () banked
  3211  001108  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  3212  00110A  ECC3  F011         	call	_lcd_repete_n
  3213                           
  3214                           ;iut_lcd.c: 632: space_cnt = 0;
  3215  00110E  0E00               	movlw	0
  3216  001110  0100               	movlb	0	; () banked
  3217  001112  6F99               	movwf	lcd_printf@space_cnt& (0+255),b
  3218  001114                     l3281:
  3219                           
  3220                           ; BSR set to: 0
  3221                           ;iut_lcd.c: 633: }
  3222                           ;iut_lcd.c: 636: if (sign_char) {
  3223  001114  0100               	movlb	0	; () banked
  3224  001116  5183               	movf	lcd_printf@sign_char& (0+255),w,b
  3225  001118  0100               	movlb	0	; () banked
  3226  00111A  B4D8               	btfsc	status,2,c
  3227  00111C  D004               	goto	l3285
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;iut_lcd.c: 637: lcd_write_data_busy(sign_char);
  3231  00111E  0100               	movlb	0	; () banked
  3232  001120  5183               	movf	lcd_printf@sign_char& (0+255),w,b
  3233  001122  ECAD  F011         	call	_lcd_write_data_busy
  3234  001126                     l3285:
  3235                           
  3236                           ;iut_lcd.c: 638: }
  3237                           ;iut_lcd.c: 640: if (prefix_cnt) {
  3238  001126  0100               	movlb	0	; () banked
  3239  001128  518C               	movf	lcd_printf@prefix_cnt& (0+255),w,b
  3240  00112A  0100               	movlb	0	; () banked
  3241  00112C  B4D8               	btfsc	status,2,c
  3242  00112E  D007               	goto	l3289
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;iut_lcd.c: 641: lcd_write_data_busy('0');
  3246  001130  0E30               	movlw	48
  3247  001132  ECAD  F011         	call	_lcd_write_data_busy
  3248                           
  3249                           ;iut_lcd.c: 642: lcd_write_data_busy(c);
  3250  001136  0100               	movlb	0	; () banked
  3251  001138  51A2               	movf	lcd_printf@c& (0+255),w,b
  3252  00113A  ECAD  F011         	call	_lcd_write_data_busy
  3253  00113E                     l3289:
  3254                           
  3255                           ;iut_lcd.c: 643: }
  3256                           ;iut_lcd.c: 647: if (precision > prefix_cnt)
  3257  00113E  0100               	movlb	0	; () banked
  3258  001140  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3259  001142  0100               	movlb	0	; () banked
  3260  001144  5D8C               	subwf	lcd_printf@prefix_cnt& (0+255),w,b
  3261  001146  B0D8               	btfsc	status,0,c
  3262  001148  D004               	goto	l3293
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;iut_lcd.c: 648: precision -= prefix_cnt;
  3266  00114A  0100               	movlb	0	; () banked
  3267  00114C  518C               	movf	lcd_printf@prefix_cnt& (0+255),w,b
  3268  00114E  0100               	movlb	0	; () banked
  3269  001150  5FA0               	subwf	lcd_printf@precision& (0+255),f,b
  3270  001152                     l3293:
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;iut_lcd.c: 649: lcd_repete_n(precision, '0');
  3274  001152  0E30               	movlw	48
  3275  001154  6E03               	movwf	lcd_repete_n@c,c
  3276  001156  0100               	movlb	0	; () banked
  3277  001158  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3278  00115A  ECC3  F011         	call	_lcd_repete_n
  3279  00115E  D004               	goto	l3299
  3280  001160                     l3297:
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;iut_lcd.c: 652: lcd_write_data_busy(cval);
  3284  001160  0100               	movlb	0	; () banked
  3285  001162  519A               	movf	lcd_printf@cval& (0+255),w,b
  3286  001164  ECAD  F011         	call	_lcd_write_data_busy
  3287  001168                     l3299:
  3288  001168  0100               	movlb	0	; () banked
  3289  00116A  4B86               	infsnz	lcd_printf@q& (0+255),f,b
  3290  00116C  2B87               	incf	(lcd_printf@q+1)& (0+255),f,b
  3291  00116E  C086  FFD9         	movff	lcd_printf@q,fsr2l
  3292  001172  C087  FFDA         	movff	lcd_printf@q+1,fsr2h
  3293  001176  50DF               	movf	indf2,w,c
  3294  001178  0100               	movlb	0	; () banked
  3295  00117A  6F9A               	movwf	lcd_printf@cval& (0+255),b
  3296                           
  3297                           ; BSR set to: 0
  3298                           
  3299                           ; BSR set to: 0
  3300  00117C  0100               	movlb	0	; () banked
  3301  00117E  519A               	movf	lcd_printf@cval& (0+255),w,b
  3302  001180  0100               	movlb	0	; () banked
  3303  001182  A4D8               	btfss	status,2,c
  3304  001184  D7ED               	goto	l3297
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;iut_lcd.c: 653: }
  3308                           ;iut_lcd.c: 656: lcd_repete_n(space_cnt, ' ');
  3309                           
  3310                           ; BSR set to: 0
  3311  001186  0E20               	movlw	32
  3312  001188  6E03               	movwf	lcd_repete_n@c,c
  3313  00118A  0100               	movlb	0	; () banked
  3314  00118C  5199               	movf	lcd_printf@space_cnt& (0+255),w,b
  3315  00118E  ECC3  F011         	call	_lcd_repete_n
  3316                           
  3317                           ;iut_lcd.c: 659: }
  3318                           ;iut_lcd.c: 660: break;
  3319  001192  D1F7               	goto	l3427
  3320  001194                     l3305:
  3321                           
  3322                           ;iut_lcd.c: 662: {
  3323                           ;iut_lcd.c: 663: float x;
  3324                           ;iut_lcd.c: 664: unsigned char i, w;
  3325                           ;iut_lcd.c: 665: unsigned int k;
  3326                           ;iut_lcd.c: 666: unsigned char sign, have_sign = 0;
  3327  001194  0E00               	movlw	0
  3328  001196  0100               	movlb	0	; () banked
  3329  001198  6F8B               	movwf	lcd_printf@have_sign& (0+255),b
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;iut_lcd.c: 667: x = (*(float *)__va_arg((*(float **)ap), (float)0));
  3333  00119A  C09D  FFD9         	movff	lcd_printf@ap,fsr2l
  3334  00119E  C09E  FFDA         	movff	lcd_printf@ap+1,fsr2h
  3335  0011A2  CFDE F096          	movff	postinc2,lcd_printf@x
  3336  0011A6  CFDE F097          	movff	postinc2,lcd_printf@x+1
  3337  0011AA  CFDD F098          	movff	postdec2,lcd_printf@x+2
  3338                           
  3339                           ; BSR set to: 0
  3340  0011AE  0E03               	movlw	3
  3341  0011B0  0100               	movlb	0	; () banked
  3342  0011B2  279D               	addwf	lcd_printf@ap& (0+255),f,b
  3343  0011B4  0E00               	movlw	0
  3344  0011B6  239E               	addwfc	(lcd_printf@ap+1)& (0+255),f,b
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;iut_lcd.c: 668: if (x < 0.0) {
  3348  0011B8  0100               	movlb	0	; () banked
  3349  0011BA  AF98               	btfss	(lcd_printf@x+2)& (0+255),7,b
  3350  0011BC  D012               	goto	l265
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;iut_lcd.c: 669: sign = '-';
  3354  0011BE  0E2D               	movlw	45
  3355  0011C0  0100               	movlb	0	; () banked
  3356  0011C2  6F88               	movwf	lcd_printf@sign& (0+255),b
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;iut_lcd.c: 670: x = -x;
  3360  0011C4  C096  F00D         	movff	lcd_printf@x,___ftneg@f1
  3361  0011C8  C097  F00E         	movff	lcd_printf@x+1,___ftneg@f1+1
  3362  0011CC  C098  F00F         	movff	lcd_printf@x+2,___ftneg@f1+2
  3363  0011D0  EC8C  F011         	call	___ftneg	;wreg free
  3364  0011D4  C00D  F096         	movff	?___ftneg,lcd_printf@x
  3365  0011D8  C00E  F097         	movff	?___ftneg+1,lcd_printf@x+1
  3366  0011DC  C00F  F098         	movff	?___ftneg+2,lcd_printf@x+2
  3367  0011E0  D005               	goto	L9
  3368  0011E2                     l265:
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;iut_lcd.c: 673: if (flags & 0x2) {
  3372  0011E2  0100               	movlb	0	; () banked
  3373  0011E4  A39F               	btfss	lcd_printf@flags& (0+255),1,b
  3374  0011E6  D006               	goto	l267
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;iut_lcd.c: 674: sign = '+';
  3378  0011E8  0E2B               	movlw	43
  3379  0011EA  D008               	goto	L10
  3380  0011EC                     L9:
  3381                           
  3382                           ;iut_lcd.c: 675: have_sign = 1;
  3383  0011EC  0E01               	movlw	1
  3384  0011EE  0100               	movlb	0	; () banked
  3385  0011F0  6F8B               	movwf	lcd_printf@have_sign& (0+255),b
  3386                           
  3387                           ;iut_lcd.c: 676: } else if (flags & 0x4) {
  3388  0011F2  D007               	goto	l266
  3389  0011F4                     l267:
  3390                           
  3391                           ; BSR set to: 0
  3392  0011F4  0100               	movlb	0	; () banked
  3393  0011F6  A59F               	btfss	lcd_printf@flags& (0+255),2,b
  3394  0011F8  D004               	goto	l266
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;iut_lcd.c: 677: sign = ' ';
  3398  0011FA  0E20               	movlw	32
  3399  0011FC                     L10:
  3400  0011FC  0100               	movlb	0	; () banked
  3401  0011FE  6F88               	movwf	lcd_printf@sign& (0+255),b
  3402  001200  D7F5               	goto	L9
  3403  001202                     l266:
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;iut_lcd.c: 679: }
  3407                           ;iut_lcd.c: 680: }
  3408                           ;iut_lcd.c: 681: for (i = 0; x >= 1; i++) x /= 10;
  3409  001202  0E00               	movlw	0
  3410  001204  0100               	movlb	0	; () banked
  3411  001206  6F8D               	movwf	lcd_printf@i& (0+255),b
  3412                           
  3413                           ; BSR set to: 0
  3414  001208  C096  F001         	movff	lcd_printf@x,___ftge@ff1
  3415  00120C  C097  F002         	movff	lcd_printf@x+1,___ftge@ff1+1
  3416  001210  C098  F003         	movff	lcd_printf@x+2,___ftge@ff1+2
  3417  001214  0E00               	movlw	0
  3418  001216  6E04               	movwf	___ftge@ff2,c
  3419  001218  0E80               	movlw	128
  3420  00121A  6E05               	movwf	___ftge@ff2+1,c
  3421  00121C  0E3F               	movlw	63
  3422  00121E  6E06               	movwf	___ftge@ff2+2,c
  3423  001220  ECEE  F00F         	call	___ftge	;wreg free
  3424  001224  A0D8               	btfss	status,0,c
  3425  001226  D025               	goto	l3333
  3426  001228  C096  F01C         	movff	lcd_printf@x,___ftdiv@f1
  3427  00122C  C097  F01D         	movff	lcd_printf@x+1,___ftdiv@f1+1
  3428  001230  C098  F01E         	movff	lcd_printf@x+2,___ftdiv@f1+2
  3429  001234  0E00               	movlw	0
  3430  001236  6E1F               	movwf	___ftdiv@f2,c
  3431  001238  0E20               	movlw	32
  3432  00123A  6E20               	movwf	___ftdiv@f2+1,c
  3433  00123C  0E41               	movlw	65
  3434  00123E  6E21               	movwf	___ftdiv@f2+2,c
  3435  001240  EC85  F00E         	call	___ftdiv	;wreg free
  3436  001244  C01C  F096         	movff	?___ftdiv,lcd_printf@x
  3437  001248  C01D  F097         	movff	?___ftdiv+1,lcd_printf@x+1
  3438  00124C  C01E  F098         	movff	?___ftdiv+2,lcd_printf@x+2
  3439  001250  0100               	movlb	0	; () banked
  3440  001252  2B8D               	incf	lcd_printf@i& (0+255),f,b
  3441                           
  3442                           ; BSR set to: 0
  3443  001254  C096  F001         	movff	lcd_printf@x,___ftge@ff1
  3444  001258  C097  F002         	movff	lcd_printf@x+1,___ftge@ff1+1
  3445  00125C  C098  F003         	movff	lcd_printf@x+2,___ftge@ff1+2
  3446  001260  0E00               	movlw	0
  3447  001262  6E04               	movwf	___ftge@ff2,c
  3448  001264  0E80               	movlw	128
  3449  001266  6E05               	movwf	___ftge@ff2+1,c
  3450  001268  0E3F               	movlw	63
  3451  00126A  6E06               	movwf	___ftge@ff2+2,c
  3452  00126C  ECEE  F00F         	call	___ftge	;wreg free
  3453  001270  D7D9               	goto	L11
  3454  001272                     l3333:
  3455                           
  3456                           ;iut_lcd.c: 682: if ((!have_precision) && (width == 0)) {
  3457  001272  0100               	movlb	0	; () banked
  3458  001274  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  3459  001276  0100               	movlb	0	; () banked
  3460  001278  A4D8               	btfss	status,2,c
  3461  00127A  D00B               	goto	l3339
  3462                           
  3463                           ; BSR set to: 0
  3464  00127C  0100               	movlb	0	; () banked
  3465  00127E  51A1               	movf	lcd_printf@width& (0+255),w,b
  3466  001280  0100               	movlb	0	; () banked
  3467  001282  A4D8               	btfss	status,2,c
  3468  001284  D006               	goto	l3339
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;iut_lcd.c: 683: precision = 3;
  3472  001286  0E03               	movlw	3
  3473  001288  0100               	movlb	0	; () banked
  3474  00128A  6FA0               	movwf	lcd_printf@precision& (0+255),b
  3475                           
  3476                           ;iut_lcd.c: 684: have_precision = 1;
  3477  00128C  0E01               	movlw	1
  3478  00128E  0100               	movlb	0	; () banked
  3479  001290  6F95               	movwf	lcd_printf@have_precision& (0+255),b
  3480  001292                     l3339:
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;iut_lcd.c: 685: }
  3484                           ;iut_lcd.c: 686: w = precision + i;
  3485  001292  0100               	movlb	0	; () banked
  3486  001294  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3487  001296  0100               	movlb	0	; () banked
  3488  001298  258D               	addwf	lcd_printf@i& (0+255),w,b
  3489  00129A  0100               	movlb	0	; () banked
  3490  00129C  6F8E               	movwf	lcd_printf@w& (0+255),b
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;iut_lcd.c: 687: if (precision > 0) w++;
  3494  00129E  0100               	movlb	0	; () banked
  3495  0012A0  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3496  0012A2  0100               	movlb	0	; () banked
  3497  0012A4  B4D8               	btfsc	status,2,c
  3498  0012A6  D002               	goto	l3345
  3499                           
  3500                           ; BSR set to: 0
  3501  0012A8  0100               	movlb	0	; () banked
  3502  0012AA  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3503  0012AC                     l3345:
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;iut_lcd.c: 688: if (have_sign) w++;
  3507  0012AC  0100               	movlb	0	; () banked
  3508  0012AE  518B               	movf	lcd_printf@have_sign& (0+255),w,b
  3509  0012B0  0100               	movlb	0	; () banked
  3510  0012B2  B4D8               	btfsc	status,2,c
  3511  0012B4  D002               	goto	l3349
  3512                           
  3513                           ; BSR set to: 0
  3514  0012B6  0100               	movlb	0	; () banked
  3515  0012B8  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3516  0012BA                     l3349:
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;iut_lcd.c: 689: if (i == 0) w++;
  3520  0012BA  0100               	movlb	0	; () banked
  3521  0012BC  518D               	movf	lcd_printf@i& (0+255),w,b
  3522  0012BE  0100               	movlb	0	; () banked
  3523  0012C0  A4D8               	btfss	status,2,c
  3524  0012C2  D002               	goto	l3353
  3525                           
  3526                           ; BSR set to: 0
  3527  0012C4  0100               	movlb	0	; () banked
  3528  0012C6  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3529  0012C8                     l3353:
  3530                           
  3531                           ; BSR set to: 0
  3532                           ;iut_lcd.c: 690: if (!have_precision) {
  3533  0012C8  0100               	movlb	0	; () banked
  3534  0012CA  5195               	movf	lcd_printf@have_precision& (0+255),w,b
  3535  0012CC  0100               	movlb	0	; () banked
  3536  0012CE  A4D8               	btfss	status,2,c
  3537  0012D0  D01F               	goto	l3361
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;iut_lcd.c: 691: if (width > w + 1) {
  3541  0012D2  0100               	movlb	0	; () banked
  3542  0012D4  51A1               	movf	lcd_printf@width& (0+255),w,b
  3543  0012D6  6E44               	movwf	??_lcd_printf& (0+255),c
  3544  0012D8  6A45               	clrf	(??_lcd_printf+1)& (0+255),c
  3545  0012DA  0100               	movlb	0	; () banked
  3546  0012DC  518E               	movf	lcd_printf@w& (0+255),w,b
  3547  0012DE  6E46               	movwf	(??_lcd_printf+2)& (0+255),c
  3548  0012E0  6A47               	clrf	(??_lcd_printf+3)& (0+255),c
  3549  0012E2  0E01               	movlw	1
  3550  0012E4  2646               	addwf	??_lcd_printf+2,f,c
  3551  0012E6  0E00               	movlw	0
  3552  0012E8  2247               	addwfc	??_lcd_printf+3,f,c
  3553  0012EA  5044               	movf	??_lcd_printf,w,c
  3554  0012EC  5C46               	subwf	??_lcd_printf+2,w,c
  3555  0012EE  5047               	movf	??_lcd_printf+3,w,c
  3556  0012F0  0A80               	xorlw	128
  3557  0012F2  6E48               	movwf	(??_lcd_printf+4)& (0+255),c
  3558  0012F4  5045               	movf	??_lcd_printf+1,w,c
  3559  0012F6  0A80               	xorlw	128
  3560  0012F8  5848               	subwfb	(??_lcd_printf+4)& (0+255),w,c
  3561  0012FA  B0D8               	btfsc	status,0,c
  3562  0012FC  D009               	goto	l3361
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;iut_lcd.c: 692: precision = width - (w + 1);
  3566  0012FE  0100               	movlb	0	; () banked
  3567  001300  298E               	incf	lcd_printf@w& (0+255),w,b
  3568  001302  0800               	sublw	0
  3569  001304  0100               	movlb	0	; () banked
  3570  001306  25A1               	addwf	lcd_printf@width& (0+255),w,b
  3571  001308  0100               	movlb	0	; () banked
  3572  00130A  6FA0               	movwf	lcd_printf@precision& (0+255),b
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;iut_lcd.c: 693: w = width;
  3576  00130C  C0A1  F08E         	movff	lcd_printf@width,lcd_printf@w
  3577  001310                     l3361:
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;iut_lcd.c: 694: }
  3581                           ;iut_lcd.c: 695: }
  3582                           ;iut_lcd.c: 696: if (!(flags & 0x1)) {
  3583  001310  0100               	movlb	0	; () banked
  3584  001312  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  3585  001314  D02E               	goto	l3385
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;iut_lcd.c: 697: if (flags & 0x10) {
  3589  001316  0100               	movlb	0	; () banked
  3590  001318  A99F               	btfss	lcd_printf@flags& (0+255),4,b
  3591  00131A  D01B               	goto	l3379
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;iut_lcd.c: 698: if (have_sign) lcd_write_data_busy(sign);
  3595  00131C  0100               	movlb	0	; () banked
  3596  00131E  518B               	movf	lcd_printf@have_sign& (0+255),w,b
  3597  001320  0100               	movlb	0	; () banked
  3598  001322  B4D8               	btfsc	status,2,c
  3599  001324  D00A               	goto	l3373
  3600                           
  3601                           ; BSR set to: 0
  3602  001326  0100               	movlb	0	; () banked
  3603  001328  5188               	movf	lcd_printf@sign& (0+255),w,b
  3604  00132A  ECAD  F011         	call	_lcd_write_data_busy
  3605                           
  3606                           ;iut_lcd.c: 699: for (; width > w; w++) lcd_write_data_busy('0');
  3607  00132E  D005               	goto	l3373
  3608  001330                     l3369:
  3609  001330  0E30               	movlw	48
  3610  001332  ECAD  F011         	call	_lcd_write_data_busy
  3611  001336  0100               	movlb	0	; () banked
  3612  001338  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3613  00133A                     l3373:
  3614  00133A  0100               	movlb	0	; () banked
  3615  00133C  51A1               	movf	lcd_printf@width& (0+255),w,b
  3616  00133E  0100               	movlb	0	; () banked
  3617  001340  5D8E               	subwf	lcd_printf@w& (0+255),w,b
  3618  001342  B0D8               	btfsc	status,0,c
  3619  001344  D01F               	goto	l3389
  3620  001346  D7F4               	goto	l3369
  3621  001348                     l3375:
  3622                           
  3623                           ; BSR set to: 0
  3624  001348  0E20               	movlw	32
  3625  00134A  ECAD  F011         	call	_lcd_write_data_busy
  3626  00134E  0100               	movlb	0	; () banked
  3627  001350  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3628  001352                     l3379:
  3629                           
  3630                           ; BSR set to: 0
  3631  001352  0100               	movlb	0	; () banked
  3632  001354  51A1               	movf	lcd_printf@width& (0+255),w,b
  3633  001356  0100               	movlb	0	; () banked
  3634  001358  5D8E               	subwf	lcd_printf@w& (0+255),w,b
  3635  00135A  A0D8               	btfss	status,0,c
  3636  00135C  D7F5               	goto	l3375
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;iut_lcd.c: 702: if (have_sign) lcd_write_data_busy(sign);
  3640                           
  3641                           ; BSR set to: 0
  3642  00135E  0100               	movlb	0	; () banked
  3643  001360  518B               	movf	lcd_printf@have_sign& (0+255),w,b
  3644  001362  0100               	movlb	0	; () banked
  3645  001364  B4D8               	btfsc	status,2,c
  3646  001366  D00E               	goto	l3389
  3647                           
  3648                           ; BSR set to: 0
  3649  001368  0100               	movlb	0	; () banked
  3650  00136A  5188               	movf	lcd_printf@sign& (0+255),w,b
  3651  00136C  ECAD  F011         	call	_lcd_write_data_busy
  3652                           
  3653                           ;iut_lcd.c: 703: }
  3654                           ;iut_lcd.c: 704: } else {
  3655  001370  D009               	goto	l3389
  3656  001372                     l3385:
  3657                           
  3658                           ;iut_lcd.c: 705: if (have_sign) lcd_write_data_busy(sign);
  3659  001372  0100               	movlb	0	; () banked
  3660  001374  518B               	movf	lcd_printf@have_sign& (0+255),w,b
  3661  001376  0100               	movlb	0	; () banked
  3662  001378  B4D8               	btfsc	status,2,c
  3663  00137A  D004               	goto	l3389
  3664                           
  3665                           ; BSR set to: 0
  3666  00137C  0100               	movlb	0	; () banked
  3667  00137E  5188               	movf	lcd_printf@sign& (0+255),w,b
  3668  001380  ECAD  F011         	call	_lcd_write_data_busy
  3669  001384                     l3389:
  3670                           
  3671                           ;iut_lcd.c: 706: }
  3672                           ;iut_lcd.c: 707: if (i == 0) {
  3673  001384  0100               	movlb	0	; () banked
  3674  001386  518D               	movf	lcd_printf@i& (0+255),w,b
  3675  001388  0100               	movlb	0	; () banked
  3676  00138A  A4D8               	btfss	status,2,c
  3677  00138C  D003               	goto	l3393
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;iut_lcd.c: 708: lcd_write_data_busy('0');
  3681  00138E  0E30               	movlw	48
  3682  001390  ECAD  F011         	call	_lcd_write_data_busy
  3683  001394                     l3393:
  3684                           
  3685                           ;iut_lcd.c: 709: }
  3686                           ;iut_lcd.c: 710: for (; i > 0; i--) {
  3687  001394  0100               	movlb	0	; () banked
  3688  001396  518D               	movf	lcd_printf@i& (0+255),w,b
  3689  001398  0100               	movlb	0	; () banked
  3690  00139A  B4D8               	btfsc	status,2,c
  3691  00139C  D04A               	goto	l3403
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;iut_lcd.c: 711: x *= 10;
  3695                           
  3696                           ; BSR set to: 0
  3697                           
  3698                           ; BSR set to: 0
  3699  00139E  C096  F02B         	movff	lcd_printf@x,___ftmul@f1
  3700  0013A2  C097  F02C         	movff	lcd_printf@x+1,___ftmul@f1+1
  3701  0013A6  C098  F02D         	movff	lcd_printf@x+2,___ftmul@f1+2
  3702  0013AA  0E00               	movlw	0
  3703  0013AC  6E2E               	movwf	___ftmul@f2,c
  3704  0013AE  0E20               	movlw	32
  3705  0013B0  6E2F               	movwf	___ftmul@f2+1,c
  3706  0013B2  0E41               	movlw	65
  3707  0013B4  6E30               	movwf	___ftmul@f2+2,c
  3708  0013B6  EC0B  F00E         	call	___ftmul	;wreg free
  3709  0013BA  C02B  F096         	movff	?___ftmul,lcd_printf@x
  3710  0013BE  C02C  F097         	movff	?___ftmul+1,lcd_printf@x+1
  3711  0013C2  C02D  F098         	movff	?___ftmul+2,lcd_printf@x+2
  3712                           
  3713                           ;iut_lcd.c: 712: k = (unsigned int)x;
  3714  0013C6  C096  F001         	movff	lcd_printf@x,___fttol@f1
  3715  0013CA  C097  F002         	movff	lcd_printf@x+1,___fttol@f1+1
  3716  0013CE  C098  F003         	movff	lcd_printf@x+2,___fttol@f1+2
  3717  0013D2  EC91  F00D         	call	___fttol	;wreg free
  3718  0013D6  C001  F089         	movff	?___fttol,lcd_printf@k
  3719  0013DA  C002  F08A         	movff	?___fttol+1,lcd_printf@k+1
  3720                           
  3721                           ;iut_lcd.c: 713: x = x - k;
  3722  0013DE  C089  F009         	movff	lcd_printf@k,___lwtoft@c
  3723  0013E2  C08A  F00A         	movff	lcd_printf@k+1,___lwtoft@c+1
  3724  0013E6  EC7A  F011         	call	___lwtoft	;wreg free
  3725  0013EA  C009  F00D         	movff	?___lwtoft,___ftneg@f1
  3726  0013EE  C00A  F00E         	movff	?___lwtoft+1,___ftneg@f1+1
  3727  0013F2  C00B  F00F         	movff	?___lwtoft+2,___ftneg@f1+2
  3728  0013F6  EC8C  F011         	call	___ftneg	;wreg free
  3729  0013FA  C00D  F010         	movff	?___ftneg,___ftadd@f1
  3730  0013FE  C00E  F011         	movff	?___ftneg+1,___ftadd@f1+1
  3731  001402  C00F  F012         	movff	?___ftneg+2,___ftadd@f1+2
  3732  001406  C096  F013         	movff	lcd_printf@x,___ftadd@f2
  3733  00140A  C097  F014         	movff	lcd_printf@x+1,___ftadd@f2+1
  3734  00140E  C098  F015         	movff	lcd_printf@x+2,___ftadd@f2+2
  3735  001412  ECBB  F00C         	call	___ftadd	;wreg free
  3736  001416  C010  F096         	movff	?___ftadd,lcd_printf@x
  3737  00141A  C011  F097         	movff	?___ftadd+1,lcd_printf@x+1
  3738  00141E  C012  F098         	movff	?___ftadd+2,lcd_printf@x+2
  3739                           
  3740                           ;iut_lcd.c: 714: lcd_write_data_busy(k + '0');
  3741  001422  0100               	movlb	0	; () banked
  3742  001424  5189               	movf	lcd_printf@k& (0+255),w,b
  3743  001426  0F30               	addlw	48
  3744  001428  ECAD  F011         	call	_lcd_write_data_busy
  3745  00142C  0100               	movlb	0	; () banked
  3746  00142E  078D               	decf	lcd_printf@i& (0+255),f,b
  3747  001430  D7B1               	goto	l3393
  3748  001432                     l3403:
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;iut_lcd.c: 715: }
  3752                           ;iut_lcd.c: 716: if (precision > 0) lcd_write_data_busy('.');
  3753  001432  0100               	movlb	0	; () banked
  3754  001434  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3755  001436  0100               	movlb	0	; () banked
  3756  001438  B4D8               	btfsc	status,2,c
  3757  00143A  D04D               	goto	l3411
  3758                           
  3759                           ; BSR set to: 0
  3760  00143C  0E2E               	movlw	46
  3761  00143E  ECAD  F011         	call	_lcd_write_data_busy
  3762                           
  3763                           ;iut_lcd.c: 717: for (; i < precision; i++) {
  3764  001442  D049               	goto	l3411
  3765  001444                     l3407:
  3766                           
  3767                           ;iut_lcd.c: 718: x *= 10;
  3768  001444  C096  F02B         	movff	lcd_printf@x,___ftmul@f1
  3769  001448  C097  F02C         	movff	lcd_printf@x+1,___ftmul@f1+1
  3770  00144C  C098  F02D         	movff	lcd_printf@x+2,___ftmul@f1+2
  3771  001450  0E00               	movlw	0
  3772  001452  6E2E               	movwf	___ftmul@f2,c
  3773  001454  0E20               	movlw	32
  3774  001456  6E2F               	movwf	___ftmul@f2+1,c
  3775  001458  0E41               	movlw	65
  3776  00145A  6E30               	movwf	___ftmul@f2+2,c
  3777  00145C  EC0B  F00E         	call	___ftmul	;wreg free
  3778  001460  C02B  F096         	movff	?___ftmul,lcd_printf@x
  3779  001464  C02C  F097         	movff	?___ftmul+1,lcd_printf@x+1
  3780  001468  C02D  F098         	movff	?___ftmul+2,lcd_printf@x+2
  3781                           
  3782                           ;iut_lcd.c: 719: k = (unsigned int)x;
  3783  00146C  C096  F001         	movff	lcd_printf@x,___fttol@f1
  3784  001470  C097  F002         	movff	lcd_printf@x+1,___fttol@f1+1
  3785  001474  C098  F003         	movff	lcd_printf@x+2,___fttol@f1+2
  3786  001478  EC91  F00D         	call	___fttol	;wreg free
  3787  00147C  C001  F089         	movff	?___fttol,lcd_printf@k
  3788  001480  C002  F08A         	movff	?___fttol+1,lcd_printf@k+1
  3789                           
  3790                           ;iut_lcd.c: 720: x = x - k;
  3791  001484  C089  F009         	movff	lcd_printf@k,___lwtoft@c
  3792  001488  C08A  F00A         	movff	lcd_printf@k+1,___lwtoft@c+1
  3793  00148C  EC7A  F011         	call	___lwtoft	;wreg free
  3794  001490  C009  F00D         	movff	?___lwtoft,___ftneg@f1
  3795  001494  C00A  F00E         	movff	?___lwtoft+1,___ftneg@f1+1
  3796  001498  C00B  F00F         	movff	?___lwtoft+2,___ftneg@f1+2
  3797  00149C  EC8C  F011         	call	___ftneg	;wreg free
  3798  0014A0  C00D  F010         	movff	?___ftneg,___ftadd@f1
  3799  0014A4  C00E  F011         	movff	?___ftneg+1,___ftadd@f1+1
  3800  0014A8  C00F  F012         	movff	?___ftneg+2,___ftadd@f1+2
  3801  0014AC  C096  F013         	movff	lcd_printf@x,___ftadd@f2
  3802  0014B0  C097  F014         	movff	lcd_printf@x+1,___ftadd@f2+1
  3803  0014B4  C098  F015         	movff	lcd_printf@x+2,___ftadd@f2+2
  3804  0014B8  ECBB  F00C         	call	___ftadd	;wreg free
  3805  0014BC  C010  F096         	movff	?___ftadd,lcd_printf@x
  3806  0014C0  C011  F097         	movff	?___ftadd+1,lcd_printf@x+1
  3807  0014C4  C012  F098         	movff	?___ftadd+2,lcd_printf@x+2
  3808                           
  3809                           ;iut_lcd.c: 721: lcd_write_data_busy(k + '0');
  3810  0014C8  0100               	movlb	0	; () banked
  3811  0014CA  5189               	movf	lcd_printf@k& (0+255),w,b
  3812  0014CC  0F30               	addlw	48
  3813  0014CE  ECAD  F011         	call	_lcd_write_data_busy
  3814  0014D2  0100               	movlb	0	; () banked
  3815  0014D4  2B8D               	incf	lcd_printf@i& (0+255),f,b
  3816  0014D6                     l3411:
  3817  0014D6  0100               	movlb	0	; () banked
  3818  0014D8  51A0               	movf	lcd_printf@precision& (0+255),w,b
  3819  0014DA  0100               	movlb	0	; () banked
  3820  0014DC  5D8D               	subwf	lcd_printf@i& (0+255),w,b
  3821  0014DE  A0D8               	btfss	status,0,c
  3822  0014E0  D7B1               	goto	l3407
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;iut_lcd.c: 722: }
  3826                           ;iut_lcd.c: 723: if (flags & 0x1) {
  3827  0014E2  0100               	movlb	0	; () banked
  3828  0014E4  B19F               	btfsc	lcd_printf@flags& (0+255),0,b
  3829  0014E6  D006               	goto	l3419
  3830  0014E8  D04C               	goto	l3427
  3831  0014EA                     l3415:
  3832                           
  3833                           ; BSR set to: 0
  3834  0014EA  0E20               	movlw	32
  3835  0014EC  ECAD  F011         	call	_lcd_write_data_busy
  3836  0014F0  0100               	movlb	0	; () banked
  3837  0014F2  2B8E               	incf	lcd_printf@w& (0+255),f,b
  3838  0014F4                     l3419:
  3839                           
  3840                           ; BSR set to: 0
  3841  0014F4  0100               	movlb	0	; () banked
  3842  0014F6  51A1               	movf	lcd_printf@width& (0+255),w,b
  3843  0014F8  0100               	movlb	0	; () banked
  3844  0014FA  5D8E               	subwf	lcd_printf@w& (0+255),w,b
  3845  0014FC  B0D8               	btfsc	status,0,c
  3846  0014FE  D041               	goto	l3427
  3847  001500  D7F4               	goto	l3415
  3848  001502                     l3423:
  3849                           
  3850                           ; BSR set to: 0
  3851  001502  0100               	movlb	0	; () banked
  3852  001504  51A2               	movf	lcd_printf@c& (0+255),w,b
  3853                           
  3854                           ; Switch size 1, requested type "space"
  3855                           ; Number of cases is 16, Range of values is 0 to 120
  3856                           ; switch strategies available:
  3857                           ; Name         Instructions Cycles
  3858                           ; simple_byte           49    25 (average)
  3859                           ;	Chosen strategy is simple_byte
  3860  001506  0A00               	xorlw	0	; case 0
  3861  001508  B4D8               	btfsc	status,2,c
  3862  00150A  EF65  F005         	goto	l3001
  3863  00150E  0A25               	xorlw	37	; case 37
  3864  001510  B4D8               	btfsc	status,2,c
  3865  001512  EF68  F005         	goto	l3003
  3866  001516  0A67               	xorlw	103	; case 66
  3867  001518  B4D8               	btfsc	status,2,c
  3868  00151A  D41B               	goto	l3131
  3869  00151C  0A12               	xorlw	18	; case 80
  3870  00151E  B4D8               	btfsc	status,2,c
  3871  001520  D450               	goto	l3151
  3872  001522  0A03               	xorlw	3	; case 83
  3873  001524  B4D8               	btfsc	status,2,c
  3874  001526  EFA1  F005         	goto	l3027
  3875  00152A  0A0B               	xorlw	11	; case 88
  3876  00152C  B4D8               	btfsc	status,2,c
  3877  00152E  D411               	goto	l3131
  3878  001530  0A3A               	xorlw	58	; case 98
  3879  001532  B4D8               	btfsc	status,2,c
  3880  001534  D40E               	goto	l3131
  3881  001536  0A01               	xorlw	1	; case 99
  3882  001538  B4D8               	btfsc	status,2,c
  3883  00153A  EF6D  F005         	goto	l3005
  3884  00153E  0A07               	xorlw	7	; case 100
  3885  001540  B4D8               	btfsc	status,2,c
  3886  001542  D405               	goto	l3129
  3887  001544  0A02               	xorlw	2	; case 102
  3888  001546  B4D8               	btfsc	status,2,c
  3889  001548  D625               	goto	l3305
  3890  00154A  0A0F               	xorlw	15	; case 105
  3891  00154C  B4D8               	btfsc	status,2,c
  3892  00154E  EFA7  F006         	goto	l3129
  3893  001552  0A06               	xorlw	6	; case 111
  3894  001554  B4D8               	btfsc	status,2,c
  3895  001556  EFA9  F006         	goto	l3131
  3896  00155A  0A1F               	xorlw	31	; case 112
  3897  00155C  B4D8               	btfsc	status,2,c
  3898  00155E  D431               	goto	l3151
  3899  001560  0A03               	xorlw	3	; case 115
  3900  001562  B4D8               	btfsc	status,2,c
  3901  001564  EF28  F006         	goto	l3081
  3902  001568  0A06               	xorlw	6	; case 117
  3903  00156A  B4D8               	btfsc	status,2,c
  3904  00156C  EFA9  F006         	goto	l3131
  3905  001570  0A0D               	xorlw	13	; case 120
  3906  001572  B4D8               	btfsc	status,2,c
  3907  001574  EFA9  F006         	goto	l3131
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;iut_lcd.c: 732: } else {
  3911  001578  D004               	goto	l3427
  3912  00157A                     l3425:
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;iut_lcd.c: 733: lcd_putc(c);
  3916  00157A  0100               	movlb	0	; () banked
  3917  00157C  51A2               	movf	lcd_printf@c& (0+255),w,b
  3918  00157E  ECAA  F010         	call	_lcd_putc
  3919  001582                     l3427:
  3920  001582  4A3A               	infsnz	lcd_printf@f,f,c
  3921  001584  2A3B               	incf	lcd_printf@f+1,f,c
  3922  001586                     L1:
  3923  001586  C03A  FFF6         	movff	lcd_printf@f,tblptrl
  3924  00158A  C03B  FFF7         	movff	lcd_printf@f+1,tblptrh
  3925  00158E                     	if	0	;tblptru may be non-zero
  3926  00158E                     	endif
  3927  00158E                     	if	0	;tblptru may be non-zero
  3928  00158E                     	endif
  3929  00158E  0008               	tblrd		*
  3930  001590  CFF5 F0A2          	movff	tablat,lcd_printf@c
  3931  001594  0100               	movlb	0	; () banked
  3932  001596  51A2               	movf	lcd_printf@c& (0+255),w,b
  3933  001598  0100               	movlb	0	; () banked
  3934  00159A  B4D8               	btfsc	status,2,c
  3935  00159C  0012               	return	
  3936  00159E  EF1F  F004         	goto	l2879
  3937  0015A2                     __end_of_lcd_printf:
  3938                           	opt stack 0
  3939                           tblptru	equ	0xFF8
  3940                           tblptrh	equ	0xFF7
  3941                           tblptrl	equ	0xFF6
  3942                           tablat	equ	0xFF5
  3943                           prodl	equ	0xFF3
  3944                           indf2	equ	0xFDF
  3945                           postinc2	equ	0xFDE
  3946                           postdec2	equ	0xFDD
  3947                           fsr2h	equ	0xFDA
  3948                           fsr2l	equ	0xFD9
  3949                           status	equ	0xFD8
  3950                           
  3951 ;; *************** function _lcd_repete_n *****************
  3952 ;; Defined at:
  3953 ;;		line 798 in file "iut_lcd.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;  n               1    wreg     unsigned char 
  3956 ;;  c               1    2[COMRAM] unsigned char 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;  n               1    3[COMRAM] unsigned char 
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, status,2, status,0, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3968 ;;      Params:         1       0       0       0       0       0       0       0       0
  3969 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3970 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3971 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3972 ;;Total ram usage:        2 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    3
  3975 ;; This function calls:
  3976 ;;		_lcd_write_data_busy
  3977 ;; This function is called by:
  3978 ;;		_lcd_printf
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           	psect	text5
  3983  002386                     __ptext5:
  3984                           	opt stack 0
  3985  002386                     _lcd_repete_n:
  3986                           	opt stack 26
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;incstack = 0
  3990                           ;lcd_repete_n@n stored from wreg
  3991  002386  6E04               	movwf	lcd_repete_n@n,c
  3992                           
  3993                           ;iut_lcd.c: 799: while (n--) lcd_write_data_busy(c);
  3994  002388  D003               	goto	l2469
  3995  00238A                     l2467:
  3996  00238A  5003               	movf	lcd_repete_n@c,w,c
  3997  00238C  ECAD  F011         	call	_lcd_write_data_busy
  3998  002390                     l2469:
  3999  002390  0604               	decf	lcd_repete_n@n,f,c
  4000  002392  2804               	incf	lcd_repete_n@n,w,c
  4001  002394  B4D8               	btfsc	status,2,c
  4002  002396  0012               	return	
  4003  002398  D7F8               	goto	l2467
  4004  00239A                     __end_of_lcd_repete_n:
  4005                           	opt stack 0
  4006                           tblptru	equ	0xFF8
  4007                           tblptrh	equ	0xFF7
  4008                           tblptrl	equ	0xFF6
  4009                           tablat	equ	0xFF5
  4010                           prodl	equ	0xFF3
  4011                           indf2	equ	0xFDF
  4012                           postinc2	equ	0xFDE
  4013                           postdec2	equ	0xFDD
  4014                           fsr2h	equ	0xFDA
  4015                           fsr2l	equ	0xFD9
  4016                           status	equ	0xFD8
  4017                           
  4018 ;; *************** function _lcd_putc *****************
  4019 ;; Defined at:
  4020 ;;		line 180 in file "iut_lcd.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  lettre          1    wreg     unsigned char 
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;  lettre          1    5[COMRAM] unsigned char 
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      void 
  4027 ;; Registers used:
  4028 ;;		wreg, status,2, status,0, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4034 ;;      Params:         0       0       0       0       0       0       0       0       0
  4035 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4036 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4037 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4038 ;;Total ram usage:        1 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    4
  4041 ;; This function calls:
  4042 ;;		_lcd_position
  4043 ;;		_lcd_write_cmd_busy
  4044 ;;		_lcd_write_data_busy
  4045 ;; This function is called by:
  4046 ;;		_lcd_printf
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           	psect	text6
  4051  002154                     __ptext6:
  4052                           	opt stack 0
  4053  002154                     _lcd_putc:
  4054                           	opt stack 25
  4055                           
  4056                           ;incstack = 0
  4057                           ;lcd_putc@lettre stored from wreg
  4058  002154  6E06               	movwf	lcd_putc@lettre,c
  4059                           
  4060                           ;iut_lcd.c: 181: if (lettre >= 0x20) {
  4061  002156  0E1F               	movlw	31
  4062  002158  6406               	cpfsgt	lcd_putc@lettre,c
  4063  00215A  D004               	goto	l2451
  4064                           
  4065                           ;iut_lcd.c: 182: lcd_write_data_busy(lettre);
  4066  00215C  5006               	movf	lcd_putc@lettre,w,c
  4067  00215E  ECAD  F011         	call	_lcd_write_data_busy
  4068                           
  4069                           ;iut_lcd.c: 183: } else if (lettre == '\f') {
  4070  002162  0012               	return	
  4071  002164                     l2451:
  4072  002164  0E0C               	movlw	12
  4073  002166  1806               	xorwf	lcd_putc@lettre,w,c
  4074  002168  A4D8               	btfss	status,2,c
  4075  00216A  D004               	goto	l2455
  4076                           
  4077                           ;iut_lcd.c: 184: lcd_write_cmd_busy(0x01);
  4078  00216C  0E01               	movlw	1
  4079  00216E  ECB8  F011         	call	_lcd_write_cmd_busy
  4080                           
  4081                           ;iut_lcd.c: 185: } else if (lettre == '\n') {
  4082  002172  0012               	return	
  4083  002174                     l2455:
  4084  002174  0E0A               	movlw	10
  4085  002176  1806               	xorwf	lcd_putc@lettre,w,c
  4086  002178  A4D8               	btfss	status,2,c
  4087  00217A  D006               	goto	l2459
  4088                           
  4089                           ;iut_lcd.c: 186: lcd_position(1, 0);
  4090  00217C  0E00               	movlw	0
  4091  00217E  6E03               	movwf	lcd_position@colonne,c
  4092  002180  0E01               	movlw	1
  4093  002182  EC9E  F011         	call	_lcd_position
  4094                           
  4095                           ;iut_lcd.c: 187: } else if (lettre == '\b') {
  4096  002186  0012               	return	
  4097  002188                     l2459:
  4098  002188  0E08               	movlw	8
  4099  00218A  1806               	xorwf	lcd_putc@lettre,w,c
  4100  00218C  A4D8               	btfss	status,2,c
  4101  00218E  D004               	goto	l2463
  4102                           
  4103                           ;iut_lcd.c: 188: lcd_write_cmd_busy(0x10);
  4104  002190  0E10               	movlw	16
  4105  002192  ECB8  F011         	call	_lcd_write_cmd_busy
  4106                           
  4107                           ;iut_lcd.c: 189: } else {
  4108  002196  0012               	return	
  4109  002198                     l2463:
  4110                           
  4111                           ;iut_lcd.c: 190: lcd_write_data_busy(lettre);
  4112  002198  5006               	movf	lcd_putc@lettre,w,c
  4113  00219A  ECAD  F011         	call	_lcd_write_data_busy
  4114  00219E  0012               	return	
  4115  0021A0                     __end_of_lcd_putc:
  4116                           	opt stack 0
  4117                           tblptru	equ	0xFF8
  4118                           tblptrh	equ	0xFF7
  4119                           tblptrl	equ	0xFF6
  4120                           tablat	equ	0xFF5
  4121                           prodl	equ	0xFF3
  4122                           indf2	equ	0xFDF
  4123                           postinc2	equ	0xFDE
  4124                           postdec2	equ	0xFDD
  4125                           fsr2h	equ	0xFDA
  4126                           fsr2l	equ	0xFD9
  4127                           status	equ	0xFD8
  4128                           
  4129 ;; *************** function _lcd_write_data_busy *****************
  4130 ;; Defined at:
  4131 ;;		line 758 in file "iut_lcd.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;  c               1    wreg     unsigned char 
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;  c               1    1[COMRAM] unsigned char 
  4136 ;; Return value:  Size  Location     Type
  4137 ;;                  1    wreg      void 
  4138 ;; Registers used:
  4139 ;;		wreg, status,2, status,0, cstack
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4145 ;;      Params:         0       0       0       0       0       0       0       0       0
  4146 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4148 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4149 ;;Total ram usage:        1 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    2
  4152 ;; This function calls:
  4153 ;;		_lcd_busy
  4154 ;;		_lcd_write_cmd_data
  4155 ;; This function is called by:
  4156 ;;		_lcd_putc
  4157 ;;		_lcd_printf
  4158 ;;		_lcd_repete_n
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text7
  4163  00235A                     __ptext7:
  4164                           	opt stack 0
  4165  00235A                     _lcd_write_data_busy:
  4166                           	opt stack 27
  4167                           
  4168                           ;incstack = 0
  4169                           ;lcd_write_data_busy@c stored from wreg
  4170  00235A  6E02               	movwf	lcd_write_data_busy@c,c
  4171  00235C                     l2405:
  4172  00235C  ECD0  F010         	call	_lcd_busy	;wreg free
  4173  002360  0900               	iorlw	0
  4174  002362  A4D8               	btfss	status,2,c
  4175  002364  D7FB               	goto	l2405
  4176                           
  4177                           ;iut_lcd.c: 760: PORTDbits.RD1 = 1;
  4178  002366  8283               	bsf	3971,1,c	;volatile
  4179                           
  4180                           ;iut_lcd.c: 761: lcd_write_cmd_data(c);
  4181  002368  5002               	movf	lcd_write_data_busy@c,w,c
  4182  00236A  EC25  F011         	call	_lcd_write_cmd_data
  4183  00236E  0012               	return		;funcret
  4184  002370                     __end_of_lcd_write_data_busy:
  4185                           	opt stack 0
  4186                           tblptru	equ	0xFF8
  4187                           tblptrh	equ	0xFF7
  4188                           tblptrl	equ	0xFF6
  4189                           tablat	equ	0xFF5
  4190                           prodl	equ	0xFF3
  4191                           indf2	equ	0xFDF
  4192                           postinc2	equ	0xFDE
  4193                           postdec2	equ	0xFDD
  4194                           fsr2h	equ	0xFDA
  4195                           fsr2l	equ	0xFD9
  4196                           status	equ	0xFD8
  4197                           
  4198 ;; *************** function _lcd_position *****************
  4199 ;; Defined at:
  4200 ;;		line 159 in file "iut_lcd.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;  ligne           1    wreg     unsigned char 
  4203 ;;  colonne         1    2[COMRAM] unsigned char 
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;  ligne           1    3[COMRAM] unsigned char 
  4206 ;;  address         1    4[COMRAM] unsigned char 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		wreg, status,2, status,0, cstack
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4216 ;;      Params:         1       0       0       0       0       0       0       0       0
  4217 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4218 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4219 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4220 ;;Total ram usage:        3 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    3
  4223 ;; This function calls:
  4224 ;;		_lcd_write_cmd_busy
  4225 ;; This function is called by:
  4226 ;;		_main
  4227 ;;		_lcd_putc
  4228 ;;		_lcd_gotoyx
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text8
  4233  00233C                     __ptext8:
  4234                           	opt stack 0
  4235  00233C                     _lcd_position:
  4236                           	opt stack 25
  4237                           
  4238                           ;incstack = 0
  4239                           ;lcd_position@ligne stored from wreg
  4240  00233C  6E04               	movwf	lcd_position@ligne,c
  4241                           
  4242                           ;iut_lcd.c: 160: char address;
  4243                           ;iut_lcd.c: 162: if (ligne != 0) {
  4244  00233E  5004               	movf	lcd_position@ligne,w,c
  4245  002340  B4D8               	btfsc	status,2,c
  4246  002342  D002               	goto	l2397
  4247                           
  4248                           ;iut_lcd.c: 163: address = 0x40;
  4249  002344  0E40               	movlw	64
  4250  002346  D001               	goto	L14
  4251  002348                     l2397:
  4252                           
  4253                           ;iut_lcd.c: 165: address = 0;
  4254  002348  0E00               	movlw	0
  4255  00234A                     L14:
  4256  00234A  6E05               	movwf	lcd_position@address,c
  4257                           
  4258                           ;iut_lcd.c: 166: }
  4259                           ;iut_lcd.c: 167: address += colonne;
  4260  00234C  5003               	movf	lcd_position@colonne,w,c
  4261  00234E  2605               	addwf	lcd_position@address,f,c
  4262                           
  4263                           ;iut_lcd.c: 168: lcd_write_cmd_busy(0x80 | address);
  4264  002350  5005               	movf	lcd_position@address,w,c
  4265  002352  0980               	iorlw	128
  4266  002354  ECB8  F011         	call	_lcd_write_cmd_busy
  4267  002358  0012               	return		;funcret
  4268  00235A                     __end_of_lcd_position:
  4269                           	opt stack 0
  4270                           tblptru	equ	0xFF8
  4271                           tblptrh	equ	0xFF7
  4272                           tblptrl	equ	0xFF6
  4273                           tablat	equ	0xFF5
  4274                           prodl	equ	0xFF3
  4275                           indf2	equ	0xFDF
  4276                           postinc2	equ	0xFDE
  4277                           postdec2	equ	0xFDD
  4278                           fsr2h	equ	0xFDA
  4279                           fsr2l	equ	0xFD9
  4280                           status	equ	0xFD8
  4281                           
  4282 ;; *************** function ___lwtoft *****************
  4283 ;; Defined at:
  4284 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  c               2    8[COMRAM] unsigned int 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;		None
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  3    8[COMRAM] float 
  4291 ;; Registers used:
  4292 ;;		wreg, status,2, status,0, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4298 ;;      Params:         3       0       0       0       0       0       0       0       0
  4299 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4301 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4302 ;;Total ram usage:        3 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    1
  4305 ;; This function calls:
  4306 ;;		___ftpack
  4307 ;; This function is called by:
  4308 ;;		_lcd_printf
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           	psect	text9
  4313  0022F4                     __ptext9:
  4314                           	opt stack 0
  4315  0022F4                     ___lwtoft:
  4316                           	opt stack 28
  4317                           
  4318                           ;incstack = 0
  4319  0022F4  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  4320  0022F8  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  4321  0022FC  6A03               	clrf	___ftpack@arg+2,c
  4322  0022FE  0E8E               	movlw	142
  4323  002300  6E04               	movwf	___ftpack@exp,c
  4324  002302  0E00               	movlw	0
  4325  002304  6E05               	movwf	___ftpack@sign,c
  4326  002306  ECF8  F00E         	call	___ftpack	;wreg free
  4327  00230A  C001  F009         	movff	?___ftpack,?___lwtoft
  4328  00230E  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  4329  002312  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  4330  002316  0012               	return	
  4331  002318                     __end_of___lwtoft:
  4332                           	opt stack 0
  4333                           tblptru	equ	0xFF8
  4334                           tblptrh	equ	0xFF7
  4335                           tblptrl	equ	0xFF6
  4336                           tablat	equ	0xFF5
  4337                           prodl	equ	0xFF3
  4338                           indf2	equ	0xFDF
  4339                           postinc2	equ	0xFDE
  4340                           postdec2	equ	0xFDD
  4341                           fsr2h	equ	0xFDA
  4342                           fsr2l	equ	0xFD9
  4343                           status	equ	0xFD8
  4344                           
  4345 ;; *************** function ___llmod *****************
  4346 ;; Defined at:
  4347 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  dividend        4    0[COMRAM] unsigned long 
  4350 ;;  divisor         4    4[COMRAM] unsigned long 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  counter         1    8[COMRAM] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  4    0[COMRAM] unsigned long 
  4355 ;; Registers used:
  4356 ;;		wreg, status,2, status,0
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4362 ;;      Params:         8       0       0       0       0       0       0       0       0
  4363 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4365 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4366 ;;Total ram usage:        9 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; This function calls:
  4369 ;;		Nothing
  4370 ;; This function is called by:
  4371 ;;		_lcd_printf
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           	psect	text10
  4376  0020EE                     __ptext10:
  4377                           	opt stack 0
  4378  0020EE                     ___llmod:
  4379                           	opt stack 29
  4380                           
  4381                           ;incstack = 0
  4382  0020EE  5005               	movf	___llmod@divisor,w,c
  4383  0020F0  1006               	iorwf	___llmod@divisor+1,w,c
  4384  0020F2  1007               	iorwf	___llmod@divisor+2,w,c
  4385  0020F4  1008               	iorwf	___llmod@divisor+3,w,c
  4386  0020F6  B4D8               	btfsc	status,2,c
  4387  0020F8  D024               	goto	l841
  4388  0020FA  0E01               	movlw	1
  4389  0020FC  6E09               	movwf	___llmod@counter,c
  4390  0020FE  D006               	goto	l2731
  4391  002100                     l2729:
  4392  002100  90D8               	bcf	status,0,c
  4393  002102  3605               	rlcf	___llmod@divisor,f,c
  4394  002104  3606               	rlcf	___llmod@divisor+1,f,c
  4395  002106  3607               	rlcf	___llmod@divisor+2,f,c
  4396  002108  3608               	rlcf	___llmod@divisor+3,f,c
  4397  00210A  2A09               	incf	___llmod@counter,f,c
  4398  00210C                     l2731:
  4399  00210C  AE08               	btfss	___llmod@divisor+3,7,c
  4400  00210E  D7F8               	goto	l2729
  4401  002110                     l2733:
  4402  002110  5005               	movf	___llmod@divisor,w,c
  4403  002112  5C01               	subwf	___llmod@dividend,w,c
  4404  002114  5006               	movf	___llmod@divisor+1,w,c
  4405  002116  5802               	subwfb	___llmod@dividend+1,w,c
  4406  002118  5007               	movf	___llmod@divisor+2,w,c
  4407  00211A  5803               	subwfb	___llmod@dividend+2,w,c
  4408  00211C  5008               	movf	___llmod@divisor+3,w,c
  4409  00211E  5804               	subwfb	___llmod@dividend+3,w,c
  4410  002120  A0D8               	btfss	status,0,c
  4411  002122  D008               	goto	l2737
  4412  002124  5005               	movf	___llmod@divisor,w,c
  4413  002126  5E01               	subwf	___llmod@dividend,f,c
  4414  002128  5006               	movf	___llmod@divisor+1,w,c
  4415  00212A  5A02               	subwfb	___llmod@dividend+1,f,c
  4416  00212C  5007               	movf	___llmod@divisor+2,w,c
  4417  00212E  5A03               	subwfb	___llmod@dividend+2,f,c
  4418  002130  5008               	movf	___llmod@divisor+3,w,c
  4419  002132  5A04               	subwfb	___llmod@dividend+3,f,c
  4420  002134                     l2737:
  4421  002134  90D8               	bcf	status,0,c
  4422  002136  3208               	rrcf	___llmod@divisor+3,f,c
  4423  002138  3207               	rrcf	___llmod@divisor+2,f,c
  4424  00213A  3206               	rrcf	___llmod@divisor+1,f,c
  4425  00213C  3205               	rrcf	___llmod@divisor,f,c
  4426  00213E  2E09               	decfsz	___llmod@counter,f,c
  4427  002140  D7E7               	goto	l2733
  4428  002142                     l841:
  4429  002142  C001  F001         	movff	___llmod@dividend,?___llmod
  4430  002146  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4431  00214A  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4432  00214E  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4433  002152  0012               	return		;funcret
  4434  002154                     __end_of___llmod:
  4435                           	opt stack 0
  4436                           tblptru	equ	0xFF8
  4437                           tblptrh	equ	0xFF7
  4438                           tblptrl	equ	0xFF6
  4439                           tablat	equ	0xFF5
  4440                           prodl	equ	0xFF3
  4441                           indf2	equ	0xFDF
  4442                           postinc2	equ	0xFDE
  4443                           postdec2	equ	0xFDD
  4444                           fsr2h	equ	0xFDA
  4445                           fsr2l	equ	0xFD9
  4446                           status	equ	0xFD8
  4447                           
  4448 ;; *************** function ___lldiv *****************
  4449 ;; Defined at:
  4450 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;  dividend        4    0[COMRAM] unsigned long 
  4453 ;;  divisor         4    4[COMRAM] unsigned long 
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;  quotient        4    8[COMRAM] unsigned long 
  4456 ;;  counter         1   12[COMRAM] unsigned char 
  4457 ;; Return value:  Size  Location     Type
  4458 ;;                  4    0[COMRAM] unsigned long 
  4459 ;; Registers used:
  4460 ;;		wreg, status,2, status,0
  4461 ;; Tracked objects:
  4462 ;;		On entry : 0/0
  4463 ;;		On exit  : 0/0
  4464 ;;		Unchanged: 0/0
  4465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4466 ;;      Params:         8       0       0       0       0       0       0       0       0
  4467 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4468 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4469 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4470 ;;Total ram usage:       13 bytes
  4471 ;; Hardware stack levels used:    1
  4472 ;; This function calls:
  4473 ;;		Nothing
  4474 ;; This function is called by:
  4475 ;;		_lcd_printf
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           	psect	text11
  4480  00206C                     __ptext11:
  4481                           	opt stack 0
  4482  00206C                     ___lldiv:
  4483                           	opt stack 29
  4484                           
  4485                           ;incstack = 0
  4486  00206C  0E00               	movlw	0
  4487  00206E  6E09               	movwf	___lldiv@quotient,c
  4488  002070  0E00               	movlw	0
  4489  002072  6E0A               	movwf	___lldiv@quotient+1,c
  4490  002074  0E00               	movlw	0
  4491  002076  6E0B               	movwf	___lldiv@quotient+2,c
  4492  002078  0E00               	movlw	0
  4493  00207A  6E0C               	movwf	___lldiv@quotient+3,c
  4494  00207C  5005               	movf	___lldiv@divisor,w,c
  4495  00207E  1006               	iorwf	___lldiv@divisor+1,w,c
  4496  002080  1007               	iorwf	___lldiv@divisor+2,w,c
  4497  002082  1008               	iorwf	___lldiv@divisor+3,w,c
  4498  002084  B4D8               	btfsc	status,2,c
  4499  002086  D02A               	goto	l831
  4500  002088  0E01               	movlw	1
  4501  00208A  6E0D               	movwf	___lldiv@counter,c
  4502  00208C  D006               	goto	l2711
  4503  00208E                     l2709:
  4504  00208E  90D8               	bcf	status,0,c
  4505  002090  3605               	rlcf	___lldiv@divisor,f,c
  4506  002092  3606               	rlcf	___lldiv@divisor+1,f,c
  4507  002094  3607               	rlcf	___lldiv@divisor+2,f,c
  4508  002096  3608               	rlcf	___lldiv@divisor+3,f,c
  4509  002098  2A0D               	incf	___lldiv@counter,f,c
  4510  00209A                     l2711:
  4511  00209A  AE08               	btfss	___lldiv@divisor+3,7,c
  4512  00209C  D7F8               	goto	l2709
  4513  00209E                     l2713:
  4514  00209E  90D8               	bcf	status,0,c
  4515  0020A0  3609               	rlcf	___lldiv@quotient,f,c
  4516  0020A2  360A               	rlcf	___lldiv@quotient+1,f,c
  4517  0020A4  360B               	rlcf	___lldiv@quotient+2,f,c
  4518  0020A6  360C               	rlcf	___lldiv@quotient+3,f,c
  4519  0020A8  5005               	movf	___lldiv@divisor,w,c
  4520  0020AA  5C01               	subwf	___lldiv@dividend,w,c
  4521  0020AC  5006               	movf	___lldiv@divisor+1,w,c
  4522  0020AE  5802               	subwfb	___lldiv@dividend+1,w,c
  4523  0020B0  5007               	movf	___lldiv@divisor+2,w,c
  4524  0020B2  5803               	subwfb	___lldiv@dividend+2,w,c
  4525  0020B4  5008               	movf	___lldiv@divisor+3,w,c
  4526  0020B6  5804               	subwfb	___lldiv@dividend+3,w,c
  4527  0020B8  A0D8               	btfss	status,0,c
  4528  0020BA  D009               	goto	l2721
  4529  0020BC  5005               	movf	___lldiv@divisor,w,c
  4530  0020BE  5E01               	subwf	___lldiv@dividend,f,c
  4531  0020C0  5006               	movf	___lldiv@divisor+1,w,c
  4532  0020C2  5A02               	subwfb	___lldiv@dividend+1,f,c
  4533  0020C4  5007               	movf	___lldiv@divisor+2,w,c
  4534  0020C6  5A03               	subwfb	___lldiv@dividend+2,f,c
  4535  0020C8  5008               	movf	___lldiv@divisor+3,w,c
  4536  0020CA  5A04               	subwfb	___lldiv@dividend+3,f,c
  4537  0020CC  8009               	bsf	___lldiv@quotient,0,c
  4538  0020CE                     l2721:
  4539  0020CE  90D8               	bcf	status,0,c
  4540  0020D0  3208               	rrcf	___lldiv@divisor+3,f,c
  4541  0020D2  3207               	rrcf	___lldiv@divisor+2,f,c
  4542  0020D4  3206               	rrcf	___lldiv@divisor+1,f,c
  4543  0020D6  3205               	rrcf	___lldiv@divisor,f,c
  4544  0020D8  2E0D               	decfsz	___lldiv@counter,f,c
  4545  0020DA  D7E1               	goto	l2713
  4546  0020DC                     l831:
  4547  0020DC  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4548  0020E0  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4549  0020E4  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4550  0020E8  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4551  0020EC  0012               	return		;funcret
  4552  0020EE                     __end_of___lldiv:
  4553                           	opt stack 0
  4554                           tblptru	equ	0xFF8
  4555                           tblptrh	equ	0xFF7
  4556                           tblptrl	equ	0xFF6
  4557                           tablat	equ	0xFF5
  4558                           prodl	equ	0xFF3
  4559                           indf2	equ	0xFDF
  4560                           postinc2	equ	0xFDE
  4561                           postdec2	equ	0xFDD
  4562                           fsr2h	equ	0xFDA
  4563                           fsr2l	equ	0xFD9
  4564                           status	equ	0xFD8
  4565                           
  4566 ;; *************** function ___fttol *****************
  4567 ;; Defined at:
  4568 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  f1              3    0[COMRAM] float 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;  lval            4   10[COMRAM] unsigned long 
  4573 ;;  exp1            1   14[COMRAM] unsigned char 
  4574 ;;  sign1           1    9[COMRAM] unsigned char 
  4575 ;; Return value:  Size  Location     Type
  4576 ;;                  4    0[COMRAM] long 
  4577 ;; Registers used:
  4578 ;;		wreg, status,2, status,0
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4584 ;;      Params:         4       0       0       0       0       0       0       0       0
  4585 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4586 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4587 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4588 ;;Total ram usage:       15 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; This function calls:
  4591 ;;		Nothing
  4592 ;; This function is called by:
  4593 ;;		_main
  4594 ;;		_lcd_printf
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           	psect	text12
  4599  001B22                     __ptext12:
  4600                           	opt stack 0
  4601  001B22                     ___fttol:
  4602                           	opt stack 29
  4603                           
  4604                           ;incstack = 0
  4605  001B22  C003  F005         	movff	___fttol@f1+2,??___fttol
  4606  001B26  6A06               	clrf	(??___fttol+1)& (0+255),c
  4607  001B28  6A07               	clrf	(??___fttol+2)& (0+255),c
  4608  001B2A  3402               	rlcf	___fttol@f1+1,w,c
  4609  001B2C  3605               	rlcf	??___fttol& (0+255),f,c
  4610  001B2E  E301               	bnc	u2461
  4611  001B30  8006               	bsf	(??___fttol+1)& (0+255),0,c
  4612  001B32                     u2461:
  4613  001B32  5005               	movf	??___fttol,w,c
  4614  001B34  6E0F               	movwf	___fttol@exp1,c
  4615  001B36  500F               	movf	___fttol@exp1,w,c
  4616  001B38  A4D8               	btfss	status,2,c
  4617  001B3A  D009               	goto	l2663
  4618  001B3C  0E00               	movlw	0
  4619  001B3E  6E01               	movwf	?___fttol,c
  4620  001B40  0E00               	movlw	0
  4621  001B42  6E02               	movwf	?___fttol+1,c
  4622  001B44  0E00               	movlw	0
  4623  001B46  6E03               	movwf	?___fttol+2,c
  4624  001B48  0E00               	movlw	0
  4625  001B4A  6E04               	movwf	?___fttol+3,c
  4626  001B4C  0012               	return	
  4627  001B4E                     l2663:
  4628  001B4E  0E17               	movlw	23
  4629  001B50  6E05               	movwf	??___fttol& (0+255),c
  4630  001B52  C001  F006         	movff	___fttol@f1,??___fttol+1
  4631  001B56  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  4632  001B5A  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  4633  001B5E  2805               	incf	??___fttol,w,c
  4634  001B60  6E09               	movwf	(??___fttol+4)& (0+255),c
  4635  001B62  D004               	goto	u2480
  4636  001B64                     u2485:
  4637  001B64  90D8               	bcf	status,0,c
  4638  001B66  3208               	rrcf	??___fttol+3,f,c
  4639  001B68  3207               	rrcf	??___fttol+2,f,c
  4640  001B6A  3206               	rrcf	??___fttol+1,f,c
  4641  001B6C                     u2480:
  4642  001B6C  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  4643  001B6E  D7FA               	goto	u2485
  4644  001B70  5006               	movf	??___fttol+1,w,c
  4645  001B72  6E0A               	movwf	___fttol@sign1,c
  4646  001B74  8E02               	bsf	___fttol@f1+1,7,c
  4647  001B76  0EFF               	movlw	255
  4648  001B78  1601               	andwf	___fttol@f1,f,c
  4649  001B7A  0EFF               	movlw	255
  4650  001B7C  1602               	andwf	___fttol@f1+1,f,c
  4651  001B7E  0E00               	movlw	0
  4652  001B80  1603               	andwf	___fttol@f1+2,f,c
  4653  001B82  5001               	movf	___fttol@f1,w,c
  4654  001B84  6E0B               	movwf	___fttol@lval,c
  4655  001B86  5002               	movf	___fttol@f1+1,w,c
  4656  001B88  6E0C               	movwf	___fttol@lval+1,c
  4657  001B8A  5003               	movf	___fttol@f1+2,w,c
  4658  001B8C  6E0D               	movwf	___fttol@lval+2,c
  4659  001B8E  6A0E               	clrf	___fttol@lval+3,c
  4660  001B90  0E8E               	movlw	142
  4661  001B92  5E0F               	subwf	___fttol@exp1,f,c
  4662  001B94  AE0F               	btfss	___fttol@exp1,7,c
  4663  001B96  D016               	goto	l2685
  4664  001B98  500F               	movf	___fttol@exp1,w,c
  4665  001B9A  0A80               	xorlw	128
  4666  001B9C  0F8F               	addlw	143
  4667  001B9E  B0D8               	btfsc	status,0,c
  4668  001BA0  D009               	goto	l2681
  4669  001BA2  0E00               	movlw	0
  4670  001BA4  6E01               	movwf	?___fttol,c
  4671  001BA6  0E00               	movlw	0
  4672  001BA8  6E02               	movwf	?___fttol+1,c
  4673  001BAA  0E00               	movlw	0
  4674  001BAC  6E03               	movwf	?___fttol+2,c
  4675  001BAE  0E00               	movlw	0
  4676  001BB0  6E04               	movwf	?___fttol+3,c
  4677  001BB2  0012               	return	
  4678  001BB4                     l2681:
  4679  001BB4  90D8               	bcf	status,0,c
  4680  001BB6  320E               	rrcf	___fttol@lval+3,f,c
  4681  001BB8  320D               	rrcf	___fttol@lval+2,f,c
  4682  001BBA  320C               	rrcf	___fttol@lval+1,f,c
  4683  001BBC  320B               	rrcf	___fttol@lval,f,c
  4684  001BBE  3E0F               	incfsz	___fttol@exp1,f,c
  4685  001BC0  D7F9               	goto	l2681
  4686  001BC2  D015               	goto	l2695
  4687  001BC4                     l2685:
  4688  001BC4  0E17               	movlw	23
  4689  001BC6  640F               	cpfsgt	___fttol@exp1,c
  4690  001BC8  D00F               	goto	l2693
  4691  001BCA  0E00               	movlw	0
  4692  001BCC  6E01               	movwf	?___fttol,c
  4693  001BCE  0E00               	movlw	0
  4694  001BD0  6E02               	movwf	?___fttol+1,c
  4695  001BD2  0E00               	movlw	0
  4696  001BD4  6E03               	movwf	?___fttol+2,c
  4697  001BD6  0E00               	movlw	0
  4698  001BD8  6E04               	movwf	?___fttol+3,c
  4699  001BDA  0012               	return	
  4700  001BDC                     l2691:
  4701  001BDC  90D8               	bcf	status,0,c
  4702  001BDE  360B               	rlcf	___fttol@lval,f,c
  4703  001BE0  360C               	rlcf	___fttol@lval+1,f,c
  4704  001BE2  360D               	rlcf	___fttol@lval+2,f,c
  4705  001BE4  360E               	rlcf	___fttol@lval+3,f,c
  4706  001BE6  060F               	decf	___fttol@exp1,f,c
  4707  001BE8                     l2693:
  4708  001BE8  500F               	movf	___fttol@exp1,w,c
  4709  001BEA  A4D8               	btfss	status,2,c
  4710  001BEC  D7F7               	goto	l2691
  4711  001BEE                     l2695:
  4712  001BEE  500A               	movf	___fttol@sign1,w,c
  4713  001BF0  B4D8               	btfsc	status,2,c
  4714  001BF2  D008               	goto	l2699
  4715  001BF4  1E0E               	comf	___fttol@lval+3,f,c
  4716  001BF6  1E0D               	comf	___fttol@lval+2,f,c
  4717  001BF8  1E0C               	comf	___fttol@lval+1,f,c
  4718  001BFA  6C0B               	negf	___fttol@lval,c
  4719  001BFC  0E00               	movlw	0
  4720  001BFE  220C               	addwfc	___fttol@lval+1,f,c
  4721  001C00  220D               	addwfc	___fttol@lval+2,f,c
  4722  001C02  220E               	addwfc	___fttol@lval+3,f,c
  4723  001C04                     l2699:
  4724  001C04  C00B  F001         	movff	___fttol@lval,?___fttol
  4725  001C08  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  4726  001C0C  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  4727  001C10  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  4728  001C14  0012               	return	
  4729  001C16                     __end_of___fttol:
  4730                           	opt stack 0
  4731                           tblptru	equ	0xFF8
  4732                           tblptrh	equ	0xFF7
  4733                           tblptrl	equ	0xFF6
  4734                           tablat	equ	0xFF5
  4735                           prodl	equ	0xFF3
  4736                           indf2	equ	0xFDF
  4737                           postinc2	equ	0xFDE
  4738                           postdec2	equ	0xFDD
  4739                           fsr2h	equ	0xFDA
  4740                           fsr2l	equ	0xFD9
  4741                           status	equ	0xFD8
  4742                           
  4743 ;; *************** function ___ftneg *****************
  4744 ;; Defined at:
  4745 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;  f1              3   12[COMRAM] float 
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;		None
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  3   12[COMRAM] float 
  4752 ;; Registers used:
  4753 ;;		wreg, status,2, status,0
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4759 ;;      Params:         3       0       0       0       0       0       0       0       0
  4760 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4761 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4762 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4763 ;;Total ram usage:        3 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; This function calls:
  4766 ;;		Nothing
  4767 ;; This function is called by:
  4768 ;;		_main
  4769 ;;		_lcd_printf
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	text13
  4774  002318                     __ptext13:
  4775                           	opt stack 0
  4776  002318                     ___ftneg:
  4777                           	opt stack 29
  4778                           
  4779                           ;incstack = 0
  4780  002318  500D               	movf	___ftneg@f1,w,c
  4781  00231A  100E               	iorwf	___ftneg@f1+1,w,c
  4782  00231C  100F               	iorwf	___ftneg@f1+2,w,c
  4783  00231E  B4D8               	btfsc	status,2,c
  4784  002320  D006               	goto	l786
  4785  002322  0E00               	movlw	0
  4786  002324  1A0D               	xorwf	___ftneg@f1,f,c
  4787  002326  0E00               	movlw	0
  4788  002328  1A0E               	xorwf	___ftneg@f1+1,f,c
  4789  00232A  0E80               	movlw	128
  4790  00232C  1A0F               	xorwf	___ftneg@f1+2,f,c
  4791  00232E                     l786:
  4792  00232E  C00D  F00D         	movff	___ftneg@f1,?___ftneg
  4793  002332  C00E  F00E         	movff	___ftneg@f1+1,?___ftneg+1
  4794  002336  C00F  F00F         	movff	___ftneg@f1+2,?___ftneg+2
  4795  00233A  0012               	return		;funcret
  4796  00233C                     __end_of___ftneg:
  4797                           	opt stack 0
  4798                           tblptru	equ	0xFF8
  4799                           tblptrh	equ	0xFF7
  4800                           tblptrl	equ	0xFF6
  4801                           tablat	equ	0xFF5
  4802                           prodl	equ	0xFF3
  4803                           indf2	equ	0xFDF
  4804                           postinc2	equ	0xFDE
  4805                           postdec2	equ	0xFDD
  4806                           fsr2h	equ	0xFDA
  4807                           fsr2l	equ	0xFD9
  4808                           status	equ	0xFD8
  4809                           
  4810 ;; *************** function ___ftmul *****************
  4811 ;; Defined at:
  4812 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4813 ;; Parameters:    Size  Location     Type
  4814 ;;  f1              3   42[COMRAM] float 
  4815 ;;  f2              3   45[COMRAM] float 
  4816 ;; Auto vars:     Size  Location     Type
  4817 ;;  f3_as_produc    3   52[COMRAM] unsigned um
  4818 ;;  sign            1   56[COMRAM] unsigned char 
  4819 ;;  cntr            1   55[COMRAM] unsigned char 
  4820 ;;  exp             1   51[COMRAM] unsigned char 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  3   42[COMRAM] float 
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4830 ;;      Params:         6       0       0       0       0       0       0       0       0
  4831 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4832 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4833 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4834 ;;Total ram usage:       15 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    1
  4837 ;; This function calls:
  4838 ;;		___ftpack
  4839 ;; This function is called by:
  4840 ;;		_main
  4841 ;;		_lcd_printf
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           	psect	text14
  4846  001C16                     __ptext14:
  4847                           	opt stack 0
  4848  001C16                     ___ftmul:
  4849                           	opt stack 28
  4850                           
  4851                           ;incstack = 0
  4852  001C16  C02D  F031         	movff	___ftmul@f1+2,??___ftmul
  4853  001C1A  6A32               	clrf	(??___ftmul+1)& (0+255),c
  4854  001C1C  6A33               	clrf	(??___ftmul+2)& (0+255),c
  4855  001C1E  342C               	rlcf	___ftmul@f1+1,w,c
  4856  001C20  3631               	rlcf	??___ftmul& (0+255),f,c
  4857  001C22  E301               	bnc	u2361
  4858  001C24  8032               	bsf	(??___ftmul+1)& (0+255),0,c
  4859  001C26                     u2361:
  4860  001C26  5031               	movf	??___ftmul,w,c
  4861  001C28  6E34               	movwf	___ftmul@exp,c
  4862  001C2A  5034               	movf	___ftmul@exp,w,c
  4863  001C2C  A4D8               	btfss	status,2,c
  4864  001C2E  D007               	goto	l2593
  4865  001C30  0E00               	movlw	0
  4866  001C32  6E2B               	movwf	?___ftmul,c
  4867  001C34  0E00               	movlw	0
  4868  001C36  6E2C               	movwf	?___ftmul+1,c
  4869  001C38  0E00               	movlw	0
  4870  001C3A  6E2D               	movwf	?___ftmul+2,c
  4871  001C3C  0012               	return	
  4872  001C3E                     l2593:
  4873  001C3E  C030  F031         	movff	___ftmul@f2+2,??___ftmul
  4874  001C42  6A32               	clrf	(??___ftmul+1)& (0+255),c
  4875  001C44  6A33               	clrf	(??___ftmul+2)& (0+255),c
  4876  001C46  342F               	rlcf	___ftmul@f2+1,w,c
  4877  001C48  3631               	rlcf	??___ftmul& (0+255),f,c
  4878  001C4A  E301               	bnc	u2381
  4879  001C4C  8032               	bsf	(??___ftmul+1)& (0+255),0,c
  4880  001C4E                     u2381:
  4881  001C4E  5031               	movf	??___ftmul,w,c
  4882  001C50  6E39               	movwf	___ftmul@sign,c
  4883  001C52  5039               	movf	___ftmul@sign,w,c
  4884  001C54  A4D8               	btfss	status,2,c
  4885  001C56  D007               	goto	l2599
  4886  001C58  0E00               	movlw	0
  4887  001C5A  6E2B               	movwf	?___ftmul,c
  4888  001C5C  0E00               	movlw	0
  4889  001C5E  6E2C               	movwf	?___ftmul+1,c
  4890  001C60  0E00               	movlw	0
  4891  001C62  6E2D               	movwf	?___ftmul+2,c
  4892  001C64  0012               	return	
  4893  001C66                     l2599:
  4894  001C66  5039               	movf	___ftmul@sign,w,c
  4895  001C68  0F7B               	addlw	123
  4896  001C6A  2634               	addwf	___ftmul@exp,f,c
  4897  001C6C  C02D  F039         	movff	___ftmul@f1+2,___ftmul@sign
  4898  001C70  5030               	movf	___ftmul@f2+2,w,c
  4899  001C72  1A39               	xorwf	___ftmul@sign,f,c
  4900  001C74  0E80               	movlw	128
  4901  001C76  1639               	andwf	___ftmul@sign,f,c
  4902  001C78  8E2C               	bsf	___ftmul@f1+1,7,c
  4903  001C7A  8E2F               	bsf	___ftmul@f2+1,7,c
  4904  001C7C  0EFF               	movlw	255
  4905  001C7E  162E               	andwf	___ftmul@f2,f,c
  4906  001C80  0EFF               	movlw	255
  4907  001C82  162F               	andwf	___ftmul@f2+1,f,c
  4908  001C84  0E00               	movlw	0
  4909  001C86  1630               	andwf	___ftmul@f2+2,f,c
  4910  001C88  0E00               	movlw	0
  4911  001C8A  6E35               	movwf	___ftmul@f3_as_product,c
  4912  001C8C  0E00               	movlw	0
  4913  001C8E  6E36               	movwf	___ftmul@f3_as_product+1,c
  4914  001C90  0E00               	movlw	0
  4915  001C92  6E37               	movwf	___ftmul@f3_as_product+2,c
  4916  001C94  0E07               	movlw	7
  4917  001C96  6E38               	movwf	___ftmul@cntr,c
  4918  001C98                     l2613:
  4919  001C98  A02B               	btfss	___ftmul@f1,0,c
  4920  001C9A  D006               	goto	l2617
  4921  001C9C  502E               	movf	___ftmul@f2,w,c
  4922  001C9E  2635               	addwf	___ftmul@f3_as_product,f,c
  4923  001CA0  502F               	movf	___ftmul@f2+1,w,c
  4924  001CA2  2236               	addwfc	___ftmul@f3_as_product+1,f,c
  4925  001CA4  5030               	movf	___ftmul@f2+2,w,c
  4926  001CA6  2237               	addwfc	___ftmul@f3_as_product+2,f,c
  4927  001CA8                     l2617:
  4928  001CA8  90D8               	bcf	status,0,c
  4929  001CAA  322D               	rrcf	___ftmul@f1+2,f,c
  4930  001CAC  322C               	rrcf	___ftmul@f1+1,f,c
  4931  001CAE  322B               	rrcf	___ftmul@f1,f,c
  4932  001CB0  90D8               	bcf	status,0,c
  4933  001CB2  362E               	rlcf	___ftmul@f2,f,c
  4934  001CB4  362F               	rlcf	___ftmul@f2+1,f,c
  4935  001CB6  3630               	rlcf	___ftmul@f2+2,f,c
  4936  001CB8  2E38               	decfsz	___ftmul@cntr,f,c
  4937  001CBA  D7EE               	goto	l2613
  4938  001CBC  0E09               	movlw	9
  4939  001CBE  6E38               	movwf	___ftmul@cntr,c
  4940  001CC0                     l2623:
  4941  001CC0  A02B               	btfss	___ftmul@f1,0,c
  4942  001CC2  D006               	goto	l2627
  4943  001CC4  502E               	movf	___ftmul@f2,w,c
  4944  001CC6  2635               	addwf	___ftmul@f3_as_product,f,c
  4945  001CC8  502F               	movf	___ftmul@f2+1,w,c
  4946  001CCA  2236               	addwfc	___ftmul@f3_as_product+1,f,c
  4947  001CCC  5030               	movf	___ftmul@f2+2,w,c
  4948  001CCE  2237               	addwfc	___ftmul@f3_as_product+2,f,c
  4949  001CD0                     l2627:
  4950  001CD0  90D8               	bcf	status,0,c
  4951  001CD2  322D               	rrcf	___ftmul@f1+2,f,c
  4952  001CD4  322C               	rrcf	___ftmul@f1+1,f,c
  4953  001CD6  322B               	rrcf	___ftmul@f1,f,c
  4954  001CD8  90D8               	bcf	status,0,c
  4955  001CDA  3237               	rrcf	___ftmul@f3_as_product+2,f,c
  4956  001CDC  3236               	rrcf	___ftmul@f3_as_product+1,f,c
  4957  001CDE  3235               	rrcf	___ftmul@f3_as_product,f,c
  4958  001CE0  2E38               	decfsz	___ftmul@cntr,f,c
  4959  001CE2  D7EE               	goto	l2623
  4960  001CE4  C035  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4961  001CE8  C036  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4962  001CEC  C037  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4963  001CF0  C034  F004         	movff	___ftmul@exp,___ftpack@exp
  4964  001CF4  C039  F005         	movff	___ftmul@sign,___ftpack@sign
  4965  001CF8  ECF8  F00E         	call	___ftpack	;wreg free
  4966  001CFC  C001  F02B         	movff	?___ftpack,?___ftmul
  4967  001D00  C002  F02C         	movff	?___ftpack+1,?___ftmul+1
  4968  001D04  C003  F02D         	movff	?___ftpack+2,?___ftmul+2
  4969  001D08  0012               	return	
  4970  001D0A                     __end_of___ftmul:
  4971                           	opt stack 0
  4972                           tblptru	equ	0xFF8
  4973                           tblptrh	equ	0xFF7
  4974                           tblptrl	equ	0xFF6
  4975                           tablat	equ	0xFF5
  4976                           prodl	equ	0xFF3
  4977                           indf2	equ	0xFDF
  4978                           postinc2	equ	0xFDE
  4979                           postdec2	equ	0xFDD
  4980                           fsr2h	equ	0xFDA
  4981                           fsr2l	equ	0xFD9
  4982                           status	equ	0xFD8
  4983                           
  4984 ;; *************** function ___ftge *****************
  4985 ;; Defined at:
  4986 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  4987 ;; Parameters:    Size  Location     Type
  4988 ;;  ff1             3    0[COMRAM] float 
  4989 ;;  ff2             3    3[COMRAM] float 
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;		None
  4992 ;; Return value:  Size  Location     Type
  4993 ;;		None               void
  4994 ;; Registers used:
  4995 ;;		wreg, status,2, status,0
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5001 ;;      Params:         6       0       0       0       0       0       0       0       0
  5002 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5003 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5004 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5005 ;;Total ram usage:        9 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; This function calls:
  5008 ;;		Nothing
  5009 ;; This function is called by:
  5010 ;;		_lcd_printf
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text15
  5015  001FDC                     __ptext15:
  5016                           	opt stack 0
  5017  001FDC                     ___ftge:
  5018                           	opt stack 29
  5019                           
  5020                           ;incstack = 0
  5021  001FDC  AE03               	btfss	___ftge@ff1+2,7,c
  5022  001FDE  D016               	goto	l2639
  5023  001FE0  C001  F007         	movff	___ftge@ff1,??___ftge
  5024  001FE4  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5025  001FE8  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5026  001FEC  1E07               	comf	??___ftge,f,c
  5027  001FEE  1E08               	comf	??___ftge+1,f,c
  5028  001FF0  1E09               	comf	??___ftge+2,f,c
  5029  001FF2  2A07               	incf	??___ftge,f,c
  5030  001FF4  0E00               	movlw	0
  5031  001FF6  2208               	addwfc	??___ftge+1,f,c
  5032  001FF8  2209               	addwfc	??___ftge+2,f,c
  5033  001FFA  0E00               	movlw	0
  5034  001FFC  2407               	addwf	??___ftge,w,c
  5035  001FFE  6E01               	movwf	___ftge@ff1,c
  5036  002000  0E00               	movlw	0
  5037  002002  2008               	addwfc	??___ftge+1,w,c
  5038  002004  6E02               	movwf	___ftge@ff1+1,c
  5039  002006  0E80               	movlw	128
  5040  002008  2009               	addwfc	??___ftge+2,w,c
  5041  00200A  6E03               	movwf	___ftge@ff1+2,c
  5042  00200C                     l2639:
  5043  00200C  AE06               	btfss	___ftge@ff2+2,7,c
  5044  00200E  D016               	goto	l2643
  5045  002010  C004  F007         	movff	___ftge@ff2,??___ftge
  5046  002014  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5047  002018  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5048  00201C  1E07               	comf	??___ftge,f,c
  5049  00201E  1E08               	comf	??___ftge+1,f,c
  5050  002020  1E09               	comf	??___ftge+2,f,c
  5051  002022  2A07               	incf	??___ftge,f,c
  5052  002024  0E00               	movlw	0
  5053  002026  2208               	addwfc	??___ftge+1,f,c
  5054  002028  2209               	addwfc	??___ftge+2,f,c
  5055  00202A  0E00               	movlw	0
  5056  00202C  2407               	addwf	??___ftge,w,c
  5057  00202E  6E04               	movwf	___ftge@ff2,c
  5058  002030  0E00               	movlw	0
  5059  002032  2008               	addwfc	??___ftge+1,w,c
  5060  002034  6E05               	movwf	___ftge@ff2+1,c
  5061  002036  0E80               	movlw	128
  5062  002038  2009               	addwfc	??___ftge+2,w,c
  5063  00203A  6E06               	movwf	___ftge@ff2+2,c
  5064  00203C                     l2643:
  5065  00203C  0E00               	movlw	0
  5066  00203E  1A01               	xorwf	___ftge@ff1,f,c
  5067  002040  0E00               	movlw	0
  5068  002042  1A02               	xorwf	___ftge@ff1+1,f,c
  5069  002044  0E80               	movlw	128
  5070  002046  1A03               	xorwf	___ftge@ff1+2,f,c
  5071  002048  0E00               	movlw	0
  5072  00204A  1A04               	xorwf	___ftge@ff2,f,c
  5073  00204C  0E00               	movlw	0
  5074  00204E  1A05               	xorwf	___ftge@ff2+1,f,c
  5075  002050  0E80               	movlw	128
  5076  002052  1A06               	xorwf	___ftge@ff2+2,f,c
  5077  002054  5004               	movf	___ftge@ff2,w,c
  5078  002056  5C01               	subwf	___ftge@ff1,w,c
  5079  002058  5005               	movf	___ftge@ff2+1,w,c
  5080  00205A  5802               	subwfb	___ftge@ff1+1,w,c
  5081  00205C  5006               	movf	___ftge@ff2+2,w,c
  5082  00205E  5803               	subwfb	___ftge@ff1+2,w,c
  5083  002060  B0D8               	btfsc	status,0,c
  5084  002062  D002               	goto	l2649
  5085  002064  90D8               	bcf	status,0,c
  5086  002066  0012               	return	
  5087  002068                     l2649:
  5088  002068  80D8               	bsf	status,0,c
  5089  00206A  0012               	return	
  5090  00206C                     __end_of___ftge:
  5091                           	opt stack 0
  5092                           tblptru	equ	0xFF8
  5093                           tblptrh	equ	0xFF7
  5094                           tblptrl	equ	0xFF6
  5095                           tablat	equ	0xFF5
  5096                           prodl	equ	0xFF3
  5097                           indf2	equ	0xFDF
  5098                           postinc2	equ	0xFDE
  5099                           postdec2	equ	0xFDD
  5100                           fsr2h	equ	0xFDA
  5101                           fsr2l	equ	0xFD9
  5102                           status	equ	0xFD8
  5103                           
  5104 ;; *************** function ___ftdiv *****************
  5105 ;; Defined at:
  5106 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;  f1              3   27[COMRAM] float 
  5109 ;;  f2              3   30[COMRAM] float 
  5110 ;; Auto vars:     Size  Location     Type
  5111 ;;  f3              3   37[COMRAM] float 
  5112 ;;  sign            1   41[COMRAM] unsigned char 
  5113 ;;  exp             1   40[COMRAM] unsigned char 
  5114 ;;  cntr            1   36[COMRAM] unsigned char 
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  3   27[COMRAM] float 
  5117 ;; Registers used:
  5118 ;;		wreg, status,2, status,0, cstack
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5124 ;;      Params:         6       0       0       0       0       0       0       0       0
  5125 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5126 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5127 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5128 ;;Total ram usage:       15 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    1
  5131 ;; This function calls:
  5132 ;;		___ftpack
  5133 ;; This function is called by:
  5134 ;;		_main
  5135 ;;		_lcd_printf
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           	psect	text16
  5140  001D0A                     __ptext16:
  5141                           	opt stack 0
  5142  001D0A                     ___ftdiv:
  5143                           	opt stack 28
  5144                           
  5145                           ;incstack = 0
  5146  001D0A  C01E  F022         	movff	___ftdiv@f1+2,??___ftdiv
  5147  001D0E  6A23               	clrf	(??___ftdiv+1)& (0+255),c
  5148  001D10  6A24               	clrf	(??___ftdiv+2)& (0+255),c
  5149  001D12  341D               	rlcf	___ftdiv@f1+1,w,c
  5150  001D14  3622               	rlcf	??___ftdiv& (0+255),f,c
  5151  001D16  E301               	bnc	u2311
  5152  001D18  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
  5153  001D1A                     u2311:
  5154  001D1A  5022               	movf	??___ftdiv,w,c
  5155  001D1C  6E29               	movwf	___ftdiv@exp,c
  5156  001D1E  5029               	movf	___ftdiv@exp,w,c
  5157  001D20  A4D8               	btfss	status,2,c
  5158  001D22  D007               	goto	l2547
  5159  001D24  0E00               	movlw	0
  5160  001D26  6E1C               	movwf	?___ftdiv,c
  5161  001D28  0E00               	movlw	0
  5162  001D2A  6E1D               	movwf	?___ftdiv+1,c
  5163  001D2C  0E00               	movlw	0
  5164  001D2E  6E1E               	movwf	?___ftdiv+2,c
  5165  001D30  0012               	return	
  5166  001D32                     l2547:
  5167  001D32  C021  F022         	movff	___ftdiv@f2+2,??___ftdiv
  5168  001D36  6A23               	clrf	(??___ftdiv+1)& (0+255),c
  5169  001D38  6A24               	clrf	(??___ftdiv+2)& (0+255),c
  5170  001D3A  3420               	rlcf	___ftdiv@f2+1,w,c
  5171  001D3C  3622               	rlcf	??___ftdiv& (0+255),f,c
  5172  001D3E  E301               	bnc	u2331
  5173  001D40  8023               	bsf	(??___ftdiv+1)& (0+255),0,c
  5174  001D42                     u2331:
  5175  001D42  5022               	movf	??___ftdiv,w,c
  5176  001D44  6E2A               	movwf	___ftdiv@sign,c
  5177  001D46  502A               	movf	___ftdiv@sign,w,c
  5178  001D48  A4D8               	btfss	status,2,c
  5179  001D4A  D007               	goto	l2553
  5180  001D4C  0E00               	movlw	0
  5181  001D4E  6E1C               	movwf	?___ftdiv,c
  5182  001D50  0E00               	movlw	0
  5183  001D52  6E1D               	movwf	?___ftdiv+1,c
  5184  001D54  0E00               	movlw	0
  5185  001D56  6E1E               	movwf	?___ftdiv+2,c
  5186  001D58  0012               	return	
  5187  001D5A                     l2553:
  5188  001D5A  0E00               	movlw	0
  5189  001D5C  6E26               	movwf	___ftdiv@f3,c
  5190  001D5E  0E00               	movlw	0
  5191  001D60  6E27               	movwf	___ftdiv@f3+1,c
  5192  001D62  0E00               	movlw	0
  5193  001D64  6E28               	movwf	___ftdiv@f3+2,c
  5194  001D66  502A               	movf	___ftdiv@sign,w,c
  5195  001D68  0F89               	addlw	137
  5196  001D6A  5E29               	subwf	___ftdiv@exp,f,c
  5197  001D6C  C01E  F02A         	movff	___ftdiv@f1+2,___ftdiv@sign
  5198  001D70  5021               	movf	___ftdiv@f2+2,w,c
  5199  001D72  1A2A               	xorwf	___ftdiv@sign,f,c
  5200  001D74  0E80               	movlw	128
  5201  001D76  162A               	andwf	___ftdiv@sign,f,c
  5202  001D78  8E1D               	bsf	___ftdiv@f1+1,7,c
  5203  001D7A  0EFF               	movlw	255
  5204  001D7C  161C               	andwf	___ftdiv@f1,f,c
  5205  001D7E  0EFF               	movlw	255
  5206  001D80  161D               	andwf	___ftdiv@f1+1,f,c
  5207  001D82  0E00               	movlw	0
  5208  001D84  161E               	andwf	___ftdiv@f1+2,f,c
  5209  001D86  8E20               	bsf	___ftdiv@f2+1,7,c
  5210  001D88  0EFF               	movlw	255
  5211  001D8A  161F               	andwf	___ftdiv@f2,f,c
  5212  001D8C  0EFF               	movlw	255
  5213  001D8E  1620               	andwf	___ftdiv@f2+1,f,c
  5214  001D90  0E00               	movlw	0
  5215  001D92  1621               	andwf	___ftdiv@f2+2,f,c
  5216  001D94  0E18               	movlw	24
  5217  001D96  6E25               	movwf	___ftdiv@cntr,c
  5218  001D98                     l2573:
  5219  001D98  90D8               	bcf	status,0,c
  5220  001D9A  3626               	rlcf	___ftdiv@f3,f,c
  5221  001D9C  3627               	rlcf	___ftdiv@f3+1,f,c
  5222  001D9E  3628               	rlcf	___ftdiv@f3+2,f,c
  5223  001DA0  501F               	movf	___ftdiv@f2,w,c
  5224  001DA2  5C1C               	subwf	___ftdiv@f1,w,c
  5225  001DA4  5020               	movf	___ftdiv@f2+1,w,c
  5226  001DA6  581D               	subwfb	___ftdiv@f1+1,w,c
  5227  001DA8  5021               	movf	___ftdiv@f2+2,w,c
  5228  001DAA  581E               	subwfb	___ftdiv@f1+2,w,c
  5229  001DAC  A0D8               	btfss	status,0,c
  5230  001DAE  D007               	goto	l764
  5231  001DB0  501F               	movf	___ftdiv@f2,w,c
  5232  001DB2  5E1C               	subwf	___ftdiv@f1,f,c
  5233  001DB4  5020               	movf	___ftdiv@f2+1,w,c
  5234  001DB6  5A1D               	subwfb	___ftdiv@f1+1,f,c
  5235  001DB8  5021               	movf	___ftdiv@f2+2,w,c
  5236  001DBA  5A1E               	subwfb	___ftdiv@f1+2,f,c
  5237  001DBC  8026               	bsf	___ftdiv@f3,0,c
  5238  001DBE                     l764:
  5239  001DBE  90D8               	bcf	status,0,c
  5240  001DC0  361C               	rlcf	___ftdiv@f1,f,c
  5241  001DC2  361D               	rlcf	___ftdiv@f1+1,f,c
  5242  001DC4  361E               	rlcf	___ftdiv@f1+2,f,c
  5243  001DC6  2E25               	decfsz	___ftdiv@cntr,f,c
  5244  001DC8  D7E7               	goto	l2573
  5245  001DCA  C026  F001         	movff	___ftdiv@f3,___ftpack@arg
  5246  001DCE  C027  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5247  001DD2  C028  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5248  001DD6  C029  F004         	movff	___ftdiv@exp,___ftpack@exp
  5249  001DDA  C02A  F005         	movff	___ftdiv@sign,___ftpack@sign
  5250  001DDE  ECF8  F00E         	call	___ftpack	;wreg free
  5251  001DE2  C001  F01C         	movff	?___ftpack,?___ftdiv
  5252  001DE6  C002  F01D         	movff	?___ftpack+1,?___ftdiv+1
  5253  001DEA  C003  F01E         	movff	?___ftpack+2,?___ftdiv+2
  5254  001DEE  0012               	return	
  5255  001DF0                     __end_of___ftdiv:
  5256                           	opt stack 0
  5257                           tblptru	equ	0xFF8
  5258                           tblptrh	equ	0xFF7
  5259                           tblptrl	equ	0xFF6
  5260                           tablat	equ	0xFF5
  5261                           prodl	equ	0xFF3
  5262                           indf2	equ	0xFDF
  5263                           postinc2	equ	0xFDE
  5264                           postdec2	equ	0xFDD
  5265                           fsr2h	equ	0xFDA
  5266                           fsr2l	equ	0xFD9
  5267                           status	equ	0xFD8
  5268                           
  5269 ;; *************** function ___ftadd *****************
  5270 ;; Defined at:
  5271 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5272 ;; Parameters:    Size  Location     Type
  5273 ;;  f1              3   15[COMRAM] float 
  5274 ;;  f2              3   18[COMRAM] float 
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;  exp1            1   26[COMRAM] unsigned char 
  5277 ;;  exp2            1   25[COMRAM] unsigned char 
  5278 ;;  sign            1   24[COMRAM] unsigned char 
  5279 ;; Return value:  Size  Location     Type
  5280 ;;                  3   15[COMRAM] float 
  5281 ;; Registers used:
  5282 ;;		wreg, status,2, status,0, cstack
  5283 ;; Tracked objects:
  5284 ;;		On entry : 0/0
  5285 ;;		On exit  : 0/0
  5286 ;;		Unchanged: 0/0
  5287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5288 ;;      Params:         6       0       0       0       0       0       0       0       0
  5289 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5290 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5291 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5292 ;;Total ram usage:       12 bytes
  5293 ;; Hardware stack levels used:    1
  5294 ;; Hardware stack levels required when called:    1
  5295 ;; This function calls:
  5296 ;;		___ftpack
  5297 ;; This function is called by:
  5298 ;;		_main
  5299 ;;		_lcd_printf
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text17
  5304  001976                     __ptext17:
  5305                           	opt stack 0
  5306  001976                     ___ftadd:
  5307                           	opt stack 28
  5308                           
  5309                           ;incstack = 0
  5310  001976  C012  F016         	movff	___ftadd@f1+2,??___ftadd
  5311  00197A  6A17               	clrf	(??___ftadd+1)& (0+255),c
  5312  00197C  6A18               	clrf	(??___ftadd+2)& (0+255),c
  5313  00197E  3411               	rlcf	___ftadd@f1+1,w,c
  5314  001980  3616               	rlcf	??___ftadd& (0+255),f,c
  5315  001982  E301               	bnc	u2101
  5316  001984  8017               	bsf	(??___ftadd+1)& (0+255),0,c
  5317  001986                     u2101:
  5318  001986  5016               	movf	??___ftadd,w,c
  5319  001988  6E1B               	movwf	___ftadd@exp1,c
  5320  00198A  C015  F016         	movff	___ftadd@f2+2,??___ftadd
  5321  00198E  6A17               	clrf	(??___ftadd+1)& (0+255),c
  5322  001990  6A18               	clrf	(??___ftadd+2)& (0+255),c
  5323  001992  3414               	rlcf	___ftadd@f2+1,w,c
  5324  001994  3616               	rlcf	??___ftadd& (0+255),f,c
  5325  001996  E301               	bnc	u2111
  5326  001998  8017               	bsf	(??___ftadd+1)& (0+255),0,c
  5327  00199A                     u2111:
  5328  00199A  5016               	movf	??___ftadd,w,c
  5329  00199C  6E1A               	movwf	___ftadd@exp2,c
  5330  00199E  501B               	movf	___ftadd@exp1,w,c
  5331  0019A0  B4D8               	btfsc	status,2,c
  5332  0019A2  D00B               	goto	l729
  5333  0019A4  501A               	movf	___ftadd@exp2,w,c
  5334  0019A6  5C1B               	subwf	___ftadd@exp1,w,c
  5335  0019A8  B0D8               	btfsc	status,0,c
  5336  0019AA  D00E               	goto	l2479
  5337  0019AC  501B               	movf	___ftadd@exp1,w,c
  5338  0019AE  0800               	sublw	0
  5339  0019B0  241A               	addwf	___ftadd@exp2,w,c
  5340  0019B2  6E16               	movwf	??___ftadd& (0+255),c
  5341  0019B4  0E18               	movlw	24
  5342  0019B6  6416               	cpfsgt	??___ftadd,c
  5343  0019B8  D007               	goto	l2479
  5344  0019BA                     l729:
  5345  0019BA  C013  F010         	movff	___ftadd@f2,?___ftadd
  5346  0019BE  C014  F011         	movff	___ftadd@f2+1,?___ftadd+1
  5347  0019C2  C015  F012         	movff	___ftadd@f2+2,?___ftadd+2
  5348  0019C6  0012               	return	
  5349  0019C8                     l2479:
  5350  0019C8  501A               	movf	___ftadd@exp2,w,c
  5351  0019CA  B4D8               	btfsc	status,2,c
  5352  0019CC  D00B               	goto	l733
  5353  0019CE  501B               	movf	___ftadd@exp1,w,c
  5354  0019D0  5C1A               	subwf	___ftadd@exp2,w,c
  5355  0019D2  B0D8               	btfsc	status,0,c
  5356  0019D4  D00E               	goto	l2485
  5357  0019D6  501A               	movf	___ftadd@exp2,w,c
  5358  0019D8  0800               	sublw	0
  5359  0019DA  241B               	addwf	___ftadd@exp1,w,c
  5360  0019DC  6E16               	movwf	??___ftadd& (0+255),c
  5361  0019DE  0E18               	movlw	24
  5362  0019E0  6416               	cpfsgt	??___ftadd,c
  5363  0019E2  D007               	goto	l2485
  5364  0019E4                     l733:
  5365  0019E4  C010  F010         	movff	___ftadd@f1,?___ftadd
  5366  0019E8  C011  F011         	movff	___ftadd@f1+1,?___ftadd+1
  5367  0019EC  C012  F012         	movff	___ftadd@f1+2,?___ftadd+2
  5368  0019F0  0012               	return	
  5369  0019F2                     l2485:
  5370  0019F2  0E06               	movlw	6
  5371  0019F4  6E19               	movwf	___ftadd@sign,c
  5372  0019F6  BE12               	btfsc	___ftadd@f1+2,7,c
  5373  0019F8  8E19               	bsf	___ftadd@sign,7,c
  5374  0019FA  BE15               	btfsc	___ftadd@f2+2,7,c
  5375  0019FC  8C19               	bsf	___ftadd@sign,6,c
  5376  0019FE  8E11               	bsf	___ftadd@f1+1,7,c
  5377  001A00  0EFF               	movlw	255
  5378  001A02  1610               	andwf	___ftadd@f1,f,c
  5379  001A04  0EFF               	movlw	255
  5380  001A06  1611               	andwf	___ftadd@f1+1,f,c
  5381  001A08  0E00               	movlw	0
  5382  001A0A  1612               	andwf	___ftadd@f1+2,f,c
  5383  001A0C  8E14               	bsf	___ftadd@f2+1,7,c
  5384  001A0E  0EFF               	movlw	255
  5385  001A10  1613               	andwf	___ftadd@f2,f,c
  5386  001A12  0EFF               	movlw	255
  5387  001A14  1614               	andwf	___ftadd@f2+1,f,c
  5388  001A16  0E00               	movlw	0
  5389  001A18  1615               	andwf	___ftadd@f2+2,f,c
  5390  001A1A  501A               	movf	___ftadd@exp2,w,c
  5391  001A1C  5C1B               	subwf	___ftadd@exp1,w,c
  5392  001A1E  B0D8               	btfsc	status,0,c
  5393  001A20  D01B               	goto	l2511
  5394  001A22                     l2501:
  5395  001A22  90D8               	bcf	status,0,c
  5396  001A24  3613               	rlcf	___ftadd@f2,f,c
  5397  001A26  3614               	rlcf	___ftadd@f2+1,f,c
  5398  001A28  3615               	rlcf	___ftadd@f2+2,f,c
  5399  001A2A  061A               	decf	___ftadd@exp2,f,c
  5400  001A2C  501B               	movf	___ftadd@exp1,w,c
  5401  001A2E  181A               	xorwf	___ftadd@exp2,w,c
  5402  001A30  B4D8               	btfsc	status,2,c
  5403  001A32  D00D               	goto	l2509
  5404  001A34  0619               	decf	___ftadd@sign,f,c
  5405  001A36  C019  F016         	movff	___ftadd@sign,??___ftadd
  5406  001A3A  0E07               	movlw	7
  5407  001A3C  1616               	andwf	??___ftadd,f,c
  5408  001A3E  B4D8               	btfsc	status,2,c
  5409  001A40  D006               	goto	l2509
  5410  001A42  D7EF               	goto	l2501
  5411  001A44                     l2507:
  5412  001A44  90D8               	bcf	status,0,c
  5413  001A46  3212               	rrcf	___ftadd@f1+2,f,c
  5414  001A48  3211               	rrcf	___ftadd@f1+1,f,c
  5415  001A4A  3210               	rrcf	___ftadd@f1,f,c
  5416  001A4C  2A1B               	incf	___ftadd@exp1,f,c
  5417  001A4E                     l2509:
  5418  001A4E  501A               	movf	___ftadd@exp2,w,c
  5419  001A50  181B               	xorwf	___ftadd@exp1,w,c
  5420  001A52  B4D8               	btfsc	status,2,c
  5421  001A54  D01F               	goto	l744
  5422  001A56  D7F6               	goto	l2507
  5423  001A58                     l2511:
  5424  001A58  501B               	movf	___ftadd@exp1,w,c
  5425  001A5A  5C1A               	subwf	___ftadd@exp2,w,c
  5426  001A5C  B0D8               	btfsc	status,0,c
  5427  001A5E  D01A               	goto	l744
  5428  001A60                     l2513:
  5429  001A60  90D8               	bcf	status,0,c
  5430  001A62  3610               	rlcf	___ftadd@f1,f,c
  5431  001A64  3611               	rlcf	___ftadd@f1+1,f,c
  5432  001A66  3612               	rlcf	___ftadd@f1+2,f,c
  5433  001A68  061B               	decf	___ftadd@exp1,f,c
  5434  001A6A  501B               	movf	___ftadd@exp1,w,c
  5435  001A6C  181A               	xorwf	___ftadd@exp2,w,c
  5436  001A6E  B4D8               	btfsc	status,2,c
  5437  001A70  D00D               	goto	l2521
  5438  001A72  0619               	decf	___ftadd@sign,f,c
  5439  001A74  C019  F016         	movff	___ftadd@sign,??___ftadd
  5440  001A78  0E07               	movlw	7
  5441  001A7A  1616               	andwf	??___ftadd,f,c
  5442  001A7C  B4D8               	btfsc	status,2,c
  5443  001A7E  D006               	goto	l2521
  5444  001A80  D7EF               	goto	l2513
  5445  001A82                     l2519:
  5446  001A82  90D8               	bcf	status,0,c
  5447  001A84  3215               	rrcf	___ftadd@f2+2,f,c
  5448  001A86  3214               	rrcf	___ftadd@f2+1,f,c
  5449  001A88  3213               	rrcf	___ftadd@f2,f,c
  5450  001A8A  2A1A               	incf	___ftadd@exp2,f,c
  5451  001A8C                     l2521:
  5452  001A8C  501A               	movf	___ftadd@exp2,w,c
  5453  001A8E  181B               	xorwf	___ftadd@exp1,w,c
  5454  001A90  A4D8               	btfss	status,2,c
  5455  001A92  D7F7               	goto	l2519
  5456  001A94                     l744:
  5457  001A94  AE19               	btfss	___ftadd@sign,7,c
  5458  001A96  D00C               	goto	l753
  5459  001A98  0EFF               	movlw	255
  5460  001A9A  1A10               	xorwf	___ftadd@f1,f,c
  5461  001A9C  0EFF               	movlw	255
  5462  001A9E  1A11               	xorwf	___ftadd@f1+1,f,c
  5463  001AA0  0EFF               	movlw	255
  5464  001AA2  1A12               	xorwf	___ftadd@f1+2,f,c
  5465  001AA4  0E01               	movlw	1
  5466  001AA6  2610               	addwf	___ftadd@f1,f,c
  5467  001AA8  0E00               	movlw	0
  5468  001AAA  2211               	addwfc	___ftadd@f1+1,f,c
  5469  001AAC  0E00               	movlw	0
  5470  001AAE  2212               	addwfc	___ftadd@f1+2,f,c
  5471  001AB0                     l753:
  5472  001AB0  AC19               	btfss	___ftadd@sign,6,c
  5473  001AB2  D00C               	goto	l2527
  5474  001AB4  0EFF               	movlw	255
  5475  001AB6  1A13               	xorwf	___ftadd@f2,f,c
  5476  001AB8  0EFF               	movlw	255
  5477  001ABA  1A14               	xorwf	___ftadd@f2+1,f,c
  5478  001ABC  0EFF               	movlw	255
  5479  001ABE  1A15               	xorwf	___ftadd@f2+2,f,c
  5480  001AC0  0E01               	movlw	1
  5481  001AC2  2613               	addwf	___ftadd@f2,f,c
  5482  001AC4  0E00               	movlw	0
  5483  001AC6  2214               	addwfc	___ftadd@f2+1,f,c
  5484  001AC8  0E00               	movlw	0
  5485  001ACA  2215               	addwfc	___ftadd@f2+2,f,c
  5486  001ACC                     l2527:
  5487  001ACC  0E00               	movlw	0
  5488  001ACE  6E19               	movwf	___ftadd@sign,c
  5489  001AD0  5010               	movf	___ftadd@f1,w,c
  5490  001AD2  2613               	addwf	___ftadd@f2,f,c
  5491  001AD4  5011               	movf	___ftadd@f1+1,w,c
  5492  001AD6  2214               	addwfc	___ftadd@f2+1,f,c
  5493  001AD8  5012               	movf	___ftadd@f1+2,w,c
  5494  001ADA  2215               	addwfc	___ftadd@f2+2,f,c
  5495  001ADC  AE15               	btfss	___ftadd@f2+2,7,c
  5496  001ADE  D00E               	goto	l2537
  5497  001AE0  0EFF               	movlw	255
  5498  001AE2  1A13               	xorwf	___ftadd@f2,f,c
  5499  001AE4  0EFF               	movlw	255
  5500  001AE6  1A14               	xorwf	___ftadd@f2+1,f,c
  5501  001AE8  0EFF               	movlw	255
  5502  001AEA  1A15               	xorwf	___ftadd@f2+2,f,c
  5503  001AEC  0E01               	movlw	1
  5504  001AEE  2613               	addwf	___ftadd@f2,f,c
  5505  001AF0  0E00               	movlw	0
  5506  001AF2  2214               	addwfc	___ftadd@f2+1,f,c
  5507  001AF4  0E00               	movlw	0
  5508  001AF6  2215               	addwfc	___ftadd@f2+2,f,c
  5509  001AF8  0E01               	movlw	1
  5510  001AFA  6E19               	movwf	___ftadd@sign,c
  5511  001AFC                     l2537:
  5512  001AFC  C013  F001         	movff	___ftadd@f2,___ftpack@arg
  5513  001B00  C014  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5514  001B04  C015  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5515  001B08  C01B  F004         	movff	___ftadd@exp1,___ftpack@exp
  5516  001B0C  C019  F005         	movff	___ftadd@sign,___ftpack@sign
  5517  001B10  ECF8  F00E         	call	___ftpack	;wreg free
  5518  001B14  C001  F010         	movff	?___ftpack,?___ftadd
  5519  001B18  C002  F011         	movff	?___ftpack+1,?___ftadd+1
  5520  001B1C  C003  F012         	movff	?___ftpack+2,?___ftadd+2
  5521  001B20  0012               	return	
  5522  001B22                     __end_of___ftadd:
  5523                           	opt stack 0
  5524                           tblptru	equ	0xFF8
  5525                           tblptrh	equ	0xFF7
  5526                           tblptrl	equ	0xFF6
  5527                           tablat	equ	0xFF5
  5528                           prodl	equ	0xFF3
  5529                           indf2	equ	0xFDF
  5530                           postinc2	equ	0xFDE
  5531                           postdec2	equ	0xFDD
  5532                           fsr2h	equ	0xFDA
  5533                           fsr2l	equ	0xFD9
  5534                           status	equ	0xFD8
  5535                           
  5536 ;; *************** function _lcd_init *****************
  5537 ;; Defined at:
  5538 ;;		line 101 in file "iut_lcd.c"
  5539 ;; Parameters:    Size  Location     Type
  5540 ;;		None
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;		None
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  1    wreg      void 
  5545 ;; Registers used:
  5546 ;;		wreg, status,2, status,0, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5552 ;;      Params:         0       0       0       0       0       0       0       0       0
  5553 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5554 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5555 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5556 ;;Total ram usage:        1 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    4
  5559 ;; This function calls:
  5560 ;;		_lcd_clear
  5561 ;;		_lcd_clock_e
  5562 ;;		_lcd_write_cmd_busy
  5563 ;; This function is called by:
  5564 ;;		_main
  5565 ;; This function uses a non-reentrant model
  5566 ;;
  5567                           
  5568                           	psect	text18
  5569  001F44                     __ptext18:
  5570                           	opt stack 0
  5571  001F44                     _lcd_init:
  5572                           	opt stack 26
  5573                           
  5574                           ;iut_lcd.c: 102: TRISD &= ~0x07;
  5575                           
  5576                           ;incstack = 0
  5577  001F44  0EF8               	movlw	248
  5578  001F46  1695               	andwf	3989,f,c	;volatile
  5579                           
  5580                           ;iut_lcd.c: 103: TRISD |= 0xF0;
  5581  001F48  0EF0               	movlw	240
  5582  001F4A  1295               	iorwf	3989,f,c	;volatile
  5583                           
  5584                           ;iut_lcd.c: 104: PORTD &= 0x08;
  5585  001F4C  0E08               	movlw	8
  5586  001F4E  1683               	andwf	3971,f,c	;volatile
  5587                           
  5588                           ;iut_lcd.c: 105: _delay(180000);
  5589  001F50  0EEA               	movlw	234
  5590  001F52  6E03               	movwf	??_lcd_init& (0+255),c
  5591  001F54  0EC3               	movlw	195
  5592  001F56                     u3787:
  5593  001F56  2EE8               	decfsz	wreg,f,c
  5594  001F58  D7FE               	bra	u3787
  5595  001F5A  2E03               	decfsz	??_lcd_init& (0+255),f,c
  5596  001F5C  D7FC               	bra	u3787
  5597  001F5E  F000               	nop	
  5598                           
  5599                           ;iut_lcd.c: 107: TRISD &= 0x0f;
  5600  001F60  0E0F               	movlw	15
  5601  001F62  1695               	andwf	3989,f,c	;volatile
  5602                           
  5603                           ;iut_lcd.c: 109: PORTD &= 0x0f;
  5604  001F64  0E0F               	movlw	15
  5605  001F66  1683               	andwf	3971,f,c	;volatile
  5606                           
  5607                           ;iut_lcd.c: 110: PORTD |= 0b00110000;
  5608  001F68  0E30               	movlw	48
  5609  001F6A  1283               	iorwf	3971,f,c	;volatile
  5610                           
  5611                           ;iut_lcd.c: 111: lcd_clock_e();
  5612  001F6C  ECCD  F011         	call	_lcd_clock_e	;wreg free
  5613                           
  5614                           ;iut_lcd.c: 112: _delay(60000);
  5615  001F70  0E4E               	movlw	78
  5616  001F72  6E03               	movwf	??_lcd_init& (0+255),c
  5617  001F74  0EEB               	movlw	235
  5618  001F76                     u3797:
  5619  001F76  2EE8               	decfsz	wreg,f,c
  5620  001F78  D7FE               	bra	u3797
  5621  001F7A  2E03               	decfsz	??_lcd_init& (0+255),f,c
  5622  001F7C  D7FC               	bra	u3797
  5623  001F7E  F000               	nop	
  5624                           
  5625                           ;iut_lcd.c: 114: PORTD &= 0x0f;
  5626  001F80  0E0F               	movlw	15
  5627  001F82  1683               	andwf	3971,f,c	;volatile
  5628                           
  5629                           ;iut_lcd.c: 115: PORTD |= 0b00110000;
  5630  001F84  0E30               	movlw	48
  5631  001F86  1283               	iorwf	3971,f,c	;volatile
  5632                           
  5633                           ;iut_lcd.c: 116: lcd_clock_e();
  5634  001F88  ECCD  F011         	call	_lcd_clock_e	;wreg free
  5635                           
  5636                           ;iut_lcd.c: 117: _delay(1200);
  5637  001F8C  0EF0               	movlw	240
  5638  001F8E                     u3807:
  5639  001F8E  D000               	nop2	
  5640  001F90  2EE8               	decfsz	wreg,f,c
  5641  001F92  D7FD               	bra	u3807
  5642                           
  5643                           ;iut_lcd.c: 119: PORTD &= 0x0f;
  5644  001F94  0E0F               	movlw	15
  5645  001F96  1683               	andwf	3971,f,c	;volatile
  5646                           
  5647                           ;iut_lcd.c: 120: PORTD |= 0b00110000;
  5648  001F98  0E30               	movlw	48
  5649  001F9A  1283               	iorwf	3971,f,c	;volatile
  5650                           
  5651                           ;iut_lcd.c: 121: lcd_clock_e();
  5652  001F9C  ECCD  F011         	call	_lcd_clock_e	;wreg free
  5653                           
  5654                           ;iut_lcd.c: 122: _delay(1200);
  5655  001FA0  0EF0               	movlw	240
  5656  001FA2                     u3817:
  5657  001FA2  D000               	nop2	
  5658  001FA4  2EE8               	decfsz	wreg,f,c
  5659  001FA6  D7FD               	bra	u3817
  5660                           
  5661                           ;iut_lcd.c: 124: PORTD &= 0x0f;
  5662  001FA8  0E0F               	movlw	15
  5663  001FAA  1683               	andwf	3971,f,c	;volatile
  5664                           
  5665                           ;iut_lcd.c: 125: PORTD |= 0b00100000;
  5666  001FAC  8A83               	bsf	3971,5,c	;volatile
  5667                           
  5668                           ;iut_lcd.c: 126: lcd_clock_e();
  5669  001FAE  ECCD  F011         	call	_lcd_clock_e	;wreg free
  5670                           
  5671                           ;iut_lcd.c: 127: _delay(1200);
  5672  001FB2  0EF0               	movlw	240
  5673  001FB4                     u3827:
  5674  001FB4  D000               	nop2	
  5675  001FB6  2EE8               	decfsz	wreg,f,c
  5676  001FB8  D7FD               	bra	u3827
  5677                           
  5678                           ;iut_lcd.c: 129: TRISD |= 0xf0;
  5679  001FBA  0EF0               	movlw	240
  5680  001FBC  1295               	iorwf	3989,f,c	;volatile
  5681                           
  5682                           ;iut_lcd.c: 131: lcd_write_cmd_busy(0x28);
  5683  001FBE  0E28               	movlw	40
  5684  001FC0  ECB8  F011         	call	_lcd_write_cmd_busy
  5685                           
  5686                           ;iut_lcd.c: 132: lcd_write_cmd_busy(0x08);
  5687  001FC4  0E08               	movlw	8
  5688  001FC6  ECB8  F011         	call	_lcd_write_cmd_busy
  5689                           
  5690                           ;iut_lcd.c: 133: lcd_clear();
  5691  001FCA  ECDB  F011         	call	_lcd_clear	;wreg free
  5692                           
  5693                           ;iut_lcd.c: 134: lcd_write_cmd_busy(0x06);
  5694  001FCE  0E06               	movlw	6
  5695  001FD0  ECB8  F011         	call	_lcd_write_cmd_busy
  5696                           
  5697                           ;iut_lcd.c: 135: lcd_write_cmd_busy(0x0C);
  5698  001FD4  0E0C               	movlw	12
  5699  001FD6  ECB8  F011         	call	_lcd_write_cmd_busy
  5700  001FDA  0012               	return		;funcret
  5701  001FDC                     __end_of_lcd_init:
  5702                           	opt stack 0
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           prodl	equ	0xFF3
  5708                           wreg	equ	0xFE8
  5709                           indf2	equ	0xFDF
  5710                           postinc2	equ	0xFDE
  5711                           postdec2	equ	0xFDD
  5712                           fsr2h	equ	0xFDA
  5713                           fsr2l	equ	0xFD9
  5714                           status	equ	0xFD8
  5715                           
  5716 ;; *************** function _lcd_clear *****************
  5717 ;; Defined at:
  5718 ;;		line 145 in file "iut_lcd.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;		None
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;		None
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      void 
  5725 ;; Registers used:
  5726 ;;		wreg, status,2, status,0, cstack
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5732 ;;      Params:         0       0       0       0       0       0       0       0       0
  5733 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5734 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5735 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5736 ;;Total ram usage:        0 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    3
  5739 ;; This function calls:
  5740 ;;		_lcd_write_cmd_busy
  5741 ;; This function is called by:
  5742 ;;		_lcd_init
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           	psect	text19
  5747  0023B6                     __ptext19:
  5748                           	opt stack 0
  5749  0023B6                     _lcd_clear:
  5750                           	opt stack 26
  5751                           
  5752                           ;iut_lcd.c: 146: lcd_write_cmd_busy(0x01);
  5753                           
  5754                           ;incstack = 0
  5755  0023B6  0E01               	movlw	1
  5756  0023B8  ECB8  F011         	call	_lcd_write_cmd_busy
  5757  0023BC  0012               	return		;funcret
  5758  0023BE                     __end_of_lcd_clear:
  5759                           	opt stack 0
  5760                           tblptru	equ	0xFF8
  5761                           tblptrh	equ	0xFF7
  5762                           tblptrl	equ	0xFF6
  5763                           tablat	equ	0xFF5
  5764                           prodl	equ	0xFF3
  5765                           wreg	equ	0xFE8
  5766                           indf2	equ	0xFDF
  5767                           postinc2	equ	0xFDE
  5768                           postdec2	equ	0xFDD
  5769                           fsr2h	equ	0xFDA
  5770                           fsr2l	equ	0xFD9
  5771                           status	equ	0xFD8
  5772                           
  5773 ;; *************** function _lcd_write_cmd_busy *****************
  5774 ;; Defined at:
  5775 ;;		line 764 in file "iut_lcd.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;  c               1    wreg     unsigned char 
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;  c               1    1[COMRAM] unsigned char 
  5780 ;; Return value:  Size  Location     Type
  5781 ;;                  1    wreg      void 
  5782 ;; Registers used:
  5783 ;;		wreg, status,2, status,0, cstack
  5784 ;; Tracked objects:
  5785 ;;		On entry : 0/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5789 ;;      Params:         0       0       0       0       0       0       0       0       0
  5790 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5792 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5793 ;;Total ram usage:        1 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:    2
  5796 ;; This function calls:
  5797 ;;		_lcd_busy
  5798 ;;		_lcd_write_cmd_data
  5799 ;; This function is called by:
  5800 ;;		_lcd_init
  5801 ;;		_lcd_clear
  5802 ;;		_lcd_position
  5803 ;;		_lcd_putc
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text20
  5808  002370                     __ptext20:
  5809                           	opt stack 0
  5810  002370                     _lcd_write_cmd_busy:
  5811                           	opt stack 26
  5812                           
  5813                           ;incstack = 0
  5814                           ;lcd_write_cmd_busy@c stored from wreg
  5815  002370  6E02               	movwf	lcd_write_cmd_busy@c,c
  5816  002372                     l2389:
  5817  002372  ECD0  F010         	call	_lcd_busy	;wreg free
  5818  002376  0900               	iorlw	0
  5819  002378  A4D8               	btfss	status,2,c
  5820  00237A  D7FB               	goto	l2389
  5821                           
  5822                           ;iut_lcd.c: 766: PORTDbits.RD1 = 0;
  5823  00237C  9283               	bcf	3971,1,c	;volatile
  5824                           
  5825                           ;iut_lcd.c: 767: lcd_write_cmd_data(c);
  5826  00237E  5002               	movf	lcd_write_cmd_busy@c,w,c
  5827  002380  EC25  F011         	call	_lcd_write_cmd_data
  5828  002384  0012               	return		;funcret
  5829  002386                     __end_of_lcd_write_cmd_busy:
  5830                           	opt stack 0
  5831                           tblptru	equ	0xFF8
  5832                           tblptrh	equ	0xFF7
  5833                           tblptrl	equ	0xFF6
  5834                           tablat	equ	0xFF5
  5835                           prodl	equ	0xFF3
  5836                           wreg	equ	0xFE8
  5837                           indf2	equ	0xFDF
  5838                           postinc2	equ	0xFDE
  5839                           postdec2	equ	0xFDD
  5840                           fsr2h	equ	0xFDA
  5841                           fsr2l	equ	0xFD9
  5842                           status	equ	0xFD8
  5843                           
  5844 ;; *************** function _lcd_write_cmd_data *****************
  5845 ;; Defined at:
  5846 ;;		line 746 in file "iut_lcd.c"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;  c               1    wreg     unsigned char 
  5849 ;; Auto vars:     Size  Location     Type
  5850 ;;  c               1    0[COMRAM] unsigned char 
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  1    wreg      void 
  5853 ;; Registers used:
  5854 ;;		wreg, status,2, status,0, cstack
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5860 ;;      Params:         0       0       0       0       0       0       0       0       0
  5861 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5862 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5863 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5864 ;;Total ram usage:        1 bytes
  5865 ;; Hardware stack levels used:    1
  5866 ;; Hardware stack levels required when called:    1
  5867 ;; This function calls:
  5868 ;;		_lcd_clock_e
  5869 ;; This function is called by:
  5870 ;;		_lcd_write_data_busy
  5871 ;;		_lcd_write_cmd_busy
  5872 ;; This function uses a non-reentrant model
  5873 ;;
  5874                           
  5875                           	psect	text21
  5876  00224A                     __ptext21:
  5877                           	opt stack 0
  5878  00224A                     _lcd_write_cmd_data:
  5879                           	opt stack 27
  5880                           
  5881                           ;incstack = 0
  5882                           ;lcd_write_cmd_data@c stored from wreg
  5883  00224A  6E01               	movwf	lcd_write_cmd_data@c,c
  5884                           
  5885                           ;iut_lcd.c: 747: PORTDbits.RD2 = 0;
  5886  00224C  9483               	bcf	3971,2,c	;volatile
  5887                           
  5888                           ;iut_lcd.c: 748: TRISD &= 0x0f;
  5889  00224E  0E0F               	movlw	15
  5890  002250  1695               	andwf	3989,f,c	;volatile
  5891                           
  5892                           ;iut_lcd.c: 749: PORTD &= 0x0f;
  5893  002252  0E0F               	movlw	15
  5894  002254  1683               	andwf	3971,f,c	;volatile
  5895                           
  5896                           ;iut_lcd.c: 750: PORTD |= (c & 0xf0);
  5897  002256  5001               	movf	lcd_write_cmd_data@c,w,c
  5898  002258  0BF0               	andlw	240
  5899  00225A  1283               	iorwf	3971,f,c	;volatile
  5900                           
  5901                           ;iut_lcd.c: 751: lcd_clock_e();
  5902  00225C  ECCD  F011         	call	_lcd_clock_e	;wreg free
  5903                           
  5904                           ;iut_lcd.c: 752: PORTD &= 0x0f;
  5905  002260  0E0F               	movlw	15
  5906  002262  1683               	andwf	3971,f,c	;volatile
  5907                           
  5908                           ;iut_lcd.c: 753: PORTD |= ((c << 4)&0xf0);
  5909  002264  3801               	swapf	lcd_write_cmd_data@c,w,c
  5910  002266  0BF0               	andlw	240
  5911  002268  0BF0               	andlw	240
  5912  00226A  1283               	iorwf	3971,f,c	;volatile
  5913                           
  5914                           ;iut_lcd.c: 754: lcd_clock_e();
  5915  00226C  ECCD  F011         	call	_lcd_clock_e	;wreg free
  5916                           
  5917                           ;iut_lcd.c: 755: TRISD |= 0xf0;
  5918  002270  0EF0               	movlw	240
  5919  002272  1295               	iorwf	3989,f,c	;volatile
  5920  002274  0012               	return		;funcret
  5921  002276                     __end_of_lcd_write_cmd_data:
  5922                           	opt stack 0
  5923                           tblptru	equ	0xFF8
  5924                           tblptrh	equ	0xFF7
  5925                           tblptrl	equ	0xFF6
  5926                           tablat	equ	0xFF5
  5927                           prodl	equ	0xFF3
  5928                           wreg	equ	0xFE8
  5929                           indf2	equ	0xFDF
  5930                           postinc2	equ	0xFDE
  5931                           postdec2	equ	0xFDD
  5932                           fsr2h	equ	0xFDA
  5933                           fsr2l	equ	0xFD9
  5934                           status	equ	0xFD8
  5935                           
  5936 ;; *************** function _lcd_busy *****************
  5937 ;; Defined at:
  5938 ;;		line 770 in file "iut_lcd.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;		None
  5941 ;; Auto vars:     Size  Location     Type
  5942 ;;		None
  5943 ;; Return value:  Size  Location     Type
  5944 ;;                  1    wreg      unsigned char 
  5945 ;; Registers used:
  5946 ;;		wreg, cstack
  5947 ;; Tracked objects:
  5948 ;;		On entry : 0/0
  5949 ;;		On exit  : 0/0
  5950 ;;		Unchanged: 0/0
  5951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5952 ;;      Params:         0       0       0       0       0       0       0       0       0
  5953 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5954 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5955 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5956 ;;Total ram usage:        0 bytes
  5957 ;; Hardware stack levels used:    1
  5958 ;; Hardware stack levels required when called:    1
  5959 ;; This function calls:
  5960 ;;		_lcd_clock_e
  5961 ;; This function is called by:
  5962 ;;		_lcd_write_data_busy
  5963 ;;		_lcd_write_cmd_busy
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text22
  5968  0021A0                     __ptext22:
  5969                           	opt stack 0
  5970  0021A0                     _lcd_busy:
  5971                           	opt stack 27
  5972                           
  5973                           ;iut_lcd.c: 771: PORTDbits.RD2 = 1;
  5974                           
  5975                           ;incstack = 0
  5976  0021A0  8483               	bsf	3971,2,c	;volatile
  5977                           
  5978                           ;iut_lcd.c: 772: PORTDbits.RD1 = 0;
  5979  0021A2  9283               	bcf	3971,1,c	;volatile
  5980                           
  5981                           ;iut_lcd.c: 773: __nop(); __nop(); __nop();;
  5982  0021A4  F000               	nop	
  5983  0021A6  F000               	nop	
  5984  0021A8  F000               	nop	
  5985                           
  5986                           ;iut_lcd.c: 774: PORTDbits.RD0 = 1;
  5987  0021AA  8083               	bsf	3971,0,c	;volatile
  5988                           
  5989                           ;iut_lcd.c: 775: __nop(); __nop(); __nop();;
  5990  0021AC  F000               	nop	
  5991  0021AE  F000               	nop	
  5992  0021B0  F000               	nop	
  5993                           
  5994                           ;iut_lcd.c: 776: if (PORTD & 0x80) {
  5995  0021B2  AE83               	btfss	3971,7,c	;volatile
  5996  0021B4  D009               	goto	l323
  5997                           
  5998                           ;iut_lcd.c: 777: PORTDbits.RD0 = 0;
  5999  0021B6  9083               	bcf	3971,0,c	;volatile
  6000                           
  6001                           ;iut_lcd.c: 778: __nop(); __nop(); __nop();;
  6002  0021B8  F000               	nop	
  6003  0021BA  F000               	nop	
  6004  0021BC  F000               	nop	
  6005                           
  6006                           ;iut_lcd.c: 779: lcd_clock_e();
  6007  0021BE  ECCD  F011         	call	_lcd_clock_e	;wreg free
  6008                           
  6009                           ;iut_lcd.c: 780: PORTDbits.RD2 = 0;
  6010  0021C2  9483               	bcf	3971,2,c	;volatile
  6011                           
  6012                           ;iut_lcd.c: 781: return 1;
  6013  0021C4  0E01               	movlw	1
  6014                           
  6015                           ;iut_lcd.c: 782: } else {
  6016  0021C6  0012               	return	
  6017  0021C8                     l323:
  6018                           
  6019                           ;iut_lcd.c: 783: PORTDbits.RD0 = 0;
  6020  0021C8  9083               	bcf	3971,0,c	;volatile
  6021                           
  6022                           ;iut_lcd.c: 784: __nop(); __nop(); __nop();;
  6023  0021CA  F000               	nop	
  6024  0021CC  F000               	nop	
  6025  0021CE  F000               	nop	
  6026                           
  6027                           ;iut_lcd.c: 785: lcd_clock_e();
  6028  0021D0  ECCD  F011         	call	_lcd_clock_e	;wreg free
  6029                           
  6030                           ;iut_lcd.c: 786: PORTDbits.RD2 = 0;
  6031  0021D4  9483               	bcf	3971,2,c	;volatile
  6032                           
  6033                           ;iut_lcd.c: 787: return 0;
  6034  0021D6  0E00               	movlw	0
  6035  0021D8  0012               	return	
  6036  0021DA                     __end_of_lcd_busy:
  6037                           	opt stack 0
  6038                           tblptru	equ	0xFF8
  6039                           tblptrh	equ	0xFF7
  6040                           tblptrl	equ	0xFF6
  6041                           tablat	equ	0xFF5
  6042                           prodl	equ	0xFF3
  6043                           wreg	equ	0xFE8
  6044                           indf2	equ	0xFDF
  6045                           postinc2	equ	0xFDE
  6046                           postdec2	equ	0xFDD
  6047                           fsr2h	equ	0xFDA
  6048                           fsr2l	equ	0xFD9
  6049                           status	equ	0xFD8
  6050                           
  6051 ;; *************** function _lcd_clock_e *****************
  6052 ;; Defined at:
  6053 ;;		line 791 in file "iut_lcd.c"
  6054 ;; Parameters:    Size  Location     Type
  6055 ;;		None
  6056 ;; Auto vars:     Size  Location     Type
  6057 ;;		None
  6058 ;; Return value:  Size  Location     Type
  6059 ;;                  1    wreg      void 
  6060 ;; Registers used:
  6061 ;;		None
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6067 ;;      Params:         0       0       0       0       0       0       0       0       0
  6068 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6069 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6070 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6071 ;;Total ram usage:        0 bytes
  6072 ;; Hardware stack levels used:    1
  6073 ;; This function calls:
  6074 ;;		Nothing
  6075 ;; This function is called by:
  6076 ;;		_lcd_init
  6077 ;;		_lcd_write_cmd_data
  6078 ;;		_lcd_busy
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text23
  6083  00239A                     __ptext23:
  6084                           	opt stack 0
  6085  00239A                     _lcd_clock_e:
  6086                           	opt stack 27
  6087                           
  6088                           ;iut_lcd.c: 792: PORTDbits.RD0 = 1;
  6089                           
  6090                           ;incstack = 0
  6091  00239A  8083               	bsf	3971,0,c	;volatile
  6092                           
  6093                           ;iut_lcd.c: 793: __nop(); __nop(); __nop();;
  6094  00239C  F000               	nop	
  6095  00239E  F000               	nop	
  6096  0023A0  F000               	nop	
  6097                           
  6098                           ;iut_lcd.c: 794: PORTDbits.RD0 = 0;
  6099  0023A2  9083               	bcf	3971,0,c	;volatile
  6100                           
  6101                           ;iut_lcd.c: 795: __nop(); __nop(); __nop();;
  6102  0023A4  F000               	nop	
  6103  0023A6  F000               	nop	
  6104  0023A8  F000               	nop	
  6105  0023AA  0012               	return		;funcret
  6106  0023AC                     __end_of_lcd_clock_e:
  6107                           	opt stack 0
  6108                           tblptru	equ	0xFF8
  6109                           tblptrh	equ	0xFF7
  6110                           tblptrl	equ	0xFF6
  6111                           tablat	equ	0xFF5
  6112                           prodl	equ	0xFF3
  6113                           wreg	equ	0xFE8
  6114                           indf2	equ	0xFDF
  6115                           postinc2	equ	0xFDE
  6116                           postdec2	equ	0xFDD
  6117                           fsr2h	equ	0xFDA
  6118                           fsr2l	equ	0xFD9
  6119                           status	equ	0xFD8
  6120                           
  6121 ;; *************** function _adc_read *****************
  6122 ;; Defined at:
  6123 ;;		line 113 in file "iut_adc.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;  numero_canal    1    wreg     unsigned char 
  6126 ;; Auto vars:     Size  Location     Type
  6127 ;;  numero_canal    1    4[COMRAM] unsigned char 
  6128 ;; Return value:  Size  Location     Type
  6129 ;;                  2    0[COMRAM] int 
  6130 ;; Registers used:
  6131 ;;		wreg, status,2, status,0
  6132 ;; Tracked objects:
  6133 ;;		On entry : 0/0
  6134 ;;		On exit  : 0/0
  6135 ;;		Unchanged: 0/0
  6136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6137 ;;      Params:         2       0       0       0       0       0       0       0       0
  6138 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6139 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6140 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6141 ;;Total ram usage:        5 bytes
  6142 ;; Hardware stack levels used:    1
  6143 ;; This function calls:
  6144 ;;		Nothing
  6145 ;; This function is called by:
  6146 ;;		_main
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text24
  6151  0022CA                     __ptext24:
  6152                           	opt stack 0
  6153  0022CA                     _adc_read:
  6154                           	opt stack 30
  6155                           
  6156                           ;incstack = 0
  6157                           ;adc_read@numero_canal stored from wreg
  6158  0022CA  6E05               	movwf	adc_read@numero_canal,c
  6159                           
  6160                           ;iut_adc.c: 115: ADCON0 = ((numero_canal & 0x07) << 2) | 0x01;
  6161  0022CC  C005  F003         	movff	adc_read@numero_canal,??_adc_read
  6162  0022D0  0E07               	movlw	7
  6163  0022D2  1603               	andwf	??_adc_read,f,c
  6164  0022D4  90D8               	bcf	status,0,c
  6165  0022D6  3603               	rlcf	??_adc_read,f,c
  6166  0022D8  90D8               	bcf	status,0,c
  6167  0022DA  3403               	rlcf	??_adc_read,w,c
  6168  0022DC  0901               	iorlw	1
  6169  0022DE  6EC2               	movwf	4034,c	;volatile
  6170                           
  6171                           ;iut_adc.c: 118: ADCON0bits.GO = 1;
  6172  0022E0  82C2               	bsf	4034,1,c	;volatile
  6173  0022E2                     l63:
  6174  0022E2  B2C2               	btfsc	4034,1,c	;volatile
  6175  0022E4  D7FE               	goto	l63
  6176                           
  6177                           ;iut_adc.c: 124: return (((unsigned int) ADRESH) << 8) | ADRESL;
  6178  0022E6  50C4               	movf	4036,w,c	;volatile
  6179  0022E8  6E03               	movwf	??_adc_read& (0+255),c
  6180  0022EA  50C3               	movf	4035,w,c	;volatile
  6181  0022EC  6E01               	movwf	?_adc_read,c
  6182  0022EE  C003  F002         	movff	??_adc_read,?_adc_read+1
  6183  0022F2  0012               	return	
  6184  0022F4                     __end_of_adc_read:
  6185                           	opt stack 0
  6186                           tblptru	equ	0xFF8
  6187                           tblptrh	equ	0xFF7
  6188                           tblptrl	equ	0xFF6
  6189                           tablat	equ	0xFF5
  6190                           prodl	equ	0xFF3
  6191                           wreg	equ	0xFE8
  6192                           indf2	equ	0xFDF
  6193                           postinc2	equ	0xFDE
  6194                           postdec2	equ	0xFDD
  6195                           fsr2h	equ	0xFDA
  6196                           fsr2l	equ	0xFD9
  6197                           status	equ	0xFD8
  6198                           
  6199 ;; *************** function _adc_init *****************
  6200 ;; Defined at:
  6201 ;;		line 48 in file "iut_adc.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;  numero_derni    1    wreg     unsigned char 
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;  numero_derni    1    0[COMRAM] unsigned char 
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  1    wreg      void 
  6208 ;; Registers used:
  6209 ;;		wreg, status,2, status,0
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6215 ;;      Params:         0       0       0       0       0       0       0       0       0
  6216 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6217 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6218 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6219 ;;Total ram usage:        1 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; This function calls:
  6222 ;;		Nothing
  6223 ;; This function is called by:
  6224 ;;		_main
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           	psect	text25
  6229  001E9E                     __ptext25:
  6230                           	opt stack 0
  6231  001E9E                     _adc_init:
  6232                           	opt stack 30
  6233                           
  6234                           ;incstack = 0
  6235                           ;adc_init@numero_dernier_canal stored from wreg
  6236  001E9E  6E01               	movwf	adc_init@numero_dernier_canal,c
  6237                           
  6238                           ;iut_adc.c: 51: switch (numero_dernier_canal) {
  6239  001EA0  D033               	goto	l2791
  6240  001EA2                     l2751:
  6241                           
  6242                           ;iut_adc.c: 57: ADCON1 = 0xD;
  6243  001EA2  0E0D               	movlw	13
  6244  001EA4  6EC1               	movwf	4033,c	;volatile
  6245                           
  6246                           ;iut_adc.c: 58: TRISA = TRISA | 0b00000011;
  6247  001EA6  5092               	movf	3986,w,c	;volatile
  6248  001EA8  0903               	iorlw	3
  6249  001EAA  D02C               	goto	L19
  6250  001EAC                     l2755:
  6251                           
  6252                           ;iut_adc.c: 61: ADCON1 = 0xC;
  6253  001EAC  0E0C               	movlw	12
  6254  001EAE  6EC1               	movwf	4033,c	;volatile
  6255                           
  6256                           ;iut_adc.c: 62: TRISA = TRISA | 0b00000111;
  6257  001EB0  5092               	movf	3986,w,c	;volatile
  6258  001EB2  0907               	iorlw	7
  6259  001EB4  D027               	goto	L19
  6260  001EB6                     l2759:
  6261                           
  6262                           ;iut_adc.c: 65: ADCON1 = 0xB;
  6263  001EB6  0E0B               	movlw	11
  6264  001EB8  6EC1               	movwf	4033,c	;volatile
  6265                           
  6266                           ;iut_adc.c: 66: TRISA = TRISA | 0b00001111;
  6267  001EBA  5092               	movf	3986,w,c	;volatile
  6268  001EBC  090F               	iorlw	15
  6269  001EBE  D022               	goto	L19
  6270  001EC0                     l2763:
  6271                           
  6272                           ;iut_adc.c: 69: ADCON1 = 0xA;
  6273  001EC0  0E0A               	movlw	10
  6274  001EC2  6EC1               	movwf	4033,c	;volatile
  6275                           
  6276                           ;iut_adc.c: 70: TRISA = TRISA | 0b00101111;
  6277  001EC4  5092               	movf	3986,w,c	;volatile
  6278  001EC6  092F               	iorlw	47
  6279  001EC8  D01D               	goto	L19
  6280  001ECA                     l2767:
  6281                           
  6282                           ;iut_adc.c: 73: ADCON1 = 0x9;
  6283  001ECA  0E09               	movlw	9
  6284  001ECC  6EC1               	movwf	4033,c	;volatile
  6285                           
  6286                           ;iut_adc.c: 74: TRISA = TRISA | 0b00101111;
  6287  001ECE  5092               	movf	3986,w,c	;volatile
  6288  001ED0  092F               	iorlw	47
  6289  001ED2  6E92               	movwf	3986,c	;volatile
  6290                           
  6291                           ;iut_adc.c: 75: TRISE = TRISE | 0b00000001;
  6292  001ED4  5096               	movf	3990,w,c	;volatile
  6293  001ED6  0901               	iorlw	1
  6294  001ED8  D00F               	goto	L21
  6295  001EDA                     l2773:
  6296                           
  6297                           ;iut_adc.c: 78: ADCON1 = 0x8;
  6298  001EDA  0E08               	movlw	8
  6299  001EDC  6EC1               	movwf	4033,c	;volatile
  6300                           
  6301                           ;iut_adc.c: 79: TRISA = TRISA | 0b00101111;
  6302  001EDE  5092               	movf	3986,w,c	;volatile
  6303  001EE0  092F               	iorlw	47
  6304  001EE2  6E92               	movwf	3986,c	;volatile
  6305                           
  6306                           ;iut_adc.c: 80: TRISE = TRISE | 0b00000011;
  6307  001EE4  5096               	movf	3990,w,c	;volatile
  6308  001EE6  0903               	iorlw	3
  6309  001EE8  D007               	goto	L21
  6310  001EEA                     l2779:
  6311                           
  6312                           ;iut_adc.c: 83: ADCON1 = 0x7;
  6313  001EEA  0E07               	movlw	7
  6314  001EEC  6EC1               	movwf	4033,c	;volatile
  6315                           
  6316                           ;iut_adc.c: 84: TRISA = TRISA | 0b00101111;
  6317  001EEE  5092               	movf	3986,w,c	;volatile
  6318  001EF0  092F               	iorlw	47
  6319  001EF2  6E92               	movwf	3986,c	;volatile
  6320                           
  6321                           ;iut_adc.c: 85: TRISE = TRISE | 0b00000111;
  6322  001EF4  5096               	movf	3990,w,c	;volatile
  6323  001EF6  0907               	iorlw	7
  6324  001EF8                     L21:
  6325  001EF8  6E96               	movwf	3990,c	;volatile
  6326                           
  6327                           ;iut_adc.c: 86: break;
  6328  001EFA  D020               	goto	l2793
  6329  001EFC                     l2785:
  6330                           
  6331                           ;iut_adc.c: 88: ADCON1 = 0xE;
  6332  001EFC  0E0E               	movlw	14
  6333  001EFE  6EC1               	movwf	4033,c	;volatile
  6334                           
  6335                           ;iut_adc.c: 89: TRISA = TRISA | 0b00000001;
  6336  001F00  5092               	movf	3986,w,c	;volatile
  6337  001F02  0901               	iorlw	1
  6338  001F04                     L19:
  6339  001F04  6E92               	movwf	3986,c	;volatile
  6340                           
  6341                           ;iut_adc.c: 91: }
  6342                           
  6343                           ;iut_adc.c: 90: break;
  6344  001F06  D01A               	goto	l2793
  6345  001F08                     l2791:
  6346  001F08  5001               	movf	adc_init@numero_dernier_canal,w,c
  6347                           
  6348                           ; Switch size 1, requested type "space"
  6349                           ; Number of cases is 8, Range of values is 0 to 7
  6350                           ; switch strategies available:
  6351                           ; Name         Instructions Cycles
  6352                           ; simple_byte           25    13 (average)
  6353                           ;	Chosen strategy is simple_byte
  6354  001F0A  0A00               	xorlw	0	; case 0
  6355  001F0C  B4D8               	btfsc	status,2,c
  6356  001F0E  D7F6               	goto	l2785
  6357  001F10  0A01               	xorlw	1	; case 1
  6358  001F12  B4D8               	btfsc	status,2,c
  6359  001F14  D7C6               	goto	l2751
  6360  001F16  0A03               	xorlw	3	; case 2
  6361  001F18  B4D8               	btfsc	status,2,c
  6362  001F1A  D7C8               	goto	l2755
  6363  001F1C  0A01               	xorlw	1	; case 3
  6364  001F1E  B4D8               	btfsc	status,2,c
  6365  001F20  D7CA               	goto	l2759
  6366  001F22  0A07               	xorlw	7	; case 4
  6367  001F24  B4D8               	btfsc	status,2,c
  6368  001F26  D7CC               	goto	l2763
  6369  001F28  0A01               	xorlw	1	; case 5
  6370  001F2A  B4D8               	btfsc	status,2,c
  6371  001F2C  D7CE               	goto	l2767
  6372  001F2E  0A03               	xorlw	3	; case 6
  6373  001F30  B4D8               	btfsc	status,2,c
  6374  001F32  D7D3               	goto	l2773
  6375  001F34  0A01               	xorlw	1	; case 7
  6376  001F36  B4D8               	btfsc	status,2,c
  6377  001F38  D7D8               	goto	l2779
  6378  001F3A  D7E0               	goto	l2785
  6379  001F3C                     l2793:
  6380                           
  6381                           ;iut_adc.c: 96: ADCON2 = 0b10100110;
  6382  001F3C  0EA6               	movlw	166
  6383  001F3E  6EC0               	movwf	4032,c	;volatile
  6384                           
  6385                           ;iut_adc.c: 99: ADCON0bits.ADON = 1;
  6386  001F40  80C2               	bsf	4034,0,c	;volatile
  6387  001F42  0012               	return		;funcret
  6388  001F44                     __end_of_adc_init:
  6389                           	opt stack 0
  6390                           tblptru	equ	0xFF8
  6391                           tblptrh	equ	0xFF7
  6392                           tblptrl	equ	0xFF6
  6393                           tablat	equ	0xFF5
  6394                           prodl	equ	0xFF3
  6395                           wreg	equ	0xFE8
  6396                           indf2	equ	0xFDF
  6397                           postinc2	equ	0xFDE
  6398                           postdec2	equ	0xFDD
  6399                           fsr2h	equ	0xFDA
  6400                           fsr2l	equ	0xFD9
  6401                           status	equ	0xFD8
  6402                           
  6403 ;; *************** function ___awtoft *****************
  6404 ;; Defined at:
  6405 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awtoft.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;  c               2    8[COMRAM] int 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  sign            1   11[COMRAM] unsigned char 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  3    8[COMRAM] float 
  6412 ;; Registers used:
  6413 ;;		wreg, status,2, status,0, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6419 ;;      Params:         3       0       0       0       0       0       0       0       0
  6420 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6421 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6422 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6423 ;;Total ram usage:        4 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    1
  6426 ;; This function calls:
  6427 ;;		___ftpack
  6428 ;; This function is called by:
  6429 ;;		_main
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           	psect	text26
  6434  002212                     __ptext26:
  6435                           	opt stack 0
  6436  002212                     ___awtoft:
  6437                           	opt stack 29
  6438                           
  6439                           ;incstack = 0
  6440  002212  0E00               	movlw	0
  6441  002214  6E0C               	movwf	___awtoft@sign,c
  6442  002216  AE0A               	btfss	___awtoft@c+1,7,c
  6443  002218  D006               	goto	l3439
  6444  00221A  6C09               	negf	___awtoft@c,c
  6445  00221C  1E0A               	comf	___awtoft@c+1,f,c
  6446  00221E  B0D8               	btfsc	status,0,c
  6447  002220  2A0A               	incf	___awtoft@c+1,f,c
  6448  002222  0E01               	movlw	1
  6449  002224  6E0C               	movwf	___awtoft@sign,c
  6450  002226                     l3439:
  6451  002226  C009  F001         	movff	___awtoft@c,___ftpack@arg
  6452  00222A  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6453  00222E  6A03               	clrf	___ftpack@arg+2,c
  6454  002230  0E8E               	movlw	142
  6455  002232  6E04               	movwf	___ftpack@exp,c
  6456  002234  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  6457  002238  ECF8  F00E         	call	___ftpack	;wreg free
  6458  00223C  C001  F009         	movff	?___ftpack,?___awtoft
  6459  002240  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  6460  002244  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  6461  002248  0012               	return	
  6462  00224A                     __end_of___awtoft:
  6463                           	opt stack 0
  6464                           tblptru	equ	0xFF8
  6465                           tblptrh	equ	0xFF7
  6466                           tblptrl	equ	0xFF6
  6467                           tablat	equ	0xFF5
  6468                           prodl	equ	0xFF3
  6469                           wreg	equ	0xFE8
  6470                           indf2	equ	0xFDF
  6471                           postinc2	equ	0xFDE
  6472                           postdec2	equ	0xFDD
  6473                           fsr2h	equ	0xFDA
  6474                           fsr2l	equ	0xFD9
  6475                           status	equ	0xFD8
  6476                           
  6477 ;; *************** function ___ftpack *****************
  6478 ;; Defined at:
  6479 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  6480 ;; Parameters:    Size  Location     Type
  6481 ;;  arg             3    0[COMRAM] unsigned um
  6482 ;;  exp             1    3[COMRAM] unsigned char 
  6483 ;;  sign            1    4[COMRAM] unsigned char 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  3    0[COMRAM] float 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2, status,0
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6495 ;;      Params:         5       0       0       0       0       0       0       0       0
  6496 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6497 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6498 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6499 ;;Total ram usage:        8 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; This function calls:
  6502 ;;		Nothing
  6503 ;; This function is called by:
  6504 ;;		___awtoft
  6505 ;;		___ftadd
  6506 ;;		___ftdiv
  6507 ;;		___ftmul
  6508 ;;		___lwtoft
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511                           
  6512                           	psect	text27
  6513  001DF0                     __ptext27:
  6514                           	opt stack 0
  6515  001DF0                     ___ftpack:
  6516                           	opt stack 28
  6517                           
  6518                           ;incstack = 0
  6519  001DF0  5004               	movf	___ftpack@exp,w,c
  6520  001DF2  B4D8               	btfsc	status,2,c
  6521  001DF4  D005               	goto	l2413
  6522  001DF6  5001               	movf	___ftpack@arg,w,c
  6523  001DF8  1002               	iorwf	___ftpack@arg+1,w,c
  6524  001DFA  1003               	iorwf	___ftpack@arg+2,w,c
  6525  001DFC  A4D8               	btfss	status,2,c
  6526  001DFE  D00C               	goto	l2419
  6527  001E00                     l2413:
  6528  001E00  0E00               	movlw	0
  6529  001E02  6E01               	movwf	?___ftpack,c
  6530  001E04  0E00               	movlw	0
  6531  001E06  6E02               	movwf	?___ftpack+1,c
  6532  001E08  0E00               	movlw	0
  6533  001E0A  6E03               	movwf	?___ftpack+2,c
  6534  001E0C  0012               	return	
  6535  001E0E                     l2417:
  6536  001E0E  2A04               	incf	___ftpack@exp,f,c
  6537  001E10  90D8               	bcf	status,0,c
  6538  001E12  3203               	rrcf	___ftpack@arg+2,f,c
  6539  001E14  3202               	rrcf	___ftpack@arg+1,f,c
  6540  001E16  3201               	rrcf	___ftpack@arg,f,c
  6541  001E18                     l2419:
  6542  001E18  0E00               	movlw	0
  6543  001E1A  1401               	andwf	___ftpack@arg,w,c
  6544  001E1C  6E06               	movwf	??___ftpack& (0+255),c
  6545  001E1E  0E00               	movlw	0
  6546  001E20  1402               	andwf	___ftpack@arg+1,w,c
  6547  001E22  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6548  001E24  0EFE               	movlw	254
  6549  001E26  1403               	andwf	___ftpack@arg+2,w,c
  6550  001E28  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6551  001E2A  5006               	movf	??___ftpack,w,c
  6552  001E2C  1007               	iorwf	??___ftpack+1,w,c
  6553  001E2E  1008               	iorwf	??___ftpack+2,w,c
  6554  001E30  B4D8               	btfsc	status,2,c
  6555  001E32  D00C               	goto	l2425
  6556  001E34  D7EC               	goto	l2417
  6557  001E36                     l2421:
  6558  001E36  2A04               	incf	___ftpack@exp,f,c
  6559  001E38  0E01               	movlw	1
  6560  001E3A  2601               	addwf	___ftpack@arg,f,c
  6561  001E3C  0E00               	movlw	0
  6562  001E3E  2202               	addwfc	___ftpack@arg+1,f,c
  6563  001E40  0E00               	movlw	0
  6564  001E42  2203               	addwfc	___ftpack@arg+2,f,c
  6565  001E44  90D8               	bcf	status,0,c
  6566  001E46  3203               	rrcf	___ftpack@arg+2,f,c
  6567  001E48  3202               	rrcf	___ftpack@arg+1,f,c
  6568  001E4A  3201               	rrcf	___ftpack@arg,f,c
  6569  001E4C                     l2425:
  6570  001E4C  0E00               	movlw	0
  6571  001E4E  1401               	andwf	___ftpack@arg,w,c
  6572  001E50  6E06               	movwf	??___ftpack& (0+255),c
  6573  001E52  0E00               	movlw	0
  6574  001E54  1402               	andwf	___ftpack@arg+1,w,c
  6575  001E56  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6576  001E58  0EFF               	movlw	255
  6577  001E5A  1403               	andwf	___ftpack@arg+2,w,c
  6578  001E5C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6579  001E5E  5006               	movf	??___ftpack,w,c
  6580  001E60  1007               	iorwf	??___ftpack+1,w,c
  6581  001E62  1008               	iorwf	??___ftpack+2,w,c
  6582  001E64  B4D8               	btfsc	status,2,c
  6583  001E66  D006               	goto	l2429
  6584  001E68  D7E6               	goto	l2421
  6585  001E6A                     l2427:
  6586  001E6A  0604               	decf	___ftpack@exp,f,c
  6587  001E6C  90D8               	bcf	status,0,c
  6588  001E6E  3601               	rlcf	___ftpack@arg,f,c
  6589  001E70  3602               	rlcf	___ftpack@arg+1,f,c
  6590  001E72  3603               	rlcf	___ftpack@arg+2,f,c
  6591  001E74                     l2429:
  6592  001E74  BE02               	btfsc	___ftpack@arg+1,7,c
  6593  001E76  D003               	goto	l706
  6594  001E78  0E02               	movlw	2
  6595  001E7A  6004               	cpfslt	___ftpack@exp,c
  6596  001E7C  D7F6               	goto	l2427
  6597  001E7E                     l706:
  6598  001E7E  A004               	btfss	___ftpack@exp,0,c
  6599  001E80  9E02               	bcf	___ftpack@arg+1,7,c
  6600  001E82  90D8               	bcf	status,0,c
  6601  001E84  3204               	rrcf	___ftpack@exp,f,c
  6602  001E86  5004               	movf	___ftpack@exp,w,c
  6603  001E88  1203               	iorwf	___ftpack@arg+2,f,c
  6604  001E8A  5005               	movf	___ftpack@sign,w,c
  6605  001E8C  A4D8               	btfss	status,2,c
  6606  001E8E  8E03               	bsf	___ftpack@arg+2,7,c
  6607  001E90  C001  F001         	movff	___ftpack@arg,?___ftpack
  6608  001E94  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6609  001E98  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6610  001E9C  0012               	return	
  6611  001E9E                     __end_of___ftpack:
  6612                           	opt stack 0
  6613                           tblptru	equ	0xFF8
  6614                           tblptrh	equ	0xFF7
  6615                           tblptrl	equ	0xFF6
  6616                           tablat	equ	0xFF5
  6617                           prodl	equ	0xFF3
  6618                           wreg	equ	0xFE8
  6619                           indf2	equ	0xFDF
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           fsr2h	equ	0xFDA
  6623                           fsr2l	equ	0xFD9
  6624                           status	equ	0xFD8
  6625                           tblptru	equ	0xFF8
  6626                           tblptrh	equ	0xFF7
  6627                           tblptrl	equ	0xFF6
  6628                           tablat	equ	0xFF5
  6629                           prodl	equ	0xFF3
  6630                           wreg	equ	0xFE8
  6631                           indf2	equ	0xFDF
  6632                           postinc2	equ	0xFDE
  6633                           postdec2	equ	0xFDD
  6634                           fsr2h	equ	0xFDA
  6635                           fsr2l	equ	0xFD9
  6636                           status	equ	0xFD8
  6637                           
  6638                           	psect	rparam
  6639  0000                     tblptru	equ	0xFF8
  6640                           tblptrh	equ	0xFF7
  6641                           tblptrl	equ	0xFF6
  6642                           tablat	equ	0xFF5
  6643                           prodl	equ	0xFF3
  6644                           wreg	equ	0xFE8
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           postdec2	equ	0xFDD
  6648                           fsr2h	equ	0xFDA
  6649                           fsr2l	equ	0xFD9
  6650                           status	equ	0xFD8


Data Sizes:
    Strings     26
    Constant    17
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     75      75
    BANK0           160     90      90
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_printf@q	PTR unsigned char  size(2) Largest target is 33
		 -> lcd_printf@buf(BANK0[33]), 

    lcd_printf@ramstring	PTR unsigned char  size(2) Largest target is 0

    lcd_printf@romstring	PTR far unsigned char  size(2) Largest target is 0

    lcd_printf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[4]), STR_6(CODE[4]), 
		 -> STR_5(CODE[4]), STR_4(CODE[4]), STR_3(CODE[4]), STR_2(CODE[4]), 
		 -> STR_1(CODE[16]), 

    lcd_printf@ap	PTR void [1] size(2) Largest target is 1
		 -> ?_lcd_printf(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_lcd_printf
    _pwm_setdc2->___fttol
    _pwm_setdc1->___fttol
    _lcd_printf->___ftmul
    _lcd_repete_n->_lcd_write_data_busy
    _lcd_putc->_lcd_position
    _lcd_write_data_busy->_lcd_write_cmd_data
    _lcd_position->_lcd_write_cmd_busy
    ___lwtoft->___ftpack
    ___ftneg->___awtoft
    ___ftmul->___ftdiv
    ___ftdiv->___ftadd
    ___ftadd->___ftneg
    _lcd_init->_lcd_write_cmd_busy
    _lcd_clear->_lcd_write_cmd_busy
    _lcd_write_cmd_busy->_lcd_write_cmd_data
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_lcd_printf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0   43056
                                             74 COMRAM     1     1      0
                                             67 BANK0     23    23      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           _adc_init
                           _adc_read
                           _lcd_init
                       _lcd_position
                         _lcd_printf
                           _pwm_init
                         _pwm_setdc1
                         _pwm_setdc2
 ---------------------------------------------------------------------------------
 (1) _pwm_setdc2                                           4     2      2     120
                                             15 COMRAM     4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _pwm_setdc1                                           4     2      2     120
                                             15 COMRAM     4     2      2
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _pwm_init                                             2     1      1     164
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _lcd_printf                                          84    74     10   24718
                                             57 COMRAM    17     7     10
                                              0 BANK0     67    67      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lwtoft
                           _lcd_putc
                       _lcd_repete_n
                _lcd_write_data_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_repete_n                                         2     1      1     794
                                              2 COMRAM     2     1      1
                _lcd_write_data_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    1083
                                              5 COMRAM     1     1      0
                       _lcd_position
                 _lcd_write_cmd_busy
                _lcd_write_data_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_write_data_busy                                  1     1      0      66
                                              1 COMRAM     1     1      0
                           _lcd_busy
                 _lcd_write_cmd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_position                                         3     2      1     819
                                              2 COMRAM     3     2      1
                 _lcd_write_cmd_busy
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2679
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1012
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     425
                                             12 COMRAM     3     0      3
                           ___awtoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3717
                                             42 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3519
                                             27 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    4205
                                             15 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0     132
                                              2 COMRAM     1     1      0
                          _lcd_clear
                        _lcd_clock_e
                 _lcd_write_cmd_busy
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            0     0      0      66
                 _lcd_write_cmd_busy
 ---------------------------------------------------------------------------------
 (3) _lcd_write_cmd_busy                                   1     1      0      66
                                              1 COMRAM     1     1      0
                           _lcd_busy
                 _lcd_write_cmd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_write_cmd_data                                   1     1      0      44
                                              0 COMRAM     1     1      0
                        _lcd_clock_e
 ---------------------------------------------------------------------------------
 (3) _lcd_busy                                             0     0      0       0
                        _lcd_clock_e
 ---------------------------------------------------------------------------------
 (4) _lcd_clock_e                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2824
                                              8 COMRAM     4     1      3
                           ___ftpack
                           _adc_read (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awtoft
     ___ftpack
     _adc_read (ARG)
   ___ftadd
     ___awtoft (ARG)
       ___ftpack
       _adc_read (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       _adc_read (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
     _adc_read (ARG)
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
       _adc_read (ARG)
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             _adc_read (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _adc_read (ARG)
     ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     _adc_read (ARG)
   ___ftneg
     ___awtoft (ARG)
       ___ftpack
       _adc_read (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
   _adc_init
   _adc_read
   _lcd_init
     _lcd_clear
       _lcd_write_cmd_busy
         _lcd_busy
           _lcd_clock_e
         _lcd_write_cmd_data
           _lcd_clock_e
     _lcd_clock_e
     _lcd_write_cmd_busy
       _lcd_busy
         _lcd_clock_e
       _lcd_write_cmd_data
         _lcd_clock_e
   _lcd_position
     _lcd_write_cmd_busy
       _lcd_busy
         _lcd_clock_e
       _lcd_write_cmd_data
         _lcd_clock_e
   _lcd_printf
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             _adc_read (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       _adc_read (ARG)
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             _adc_read (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
             _adc_read (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
               _adc_read (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
             _adc_read (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         _adc_read (ARG)
       ___ftneg (ARG)
         ___awtoft (ARG)
           ___ftpack
           _adc_read (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       _adc_read (ARG)
     ___ftneg
       ___awtoft (ARG)
         ___ftpack
         _adc_read (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lldiv
     ___llmod
     ___lwtoft
       ___ftpack
     _lcd_putc
       _lcd_position
         _lcd_write_cmd_busy
           _lcd_busy
             _lcd_clock_e
           _lcd_write_cmd_data
             _lcd_clock_e
       _lcd_write_cmd_busy
         _lcd_busy
           _lcd_clock_e
         _lcd_write_cmd_data
           _lcd_clock_e
       _lcd_write_data_busy
         _lcd_busy
           _lcd_clock_e
         _lcd_write_cmd_data
           _lcd_clock_e
     _lcd_repete_n
       _lcd_write_data_busy
         _lcd_busy
           _lcd_clock_e
         _lcd_write_cmd_data
           _lcd_clock_e
     _lcd_write_data_busy
       _lcd_busy
         _lcd_clock_e
       _lcd_write_cmd_data
         _lcd_clock_e
   _pwm_init
   _pwm_setdc1
     ___fttol (ARG)
   _pwm_setdc2
     ___fttol (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     4B      4B       1       78.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5A      5A       5       56.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Jan 06 16:48:48 2020

               ?_lcd_repete_n 0003                            l25 15CC                            l26 1698  
                          l63 22E2                 ?_lcd_position 0003                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                ___ftadd@exp1 001B                  ___ftadd@exp2 001A                  ___ftadd@sign 0019  
                         l140 097C                           l133 0928                           l222 0E8A  
                         l150 0A2A                           l135 0980                           l216 0E38  
                         l233 0F2E                           l234 0F4C                           l226 0EFA  
                         l323 21C8                           l235 0F38                           l180 0BEA  
                         l265 11E2                           l193 0CE8                           l266 1202  
                         l267 11F4                           l706 1E7E                           l733 19E4  
                         l831 20DC                           l744 1A94                           l753 1AB0  
                         l729 19BA                           l841 2142                           l764 1DBE  
                         l786 232E                  __CFG_CPB$OFF 000000                           _PR2 000FCB  
                __CFG_CPD$OFF 000000                           wreg 000FE8                  __CFG_LVP$OFF 000000  
                ___ftdiv@cntr 0025                  ___ftdiv@sign 002A                  __CFG_WDT$OFF 000000  
                        l3001 0ACA                          l3011 0AF0                          l3003 0AD0  
                        l3005 0ADA                          l3031 0B4E                          l3113 0D00  
                        l3041 0B7E                          l3033 0B5A                          l3131 0D52  
                        l3027 0B42                          l3019 0B12                          l2421 1E36  
                        l2413 1E00                          l2501 1A22                          l2405 235C  
                        l3205 0F28                          l3117 0D08                          l3037 0B6C  
                        l2511 1A58                          l3215 0F46                          l3151 0DC2  
                        l3127 0D3E                          l3039 0B78                          l2425 1E4C  
                        l2417 1E0E                          l2521 1A8C                          l2513 1A60  
                        l3305 1194                          l3161 0E34                          l3129 0D4E  
                        l3081 0C50                          l3065 0C02                          l3049 0BB6  
                        l2427 1E6A                          l2419 1E18                          l2507 1A44  
                        l2451 2164                          l3411 14D6                          l3403 1432  
                        l3251 105E                          l3243 1036                          l3227 0FB4  
                        l3219 0F6A                          l3147 0DAC                          l3171 0E7A  
                        l3139 0D76                          l2429 1E74                          l2509 1A4E  
                        l2613 1C98                          l3333 1272                          l3253 1066  
                        l3069 0C0A                          l2527 1ACC                          l2519 1A82  
                        l2623 1CC0                          l2711 209A                          l2463 2198  
                        l2455 2174                          l3415 14EA                          l3407 1444  
                        l3263 108A                          l3255 106C                          l3183 0EB6  
                        l3167 0E58                          l3159 0E0A                          l3087 0C76  
                        l3079 0C40                          l3423 1502                          l2537 1AFC  
                        l2553 1D5A                          l2617 1CA8                          l2721 20CE  
                        l2713 209E                          l3361 1310                          l3353 12C8  
                        l3345 12AC                          l3281 1114                          l3273 10F2  
                        l3185 0EBA                          l3193 0ECC                          l3169 0E76  
                        l3097 0CB4                          l3089 0C7C                          l3425 157A  
                        l2547 1D32                          l2643 203C                          l2627 1CD0  
                        l2731 210C                          l2459 2188                          l2467 238A  
                        l3419 14F4                          l3339 1292                          l3267 10A0  
                        l3187 0EBE                          l3427 1582                          l2389 2372  
                        l2485 19F2                          l2573 1D98                          l2709 208E  
                        l2733 2110                          l2397 2348                          l2469 2390  
                        l3373 133A                          l3349 12BA                          l3293 1152  
                        l3285 1126                          l3269 10A6                          l3197 0F06  
                        l3189 0EC4                          l3439 2226                          l2751 1EA2  
                        l2479 19C8                          l2639 200C                          l2663 1B4E  
                        l3375 1348                          l2649 2068                          l2593 1C3E  
                        l2681 1BB4                          l2737 2134                          l2729 2100  
                        l3393 1394                          l3369 1330                          l3385 1372  
                        l3297 1160                          l3289 113E                          l2763 1EC0  
                        l2755 1EAC                          l2691 1BDC                          l3379 1352  
                        l3299 1168                          l2931 096C                          l2923 092C  
                        l2773 1EDA                          l2693 1BE8                          l2685 1BC4  
                        l3389 1384                          l2925 0940                          l2767 1ECA  
                        l2759 1EB6                          l2791 1F08                          l2599 1C66  
                        l2695 1BEE                          l2927 0948                          l2785 1EFC  
                        l2793 1F3C                          l2961 0A1A                          l2953 09DA  
                        l2937 098A                          l2865 2200                          l2857 21EE  
                        l2779 1EEA                          l2699 1C04                          l2955 09EE  
                        l2891 087C                          l2867 2204                          l2859 21F2  
                        l2957 09F6                          l2893 0882                          l2885 086A  
                        l2991 0A96                          l2967 0A34                          l2887 0870  
                        l2879 083E                          l2993 0AAC                          l2977 0A60  
                        l2889 0876                          l2897 0888                          l2899 08AA  
                        l2997 0AC2                          l2989 0A92                          STR_1 0812  
                        STR_2 0822                          STR_3 0822                          STR_4 0822  
                        STR_5 0822                          STR_6 0822                          STR_7 0822  
                        STR_8 0829                          STR_9 0826                          u2101 1986  
                        u2111 199A                          u2311 1D1A                          u2331 1D42  
                        u2361 1C26                 __CFG_DEBUG$ON 000000                          u2381 1C4E  
                        u2461 1B32                          u2480 1B6C                          u2485 1B64  
                        u3740 1664                          u3750 1678                          u3807 1F8E  
                        u3817 1FA2                          u3827 1FB4                          u3748 1666  
                        u3758 167A                          u3787 1F56                          u3797 1F76  
                        _TMR2 000FCC                   lcd_printf@c 00A2                   lcd_printf@f 003A  
                 lcd_printf@i 008D                   lcd_printf@k 0089                   lcd_printf@n 009B  
                 lcd_printf@q 0086                   lcd_printf@w 008E                   lcd_printf@x 0096  
  pwm_setdc1@cycles_etat_haut 0010                          _main 15A2                  ___ftpack@arg 0001  
                ___ftpack@exp 0004                   main@moteurD 00B2                   main@moteurG 00AF  
                        fsr2h 000FDA                          indf2 000FDF                          fsr2l 000FD9  
                        prodl 000FF3                          start 0000                  ___ftmul@cntr 0038  
                ___param_bank 000000                  ___ftmul@sign 0039                ??_lcd_repete_n 0004  
                ___fttol@exp1 000F                  ___fttol@lval 000B                ??_lcd_position 0004  
               __CFG_PLLDIV$5 000000                         ?_main 0001               __end_of___ftadd 1B22  
             __end_of___ftdiv 1DF0               __end_of___ftneg 233C               __end_of___lldiv 20EE  
             __end_of___ftmul 1D0A                         _T0CON 000FD5                         _T1CON 000FCD  
             __end_of___llmod 2154               __end_of___fttol 1C16                         _T2CON 000FCA  
                       _T3CON 000FB1                         _TMR0H 000FD7                         _TMR1H 000FCF  
                       _TMR0L 000FD6                         _TMR1L 000FCE                         _TMR3H 000FB3  
                       _TMR3L 000FB2                         _PORTD 000F83                 __CFG_USBDIV$2 000000  
                       _TRISA 000F92                         _TRISD 000F95                         _TRISE 000F96  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000                  lcd_printf@ap 009D  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000                 ___awtoft@sign 000C                 ___ftpack@sign 0005  
                       tablat 000FF5                         status 000FD8               __initialization 23AC  
                __end_of_main 1976                        ??_main 004B                 ___fttol@sign1 000A  
               __activetblptr 000002   __end_of_lcd_write_data_busy 2370                 lcd_repete_n@c 0003  
                      _ADCON0 000FC2                        _ADCON1 000FC1                 lcd_repete_n@n 0004  
                      _ADCON2 000FC0              ___llmod@dividend 0001                        _ADRESH 000FC4  
                      _ADRESL 000FC3                        _CCPR1L 000FBE                        _CCPR2L 000FBB  
            __end_of___awtoft 224A              __end_of___ftpack 1E9E              __end_of_adc_init 1F44  
            __end_of_adc_read 22F4              __end_of___lwtoft 2318                __CFG_VREGEN$ON 000000  
        __size_of_lcd_clock_e 0012              __end_of_lcd_busy 21DA              __end_of_lcd_init 1FDC  
               lcd_printf@buf 0060              __end_of_lcd_putc 21A0                        ___ftge 1FDC  
                   ??___ftadd 0016                     ??___ftdiv 0022                     ??___ftneg 0010  
                   ??___lldiv 0009                     ??___ftmul 0031                     ??___llmod 0009  
                   ??___fttol 0005              __end_of_s_digits 0812    pwm_setdc2@cycles_etat_haut 0010  
                      main@n1 00A3                        main@n2 00AB                        main@n3 00AD  
                      main@n4 00A5         ___ftmul@f3_as_product 0035                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
            __end_of_pwm_init 2212          __end_of_lcd_repete_n 239A          __end_of_lcd_position 235A  
                  __accesstop 0060       __end_of__initialization 23AC               __CFG_PBADEN$OFF 000000  
                  ___ftadd@f1 0010                    ___ftadd@f2 0013                    ___ftge@ff1 0001  
                  ___ftge@ff2 0004                 ___rparam_used 000001   __size_of_lcd_write_cmd_data 002C  
                  ___ftdiv@f1 001C                    ___ftdiv@f2 001F                    ___ftdiv@f3 0026  
 __size_of_lcd_write_cmd_busy 0016                    ___ftneg@f1 000D                    ___awtoft@c 0009  
                  ___ftmul@f1 002B                    ___ftmul@f2 002E                    ___fttol@f1 0001  
              __pcstackCOMRAM 0001             main@debutDeCourse 00A7                    ___lwtoft@c 0009  
          __size_of_lcd_clear 0008                       ?___ftge 0001                       _CCP1CON 000FBD  
                     _CCP2CON 000FBA                     ?___awtoft 0009                     ?___ftpack 0001  
                   ?_adc_init 0001                     ?_adc_read 0001                     ?___lwtoft 0009  
    lcd_printf@have_precision 0095                    _lcd_printf 082E                     ?_lcd_busy 0001  
                   ?_lcd_init 0001                     ?_lcd_putc 0001             lcd_position@ligne 0004  
                     __Hparam 0000                       __Lparam 0000             __end_of_lcd_clear 23BE  
              lcd_printf@cval 009A                lcd_printf@larg 0090                lcd_printf@sign 0088  
              lcd_printf@size 0094               __size_of___ftge 0090                       ___ftadd 1976  
                     ___ftdiv 1D0A                       ___ftneg 2318                       ___lldiv 206C  
                     ___ftmul 1C16                       ___llmod 20EE                       ___fttol 1B22  
                   ?_pwm_init 0001                  __psmallconst 0800                lcd_putc@lettre 0006  
                     __pcinit 23AC                    ??___awtoft 000C                    ??___ftpack 0006  
                     __ramtop 0800                    ??_adc_init 0001                    ??_adc_read 0003  
                     __ptext0 15A2                       __ptext1 2276                       __ptext2 22A0  
                     __ptext3 21DA                       __ptext4 082E                       __ptext5 2386  
                     __ptext6 2154                       __ptext7 235A                       __ptext8 233C  
                     __ptext9 22F4                    ??___lwtoft 000C                     _T0CONbits 000FD5  
                   _T1CONbits 000FCD                     _T2CONbits 000FCA         __size_of_lcd_repete_n 0014  
                   _T3CONbits 000FB1         __size_of_lcd_position 001E                    ??_lcd_busy 0001  
                  ??_lcd_init 0003                    ??_lcd_putc 0006          end_of_initialization 23AC  
               __Lmediumconst 0000               ___lldiv@divisor 0005               ___lldiv@counter 000D  
                     postdec2 000FDD                       postinc2 000FDE                    ??_pwm_init 0002  
                _lcd_repete_n 2386                  _lcd_position 233C                     _PORTDbits 000F83  
              main@vitesseMax 00B5                     _PORTEbits 000F84  adc_init@numero_dernier_canal 0001  
                   _TRISCbits 000F94                     _TRISEbits 000F96           lcd_position@address 0005  
                 ?_lcd_printf 003A                    _pwm_setdc1 22A0                    _pwm_setdc2 2276  
         lcd_position@colonne 0003  __size_of_lcd_write_data_busy 0016                   _CCP1CONbits 000FBD  
                 ___ftdiv@exp 0029                 ??_lcd_clock_e 0001                   _CCP2CONbits 000FBA  
                 ___ftmul@exp 0034                __end_of___ftge 206C          lcd_write_data_busy@c 0002  
         start_initialization 23AC               main@finDeCourse 00A9    __end_of_lcd_write_cmd_data 2276  
  __end_of_lcd_write_cmd_busy 2386               ___llmod@divisor 0005               ___llmod@counter 0009  
                    ??___ftge 0007           __end_of_lcd_clock_e 23AC           __size_of_lcd_printf 0D74  
           __size_of___awtoft 0038             __size_of___ftpack 00AE                pwm_init@period 0002  
           __size_of_adc_init 00A6             __size_of_adc_read 002A             __size_of___lwtoft 0024  
               __pcstackBANK0 0060                   ?_pwm_setdc1 0010                   ?_pwm_setdc2 0010  
           __size_of_lcd_busy 003A             __size_of_lcd_init 0098             __size_of_lcd_putc 004C  
                   _main$1637 00B8                      ?___ftadd 0010                      ?___ftdiv 001C  
                    ?___ftneg 000D                      ?___lldiv 0001                      ?___ftmul 002B  
                    ?___llmod 0001                      ?___fttol 0001                     _lcd_clear 23B6  
           __size_of_pwm_init 0038                   __smallconst 0800                   _lcd_clock_e 239A  
                    _PIE1bits 000F9D                      _PIE2bits 000FA0                      _PIR1bits 000F9E  
                    _PIR2bits 000FA1           __size_of_pwm_setdc1 002A           __size_of_pwm_setdc2 002A  
                  ?_lcd_clear 0001           _lcd_write_data_busy 235A                    _ADCON0bits 000FC2  
                ??_lcd_printf 0044          ?_lcd_write_data_busy 0001           lcd_write_cmd_data@c 0001  
         lcd_write_cmd_busy@c 0002                      __Hrparam 0000                      __Lrparam 0000  
        adc_read@numero_canal 0005               lcd_printf@flags 009F               lcd_printf@width 00A1  
            __size_of___ftadd 01AC            __end_of_lcd_printf 15A2              __size_of___ftdiv 00E6  
            __size_of___ftneg 0024              __size_of___lldiv 0082              __size_of___ftmul 00F4  
            __size_of___llmod 0066              __size_of___fttol 00F4                      ___awtoft 2212  
                    ___ftpack 1DF0          __CFG_FOSC$ECPLLIO_EC 000000                      _adc_init 1E9E  
                    _adc_read 22CA                      ___lwtoft 22F4                      __ptext10 20EE  
                    __ptext11 206C                      __ptext20 2370                      __ptext12 1B22  
                    __ptext21 224A                      __ptext13 2318                      __ptext22 21A0  
                    __ptext14 1C16                      __ptext23 239A                      __ptext15 1FDC  
                    __ptext24 22CA                      __ptext16 1D0A                      __ptext25 1E9E  
                    __ptext17 1976                      __ptext26 2212                      __ptext18 1F44  
                    __ptext27 1DF0                      __ptext19 23B6                      _lcd_busy 21A0  
                    _lcd_init 1F44                      _lcd_putc 2154         ??_lcd_write_data_busy 0002  
               __size_of_main 03D4                      _s_digits 0801            _lcd_write_cmd_data 224A  
                    _pwm_init 21DA            _lcd_write_cmd_busy 2370                   ??_lcd_clear 0003  
       __CFG_CPUDIV$OSC1_PLL2 000000           ?_lcd_write_cmd_data 0001           ?_lcd_write_cmd_busy 0001  
                  _INTCONbits 000FF2                  ??_pwm_setdc1 0012                  ??_pwm_setdc2 0012  
         lcd_printf@digit_cnt 008F           lcd_printf@have_sign 008B              ___lldiv@dividend 0001  
        ??_lcd_write_cmd_data 0001          ??_lcd_write_cmd_busy 0002          lcd_printf@prefix_cnt 008C  
          __end_of_pwm_setdc1 22CA            __end_of_pwm_setdc2 22A0              ___lldiv@quotient 0009  
         lcd_printf@ramstring 0081           lcd_printf@sign_char 0083           lcd_printf@precision 00A0  
         lcd_printf@space_cnt 0099             pwm_init@nb_canaux 0001                  ?_lcd_clock_e 0001  
         lcd_printf@romstring 0084  
